# --- –ù–ê–ß–ê–õ–û –ü–û–õ–ù–û–ì–û –ö–û–î–ê BOT.PY (AI.IO.NET –í–ï–†–°–ò–Ø - –§–ò–ù–ê–õ) ---
import logging
import os
import asyncio
import re
import pytz # <<<--- –ù–û–í–´–ô –ò–ú–ü–û–†–¢
import datetime
import requests # –ù—É–∂–µ–Ω –¥–ª—è NewsAPI
import json # –î–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏ –æ—Ç–≤–µ—Ç–∞
import random
import base64
from collections import deque
from flask import Flask, Response
import hypercorn.config
from hypercorn.asyncio import serve as hypercorn_async_serve
import signal
import pymongo
from pymongo.errors import ConnectionFailure, PyMongoError
from bson.objectid import ObjectId # <<<--- –í–û–¢ –≠–¢–û–¢ –ò–ú–ü–û–†–¢ –ù–£–ñ–ï–ù
# ... –æ—Å—Ç–∞–ª—å–Ω—ã–µ –∏–º–ø–æ—Ä—Ç—ã ...

# –ò–º–ø–æ—Ä—Ç—ã –¥–ª—è AI.IO.NET (OpenAI –±–∏–±–ª–∏–æ—Ç–µ–∫–∞)
from openai import OpenAI, AsyncOpenAI, BadRequestError
import httpx

# –ò–º–ø–æ—Ä—Ç—ã Telegram
from telegram import ( # –°–≥—Ä—É–ø–ø–∏—Ä—É–µ–º –∏–º–ø–æ—Ä—Ç—ã –∏–∑ telegram
    Update,
    Bot,
    User,
    InlineKeyboardMarkup, # <<<--- –ù–£–ñ–ï–ù –î–õ–Ø –ö–ù–û–ü–û–ö "–ü–†–ê–í–î–ê –ò–õ–ò –í–´–°–ï–†"
    InlineKeyboardButton  # <<<--- –ù–£–ñ–ï–ù –î–õ–Ø –ö–ù–û–ü–û–ö "–ü–†–ê–í–î–ê –ò–õ–ò –í–´–°–ï–†"
)
from telegram.ext import ( # –°–≥—Ä—É–ø–ø–∏—Ä—É–µ–º –∏–º–ø–æ—Ä—Ç—ã –∏–∑ telegram.ext
    Application,
    CommandHandler,
    MessageHandler,
    filters,
    ContextTypes,
    JobQueue, # –£–∂–µ –µ—Å—Ç—å
    CallbackQueryHandler # <<<--- –ù–£–ñ–ï–ù –î–õ–Ø –û–ë–†–ê–ë–û–¢–ö–ò –ù–ê–ñ–ê–¢–ò–ô –ö–ù–û–ü–û–ö
)
import telegram # --->>> –í–û–¢ –≠–¢–ê –°–¢–†–û–ö–ê –ù–£–ñ–ù–ê <<<--- (—É —Ç–µ–±—è —É–∂–µ –µ—Å—Ç—å)

from dotenv import load_dotenv

# –ó–∞–≥—Ä—É–∂–∞–µ–º —Å–µ–∫—Ä–µ—Ç—ã (.env –¥–ª—è –ª–æ–∫–∞–ª—å–Ω–æ–≥–æ –∑–∞–ø—É—Å–∫–∞)
load_dotenv()

# --->>> –û–ü–†–ï–î–ï–õ–ï–ù–ò–ï –ß–ê–°–û–í–´–• –ü–û–Ø–°–û–í <<<---
MOSCOW_TZ = pytz.timezone('Europe/Moscow')
UTC_TZ = pytz.utc # –£–∂–µ –µ—Å—Ç—å –≤ datetime, –Ω–æ –¥–ª—è —è–≤–Ω–æ—Å—Ç–∏ –º–æ–∂–Ω–æ —Ç–∞–∫
# --->>> –ö–û–ù–ï–¶ –û–ü–†–ï–î–ï–õ–ï–ù–ò–Ø –ß–ê–°–û–í–´–• –ü–û–Ø–°–û–í <<<---

# --->>> –°–ò–°–¢–ï–ú–ê –ó–í–ê–ù–ò–ô –ü–û –°–û–û–ë–©–ï–ù–ò–Ø–ú <<<---
# –°–ª–æ–≤–∞—Ä—å: –ø–æ—Ä–æ–≥_—Å–æ–æ–±—â–µ–Ω–∏–π: (–ù–∞–∑–≤–∞–Ω–∏–µ –∑–≤–∞–Ω–∏—è, –°–æ–æ–±—â–µ–Ω–∏–µ –æ –¥–æ—Å—Ç–∏–∂–µ–Ω–∏–∏)
TITLES_BY_COUNT = {
    10:    ("–ó–∞–ª–µ—Ç–Ω—ã–π –ü–∏–∑–¥–∞–±–æ–ª", "üóø {mention}, —Ç—ã –Ω–∞—Å—Ç—Ä–æ—á–∏–ª –∞–∂ 10 –≤—ã—Å–µ—Ä–æ–≤! –¢–µ–ø–µ—Ä—å —Ç—ã –æ—Ñ–∏—Ü–∏–∞–ª—å–Ω–æ '–ó–∞–ª–µ—Ç–Ω—ã–π –ü–∏–∑–¥–∞–±–æ–ª'. –•—É–ª–∏ —Ç–∞–∫ –º–∞–ª–æ?"),
    50:    ("–ü–æ—á–µ—Ç–Ω—ã–π –§–ª—É–¥–µ—Ä", "üóø –û–≥–æ, {mention}, —É–∂–µ 50 —Å–æ–æ–±—â–µ–Ω–∏–π! –ü–æ–∑–¥—Ä–∞–≤–ª—è—é —Å –ø–æ—á–µ—Ç–Ω—ã–º –∑–≤–∞–Ω–∏–µ–º '–§–ª—É–¥–µ—Ä–∞'. –ü—Ä–æ–¥–æ–ª–∂–∞–π –∑–∞—Å–∏—Ä–∞—Ç—å —á–∞—Ç."),
    100:   ("–ú–∞—Å—Ç–µ—Ä –ë–µ—Å–ø–æ–ª–µ–∑–Ω–æ–≥–æ –¢—Ä—ë–ø–∞", "üóø {mention}, —Å–æ—Ç–æ—á–∫–∞! –¢—ã –¥–æ—Å—Ç–∏–≥ –≤–µ—Ä—à–∏–Ω—ã - '–ú–∞—Å—Ç–µ—Ä –ë–µ—Å–ø–æ–ª–µ–∑–Ω–æ–≥–æ –¢—Ä—ë–ø–∞'. –ú–æ–∏ –∞–ø–ª–æ–¥–∏—Å–º–µ–Ω—Ç—ã, –±–ª—è–¥—å."),
    250:   ("–ö–∞–Ω–¥–∏–¥–∞—Ç –≤ –ó–∞—Ç—ã—á–∫–∏ –¥–ª—è –ë–æ—á–∫–∏", "üóø 250 —Å–æ–æ–±—â–µ–Ω–∏–π –æ—Ç {mention}! –°–µ—Ä—å–µ–∑–Ω–∞—è –∑–∞—è–≤–∫–∞ –Ω–∞ '–ö–∞–Ω–¥–∏–¥–∞—Ç–∞ –≤ –ó–∞—Ç—ã—á–∫–∏ –¥–ª—è –ë–æ—á–∫–∏'. –°–∫–æ—Ä–æ –ø–µ—Ä–µ–ø–ª—é–Ω–µ—à—å –º–µ–Ω—è."),
    500:   ("–ó–∞—Å–ª—É–∂–µ–Ω–Ω—ã–π –î–æ–ª–±–æ–µ–± –ß–∞—Ç–∞‚Ñ¢", "üóø –ü–ò–ó–î–ï–¶! {mention}, 500 –≤—ã—Å–µ—Ä–æ–≤! –¢—ã —Ç–µ–ø–µ—Ä—å '–ó–∞—Å–ª—É–∂–µ–Ω–Ω—ã–π –î–æ–ª–±–æ–µ–± –ß–∞—Ç–∞‚Ñ¢'. –≠—Ç–æ –ø–æ—á—Ç–∏ –∫–∞–∫ –ù–æ–±–µ–ª–µ–≤–∫–∞, –Ω–æ –±–µ—Å–ø–æ–ª–µ–∑–Ω–µ–µ."),
    1000:  ("–ü–æ–ø–∏–∑–¥—è–∫–∏–Ω –î—Ä—É–≥", "üóø –ï–ë–ê–¢–¨! {mention}, —Ç—ã—Å—è—á–∞! –¢—ã –ª–∏–±–æ –º–æ–π –ª—É—á—à–∏–π –¥—Ä—É–≥, –ª–∏–±–æ —Å–∞–º—ã–π –≥–ª–∞–≤–Ω—ã–π –≤—Ä–∞–≥. –ó–≤–∞–Ω–∏–µ: '–ü–æ–ø–∏–∑–¥—è–∫–∏–Ω –î—Ä—É–≥'."),
    5000:  ("–ú–µ–≥–∞–ø–∏–∑–¥–∞–±–æ–ª", "üóø –ê—Ö—É–µ—Ç—å! {mention}, 5–∫! –¢—ã –ª–∏–±–æ –±–µ–∑—Ä–∞–±–æ—Ç–Ω—ã–π, –ª–∏–±–æ —Å–∞–º—ã–π –ª—é—Ç—ã–π –ª—é–±–∏—Ç–µ–ª—å –ø–æ–ø–∏–∑–¥–µ—Ç—å. –ó–≤–∞–Ω–∏–µ: '–ú–µ–≥–∞–ø–∏–∑–¥–∞–±–æ–ª'."),
}
# --->>> –ö–û–ù–ï–¶ –°–ò–°–¢–ï–ú–´ –ó–í–ê–ù–ò–ô <<<---

# --->>> –°–ò–°–¢–ï–ú–ê –ü–ò–°–ï–ß–ù–´–• –ó–í–ê–ù–ò–ô <<<---
# –°–ª–æ–≤–∞—Ä—å: –ø–æ—Ä–æ–≥_–¥–ª–∏–Ω—ã_—Å–º: (–ù–∞–∑–≤–∞–Ω–∏–µ –∑–≤–∞–Ω–∏—è, –°–æ–æ–±—â–µ–Ω–∏–µ –æ –¥–æ—Å—Ç–∏–∂–µ–Ω–∏–∏)
PENIS_TITLES_BY_SIZE = {
    10:  ("–ö–æ—Ä–æ—Ç–∫–æ—Å—Ç–≤–æ–ª", "üóø –û–≥–æ, {mention}, —É —Ç–µ–±—è —É–∂–µ <b>{size} —Å–º</b>! –ó–≤–∞–Ω–∏–µ '–ö–æ—Ä–æ—Ç–∫–æ—Å—Ç–≤–æ–ª' —Ç–≤–æ—ë! –ù–µ —Å—Ç–µ—Å–Ω—è–π—Å—è, —ç—Ç–æ —Ç–æ–ª—å–∫–æ –Ω–∞—á–∞–ª–æ... –∏–ª–∏ –∫–æ–Ω–µ—Ü, —Ö—É–π –∑–Ω–∞–µ—Ç."),
    30:  ("–°—Ä–µ–¥–Ω–µ—Å—Ç–∞—Ç–∏—Å—Ç–∏—á–µ—Å–∫–∏–π –•—É–µ—Ü", "üóø {mention}, —Ü–µ–ª—ã—Ö <b>{size} —Å–º</b>! –ü–æ–∑–¥—Ä–∞–≤–ª—è—é, —Ç—ã —Ç–µ–ø–µ—Ä—å '–°—Ä–µ–¥–Ω–µ—Å—Ç–∞—Ç–∏—Å—Ç–∏—á–µ—Å–∫–∏–π –•—É–µ—Ü'! –ü–æ—á—Ç–∏ –∫–∞–∫ —É –≤—Å–µ—Ö, –Ω–æ —Ç—ã –∂–µ –æ—Å–æ–±–µ–Ω–Ω—ã–π, –¥–∞?"),
    50:  ("–ü—Ä–∏–ª–∏—á–Ω—ã–π –ê–≥—Ä–µ–≥–∞—Ç", "üóø –ù–∏—Ö—É—è —Å–µ–±–µ, {mention}! <b>{size} —Å–º</b>! –¢—ã –¥–æ—Å–ª—É–∂–∏–ª—Å—è –¥–æ '–ü—Ä–∏–ª–∏—á–Ω–æ–≥–æ –ê–≥—Ä–µ–≥–∞—Ç–∞'! –¢–∞–∫–∏–º –∏ –±–∞–±—É –º–æ–∂–Ω–æ –≤–ø–µ—á–∞—Ç–ª–∏—Ç—å... –µ—Å–ª–∏ –æ–Ω–∞ —Å–ª–µ–ø–∞—è."),
    75:  ("–ï–±—ã—Ä—å-–¢–µ—Ä—Ä–æ—Ä–∏—Å—Ç", "üóø –ü–∏–∑–¥–µ—Ü, {mention}, —É —Ç–µ–±—è —É–∂–µ <b>{size} —Å–º</b>! –¢—ã —Ç–µ–ø–µ—Ä—å '–ï–±—ã—Ä—å-–¢–µ—Ä—Ä–æ—Ä–∏—Å—Ç'! –û–ø–∞—Å–Ω–æ, —Å—É–∫–∞, –æ–ø–∞—Å–Ω–æ!"),
    100: ("–í–ª–∞—Å—Ç–µ–ª–∏–Ω –ü–∏—Å–µ–∫", "üóø –í–ê–®–£ –ú–ê–¢–¨! {mention}, <b>{size} —Å–º</b>!!! –¢—ã —Ç–µ–ø–µ—Ä—å '–í–ª–∞—Å—Ç–µ–ª–∏–Ω –ü–∏—Å–µ–∫ –í—Å–µ—è –ß–∞—Ç–∞'! –°–Ω–∏–º–∞—é —à–ª—è–ø—É... –∏ —Ç—Ä—É—Å—ã."),
    150: ("–ú–∏—Ñ–∏—á–µ—Å–∫–∏–π –ï–ª–¥–∞–∫", "üóø –≠—Ç–æ –≤–æ–æ–±—â–µ –∑–∞–∫–æ–Ω–Ω–æ, {mention}?! <b>{size} —Å–º</b>?! –¢—ã –Ω–µ —á–µ–ª–æ–≤–µ–∫, —Ç—ã '–ú–∏—Ñ–∏—á–µ—Å–∫–∏–π –ï–ª–¥–∞–∫'! –õ–µ–≥–µ–Ω–¥—ã –±—É–¥—É—Ç —Ö–æ–¥–∏—Ç—å!"),
    200: ("–ß–ª–µ–Ω–æ—Ç–∏—Ç–∞–Ω", "üóø –ï–±–∞—Ç—å, {mention}?! <b>{size} —Å–º</b>?! –¢—ã –Ω–µ —á–µ–ª–æ–≤–µ–∫, —Ç—ã '–ß–ª–µ–Ω–æ—Ç–∏—Ç–∞–Ω'! –ë–∏—Ç–≤—É —Ç–∏—Ç–∞–Ω–æ–≤ –º–æ–∂–Ω–æ –±—ã–ª–æ –∑–∞–≤–µ—Ä—à–∏—Ç—å –∏–Ω–∞—á–µ!"),
    300: ("–¢—Ä–∞–∫—Ç–æ—Ä–∏—Å—Ç", "üóø –°—é–¥–∞–∞–∞–∞, {mention}?! <b>{size} —Å–º</b>?! –¢—ã –¥–æ—Å—Ç–∏–≥ —á–ª–µ–Ω–æ—Å–æ–≤–µ—Ä—à–µ–Ω—Å—Ç–≤–∞, —Ç—ã '–¢—Ä–∞–∫—Ç–æ—Ä–∏—Å—Ç'! –ò –¥–∞–∂–µ –±–æ–≥ —Ç–µ–±–µ –Ω–µ —Å—É–¥—å—è!"),
    500: ("–î–µ–¥ –ú–∞–∫—Å–∏–º", "üóø –ï–ø—Ç, {mention}?! <b>{size} —Å–º</b>?! –í–∏–¥–∏–º–æ –ª–µ–≥–µ–Ω–¥—ã –æ–∂–∏–≤–∞—é—Ç, —Ç—ã '–î–µ–¥ –ú–∞–∫—Å–∏–º'! –ò—â–∏ –±–∞–±—É –ó–∏–Ω—É –∏ –∫–æ—Ä–∑–∏–Ω—É, —Ö—É–ª–µ!"),
    1000: ("–ß–ª–µ–Ω–æ–ª–µ–±–µ–¥–∫–∞", "üóø –ë–ª—è, {mention}?! <b>{size} —Å–º</b>?! –Ø —Ö—É–π –∑–Ω–∞–µ—Ç –∑–∞—á–µ–º —Ç–µ–±–µ —ç—Ç–æ—Ç –∫–∞–Ω–∞—Ç, –Ω–æ —Ç–µ–ø–µ—Ä—å —Ç—ã '–ß–ª–µ–Ω–æ–ª–µ–±–µ–¥–∫–∞'! –ú–æ–∂–µ—à—å —Å–º–µ–ª–æ –¥–æ—Å—Ç–∞–≤–∞—Ç—å –∫–∞–º–∞–∑—ã –∏–∑ –∫—é–≤–µ—Ç–∞!"),
    5000: ("–ö–æ—Å–º–∏—á–µ—Å–∫–∏–π –±—É–±—É–Ω", "üóø –î–∞ –Ω–∞ –Ω–∞—Ö—É–π, {mention}?! <b>{size} —Å–º</b>?! –ù–µ –∑–Ω–∞—é —Å –∫–µ–º —Ç—ã –±—É–¥–µ—à—å —Å—Ä–∞–∂–∞—Ç—å—Å—è —Ç–∞–∫–∏–º, –Ω–æ —Ç–µ–ø–µ—Ä—å —Ç—ã '–ö–æ—Å–º–∏—á–µ—Å–∫–∏–π –±—É–±—É–Ω'! –ú–æ–∂–µ—à—å —Å–º–µ–ª–æ –¥–∞—Ç—å –ø–∏–∑–¥—ã –°–∫–∞–π–≤–æ–∫–µ—Ä—É!"),
    10000: ("–ú—ã –Ω–µ –∑–Ω–∞–µ–º —á—Ç–æ —ç—Ç–æ —Ç–∞–∫–æ–µ, –µ—Å–ª–∏ –±—ã –º—ã –∑–Ω–∞–ª–∏ –Ω–æ –º—ã –Ω–µ –∑–Ω–∞–µ–º...", "üóø –ù–µ –Ω—É –µ–±–∞—Ç—å, {mention}?! <b>{size} —Å–º</b>?! –î–∞ –Ω–µ—Ö—É–π —Ç—É—Ç —Å–∫–∞–∑–∞—Ç—å, —Ç–µ–ø–µ—Ä—å —Ç—ã '–ú—ã –Ω–µ –∑–Ω–∞–µ–º —á—Ç–æ —ç—Ç–æ —Ç–∞–∫–æ–µ, –µ—Å–ª–∏ –±—ã –º—ã –∑–Ω–∞–ª–∏ –Ω–æ –º—ã –Ω–µ –∑–Ω–∞–µ–º...'! –î–∞–ª—å—à–µ –∑–≤–∞–Ω–∏–π –Ω–µ—Ç, –∑–∞–µ–±–∞–ª—Å—è –ø—Ä–∏–¥—É–º—ã–≤–∞—Ç—å!"),
    # –î–æ–±–∞–≤—å –µ—â–µ, –µ—Å–ª–∏ –Ω–∞–¥–æ
}
PENIS_GROWTH_COOLDOWN_SECONDS = 6 * 60 * 60 # 6 —á–∞—Å–æ–≤
# --->>> –ö–û–ù–ï–¶ –°–ò–°–¢–ï–ú–´ <<<---

# --->>> –°–ò–°–¢–ï–ú–ê –°–ò–°–ï–ß–ù–´–• –ó–í–ê–ù–ò–ô <<<---
# –°–ª–æ–≤–∞—Ä—å: –ø–æ—Ä–æ–≥_—Ä–∞–∑–º–µ—Ä–∞: (–ù–∞–∑–≤–∞–Ω–∏–µ –∑–≤–∞–Ω–∏—è, –°–æ–æ–±—â–µ–Ω–∏–µ –æ –¥–æ—Å—Ç–∏–∂–µ–Ω–∏–∏)
# –†–∞–∑–º–µ—Ä—ã —É—Å–ª–æ–≤–Ω—ã–µ, –º–æ–∂–Ω–æ –ø—Ä–∏–¥—É–º–∞—Ç—å —Å–≤–æ—é —à–∫–∞–ª—É. –ù–∞–ø—Ä–∏–º–µ—Ä, –æ—Ç 0 –¥–æ 7+
TITS_TITLES_BY_SIZE = {
    0:  ("–ü–ª–æ—Å–∫–æ–¥–æ–Ω–∫–∞", "üóø {mention}, —Ç–≤–æ–∏ —Å–∏—Å—å–∫–∏ {size}-–≥–æ —Ä–∞–∑–º–µ—Ä–∞? –ü–æ–∑–¥—Ä–∞–≤–ª—è—é, —Ç—ã '–ü–ª–æ—Å–∫–æ–¥–æ–Ω–∫–∞'! –ù–µ —Ä–∞—Å—Å—Ç—Ä–∞–∏–≤–∞–π—Å—è, —Ö–æ—Ç—å —Å–ø–∞—Ç—å –Ω–∞ –∂–∏–≤–æ—Ç–µ —É–¥–æ–±–Ω–æ."),
    1:  ("–°–∫—Ä–æ–º–Ω—è—à–∫–∞", "üóø –û–≥–æ, {mention}, —É–∂–µ <b>{size}-–π —Ä–∞–∑–º–µ—Ä</b>! –ó–≤–∞–Ω–∏–µ '–°–∫—Ä–æ–º–Ω—è—à–∫–∞' —Ç–≤–æ—ë! –ú–∞–ª–æ–≤–∞—Ç–æ, –∫–æ–Ω–µ—á–Ω–æ, –Ω–æ —Ö–æ—Ç—å —á—Ç–æ-—Ç–æ –µ—Å—Ç—å."),
    2:  ("–ó–æ–ª–æ—Ç–∞—è –°–µ—Ä–µ–¥–∏–Ω–∞", "üóø {mention}, —Ü–µ–ª—ã—Ö <b>{size} —Ä–∞–∑–º–µ—Ä</b>! –¢—ã —Ç–µ–ø–µ—Ä—å '–ó–æ–ª–æ—Ç–∞—è –°–µ—Ä–µ–¥–∏–Ω–∞'! –ò –Ω–µ –º–Ω–æ–≥–æ, –∏ –Ω–µ –º–∞–ª–æ, –≤ —Å–∞–º—ã–π —Ä–∞–∑, —á—Ç–æ–±—ã –≤ –º–∞—Ä—à—Ä—É—Ç–∫–µ –Ω–µ –º–µ—à–∞–ª–∏."),
    3:  ("–£–≤–µ—Ä–µ–Ω–Ω—ã–π –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å", "üóø –ù–∏—Ö—É—è —Å–µ–±–µ, {mention}! <b>{size}-–π —Ä–∞–∑–º–µ—Ä</b>! –¢—ã –¥–æ—Å–ª—É–∂–∏–ª–∞—Å—å(—Å—è) –¥–æ '–£–≤–µ—Ä–µ–Ω–Ω–æ–≥–æ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è'! –¢–∞–∫–∏–º –∏ –º—É–∂–∏–∫–∞ –º–æ–∂–Ω–æ –ø—Ä–∏–¥–∞–≤–∏—Ç—å... —Å–ª—É—á–∞–π–Ω–æ."),
    4:  ("–ê—Ä–±—É–∑—ã –Ω–∞ –í—ã–≥—É–ª–µ", "üóø –ü–∏–∑–¥–µ—Ü, {mention}, —É —Ç–µ–±—è —É–∂–µ <b>{size}-–π —Ä–∞–∑–º–µ—Ä</b>! –¢—ã —Ç–µ–ø–µ—Ä—å '–ê—Ä–±—É–∑—ã –Ω–∞ –í—ã–≥—É–ª–µ'! –û–ø–∞—Å–Ω–æ, —Å—É–∫–∞, –æ–ø–∞—Å–Ω–æ –¥–ª—è –æ–∫—Ä—É–∂–∞—é—â–∏—Ö!"),
    5:  ("–î–æ—è—Ä–∫–∞ –í—Å–µ–ª–µ–Ω–Ω–æ–π", "üóø –í–ê–®–£ –ú–ê–¢–¨! {mention}, <b>{size}-–π —Ä–∞–∑–º–µ—Ä</b>!!! –¢—ã —Ç–µ–ø–µ—Ä—å '–î–æ—è—Ä–∫–∞ –í—Å–µ–ª–µ–Ω–Ω–æ–π'! –°–Ω–∏–º–∞—é —à–ª—è–ø—É... –∏ –ª–∏—Ñ—á–∏–∫ (–µ—Å–ª–∏ –±—ã –æ–Ω —É –º–µ–Ω—è –±—ã–ª)."),
    10:  ("–°–ò–°–¨–ö–ò –ë–û–ì–ê", "üóø –≠—Ç–æ –≤–æ–æ–±—â–µ –∑–∞–∫–æ–Ω–Ω–æ, {mention}?! <b>{size}-–π —Ä–∞–∑–º–µ—Ä</b>?! –¢—ã –Ω–µ —á–µ–ª–æ–≤–µ–∫, —É —Ç–µ–±—è '–°–ò–°–¨–ö–ò –ë–û–ì–ê'! –ú–æ–∂–Ω–æ —Å–ø—É—Ç–Ω–∏–∫–∏ —Å–±–∏–≤–∞—Ç—å!"),
    20:  ("–ì–∞–ª–∞–∫—Ç–∏—á–µ—Å–∫–∏–µ –ë—É—Ñ–µ—Ä–∞", "üóø –ï–±–∞—Ç—å, {mention}?! <b>{size}+ —Ä–∞–∑–º–µ—Ä</b>?! –¢—ã –≤–ª–∞–¥–µ–µ—à—å '–ì–∞–ª–∞–∫—Ç–∏—á–µ—Å–∫–∏–º–∏ –ë—É—Ñ–µ—Ä–∞–º–∏'! –ü–µ—Ä–µ–¥ —Ç–æ–±–æ–π –º–µ—Ä–∫–Ω–µ—Ç –¥–∞–∂–µ –ú–ª–µ—á–Ω—ã–π –ü—É—Ç—å!"),
    50:  ("–í—Å–µ–ª–µ–Ω—Å–∫–∏–µ –¥–æ–π–∫–∏", "üóø –¢–æ–≥–æ —Ä–æ—Ç –µ–±–∞–ª, {mention}?! <b>{size}+ —Ä–∞–∑–º–µ—Ä</b>?! –¢—ã –æ–±–ª–∞–¥–∞—Ç–µ–ª—å '–í—Å–µ–ª–µ–Ω—Å–∫–∏—Ö –¥–æ–µ–∫'! –û—Å–≤–æ–∏–º –∫–æ—Å–º–æ—Å —Ö—É–ª–µ!"),
    100:  ("–ó–≤–µ–∑–¥–Ω—ã–π —Å–æ—Å–æ–∫", "üóø –ù—É –∞—Ö—É–µ—Ç—å, {mention}?! <b>{size}+ —Ä–∞–∑–º–µ—Ä</b>?! –¢—ã —Ç–µ–ø–µ—Ä—å '–ó–≤–µ–∑–¥–Ω—ã–π —Å–æ—Å–æ–∫', –¥–∞–ª—å—à–µ —Ç–æ–ª—å–∫–æ –±–µ—Å–∫–æ–Ω–µ—á–Ω–æ—Å—Ç—å!"),
    500:  ("–ê–Ω–¥—Ä–æ–º–µ–¥–æ–≤—ã –æ—Ä–µ–æ–ª—ã", "üóø –ù—É —á–µ –Ω–∞—Ö—É–π, {mention}?! <b>{size}+ —Ä–∞–∑–º–µ—Ä</b>?! –¢—ã —Ç–µ–ø–µ—Ä—å '–ê–Ω–¥—Ä–æ–º–µ–¥–æ–≤—ã –æ—Ä–µ–æ–ª—ã', —Å–æ—Å–∫–∏ –∫–∞–∫ –≥–∞–ª–∞–∫—Ç–∏–∫–∞, –Ω–µ –ø–æ–º–µ—â–∞—é—Ç—Å—è –≤ –≥–ª–∞–∑–∞!"),

    # –î–æ–±–∞–≤—å –µ—â–µ, –µ—Å–ª–∏ –Ω–∞–¥–æ
}
TITS_GROWTH_COOLDOWN_SECONDS = 6 * 60 * 60 # 6 —á–∞—Å–æ–≤, –∫–∞–∫ –∏ –¥–ª—è –ø–∏—Å–µ–∫
# --->>> –ö–û–ù–ï–¶ –°–ò–°–¢–ï–ú–´ <<<---

# --- –ù–ê–°–¢–†–û–ô–ö–ò ---
TELEGRAM_BOT_TOKEN = os.getenv("TELEGRAM_BOT_TOKEN")
IO_NET_API_KEY = os.getenv("IO_NET_API_KEY")
MONGO_DB_URL = os.getenv("MONGO_DB_URL")
MAX_MESSAGES_TO_ANALYZE = 200 # –û–ø—Ç–∏–º–∞–ª—å–Ω–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ
ADMIN_USER_ID = int(os.getenv("ADMIN_USER_ID", "0"))
if ADMIN_USER_ID == 0: logger.warning("ADMIN_USER_ID –Ω–µ –∑–∞–¥–∞–Ω!")
MAX_TELEGRAM_MESSAGE_LENGTH = 4096 # –°—Ç–∞–Ω–¥–∞—Ä—Ç–Ω—ã–π –ª–∏–º–∏—Ç Telegram
TOS_BATTLE_QUESTION_ANSWER_TIME_SECONDS = 45 # 45 —Å–µ–∫—É–Ω–¥ –Ω–∞ —Ä–∞–∑–º—ã—à–ª–µ–Ω–∏–µ

# --- –ù–ê–°–¢–†–û–ô–ö–ò –ù–û–í–û–°–¢–ï–ô (GNEWS) ---
#GNEWS_API_KEY = os.getenv("GNEWS_API_KEY")
#NEWS_COUNTRY = "ru" # –°—Ç—Ä–∞–Ω–∞
#NEWS_LANG = "ru"    # –Ø–∑—ã–∫ –Ω–æ–≤–æ—Å—Ç–µ–π
#NEWS_COUNT = 3      # –°–∫–æ–ª—å–∫–æ –Ω–æ–≤–æ—Å—Ç–µ–π –±—Ä–∞—Ç—å
#NEWS_POST_INTERVAL = 60 * 60 * 6 # –ò–Ω—Ç–µ—Ä–≤–∞–ª –ø–æ—Å—Ç–∏–Ω–≥–∞ (6 —á–∞—Å–æ–≤)
#NEWS_JOB_NAME = "post_news_job"

#if not GNEWS_API_KEY:
    #logger.warning("GNEWS_API_KEY –Ω–µ –Ω–∞–π–¥–µ–Ω! –ù–æ–≤–æ—Å—Ç–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –±—É–¥–µ—Ç –æ—Ç–∫–ª—é—á–µ–Ω–∞.")

# --->>> –ù–ê–°–¢–†–û–ô–ö–ò –ò–ì–†–´ "–ü–†–ê–í–î–ê –ò–õ–ò –í–´–°–ï–†" <<<---
TRUTH_OR_SHIT_COOLDOWN_SECONDS = 5 * 60      # 5 –º–∏–Ω—É—Ç –∫—É–ª–¥–∞—É–Ω –Ω–∞ –∑–∞–ø—É—Å–∫ –Ω–æ–≤–æ–π –∏–≥—Ä—ã –≤ —á–∞—Ç–µ
TRUTH_OR_SHIT_AUTO_REVEAL_DELAY_SECONDS = 3 * 60 # –ß–µ—Ä–µ–∑ —Å–∫–æ–ª—å–∫–æ —Å–µ–∫—É–Ω–¥ –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ —Ä–∞—Å–∫—Ä—ã–≤–∞—Ç—å –æ—Ç–≤–µ—Ç (3 –º–∏–Ω—É—Ç—ã)
# --->>> –ö–û–ù–ï–¶ –ù–ê–°–¢–†–û–ï–ö –ò–ì–†–´ <<<---

# –ü—Ä–æ–≤–µ—Ä–∫–∞ –∫–ª—é—á–µ–π
if not TELEGRAM_BOT_TOKEN: raise ValueError("–ù–ï –ù–ê–ô–î–ï–ù TELEGRAM_BOT_TOKEN!")
if not IO_NET_API_KEY: raise ValueError("–ù–ï –ù–ê–ô–î–ï–ù IO_NET_API_KEY!")
if not MONGO_DB_URL: raise ValueError("–ù–ï –ù–ê–ô–î–ï–ù–ê MONGO_DB_URL!")

# --- –õ–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ ---
logging.basicConfig(format="%(asctime)s - %(name)s - %(levelname)s - %(message)s", level=logging.INFO)
logging.getLogger("httpx").setLevel(logging.WARNING)
logging.getLogger("hypercorn").setLevel(logging.INFO)
logging.getLogger("openai").setLevel(logging.WARNING)
logging.getLogger("pymongo").setLevel(logging.WARNING)
logger = logging.getLogger(__name__)

# --- –ü–û–î–ö–õ–Æ–ß–ï–ù–ò–ï –ö MONGODB ATLAS ---
try:
    mongo_client = pymongo.MongoClient(MONGO_DB_URL, serverSelectionTimeoutMS=5000)
    mongo_client.admin.command('ping')
    logger.info("–£—Å–ø–µ—à–Ω–æ–µ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ MongoDB Atlas!")
    db = mongo_client['popizdyaka_db']
    history_collection = db['message_history']
    last_reply_collection = db['last_replies']
    chat_activity_collection = db['chat_activity']
    chat_activity_collection.create_index("chat_id", unique=True)
    user_profiles_collection = db['user_profiles']
    user_profiles_collection.create_index("user_id", unique=True)
    # --->>> –ù–û–í–ê–Ø –ö–û–õ–õ–ï–ö–¶–ò–Ø –î–õ–Ø –ü–ò–°–ï–ö –ü–û –ß–ê–¢–ê–ú <<<---
    penis_stats_collection = db['penis_stats_by_chat']
    # –ò–Ω–¥–µ–∫—Å—ã –¥–ª—è –±—ã—Å—Ç—Ä–æ–≥–æ –ø–æ–∏—Å–∫–∞ –∏ —Å–æ—Ä—Ç–∏—Ä–æ–≤–∫–∏
    penis_stats_collection.create_index([("chat_id", pymongo.ASCENDING), ("user_id", pymongo.ASCENDING)], unique=True) # –£–Ω–∏–∫–∞–ª—å–Ω–∞—è —Å–≤—è–∑–∫–∞ —é–∑–µ—Ä-—á–∞—Ç
    penis_stats_collection.create_index([("chat_id", pymongo.ASCENDING), ("penis_size", pymongo.DESCENDING)]) # –î–ª—è —Ç–æ–ø–∞ –ø–æ —á–∞—Ç—É
    logger.info("–ö–æ–ª–ª–µ–∫—Ü–∏—è penis_stats_by_chat –≥–æ—Ç–æ–≤–∞.")
# --->>> –ö–û–ù–ï–¶ <<<---
    tits_stats_collection = db['tits_stats_by_chat']
            # –ò–Ω–¥–µ–∫—Å—ã
    tits_stats_collection.create_index([("chat_id", pymongo.ASCENDING), ("user_id", pymongo.ASCENDING)], unique=True)
    tits_stats_collection.create_index([("chat_id", pymongo.ASCENDING), ("tits_size", pymongo.DESCENDING)]) # –ü–æ tits_size
    logger.info("–ö–æ–ª–ª–µ–∫—Ü–∏—è tits_stats_by_chat –≥–æ—Ç–æ–≤–∞.")

# --->>> –ù–û–í–ê–Ø –ö–û–õ–õ–ï–ö–¶–ò–Ø –î–õ–Ø –ò–ì–† "–ü–†–ê–í–î–ê –ò–õ–ò –í–´–°–ï–†" <<<---
    active_truth_or_shit_games_collection = db['truth_or_shit_games'] # –ò–∑–º–µ–Ω–∏–ª –∏–º—è –¥–ª—è —è—Å–Ω–æ—Å—Ç–∏
    active_truth_or_shit_games_collection.create_index([("chat_id", pymongo.ASCENDING), ("message_id_question", pymongo.ASCENDING)], unique=True) # –£–Ω–∏–∫–∞–ª—å–Ω–∞—è –∏–≥—Ä–∞ –ø–æ —á–∞—Ç—É –∏ ID —Å–æ–æ–±—â–µ–Ω–∏—è
    active_truth_or_shit_games_collection.create_index([("chat_id", pymongo.ASCENDING), ("revealed", pymongo.ASCENDING)]) # –î–ª—è –ø–æ–∏—Å–∫–∞ –∞–∫—Ç–∏–≤–Ω—ã—Ö –∏–≥—Ä
    # TTL –∏–Ω–¥–µ–∫—Å –¥–ª—è –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–≥–æ —É–¥–∞–ª–µ–Ω–∏—è –°–¢–ê–†–´–• –†–ê–°–ö–†–´–¢–´–• –∏–ª–∏ –û–ß–ï–ù–¨ –°–¢–ê–†–´–• –ù–ï–†–ê–°–ö–†–´–¢–´–• –∏–≥—Ä (–Ω–∞–ø—Ä–∏–º–µ—Ä, —á–µ—Ä–µ–∑ 3 –¥–Ω—è)
# –ß—Ç–æ–±—ã –Ω–µ —Ö—Ä–∞–Ω–∏—Ç—å –º—É—Å–æ—Ä –≤–µ—á–Ω–æ. –í—Ä–µ–º—è –≤ —Å–µ–∫—É–Ω–¥–∞—Ö.
# –í–∞–∂–Ω–æ: expires_at –¥–æ–ª–∂–Ω–æ –±—ã—Ç—å –ø–æ–ª–µ–º —Ç–∏–ø–∞ datetime.datetime
# –ú—ã –Ω–µ –±—É–¥–µ–º –µ–≥–æ —è–≤–Ω–æ —Å—Ç–∞–≤–∏—Ç—å, MongoDB –±—É–¥–µ—Ç –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å —Ç–µ–∫—É—â–µ–µ –≤—Ä–µ–º—è + expireAfterSeconds –¥–ª—è –¥–æ–∫—É–º–µ–Ω—Ç–æ–≤ –±–µ–∑ —ç—Ç–æ–≥–æ –ø–æ–ª—è,
# –µ—Å–ª–∏ –±—ã –º—ã –µ–≥–æ –¥–æ–±–∞–≤–∏–ª–∏. –ù–æ –ª—É—á—à–µ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å created_at –∏ —á–∏—Å—Ç–∏—Ç—å —Å—Ç–∞—Ä—ã–µ –∏–≥—Ä—ã –¥—Ä—É–≥–∏–º –º–µ—Ö–∞–Ω–∏–∑–º–æ–º,
# –ª–∏–±–æ —Å—Ç–∞–≤–∏—Ç—å expires_at —è–≤–Ω–æ –ø—Ä–∏ —Ä–∞—Å–∫—Ä—ã—Ç–∏–∏ –∏–≥—Ä—ã.
# –î–ª—è –ø—Ä–æ—Å—Ç–æ—Ç—ã, –ø–æ–∫–∞ –æ—Å—Ç–∞–≤–∏–º TTL –Ω–∞ 'created_at', –Ω–æ –æ–Ω —É–¥–∞–ª–∏—Ç –í–°–ï —Å—Ç–∞—Ä—ã–µ –∏–≥—Ä—ã, –¥–∞–∂–µ –Ω–µ—Ä–∞—Å–∫—Ä—ã—Ç—ã–µ.
# –ë–æ–ª–µ–µ –ø—Ä–∞–≤–∏–ª—å–Ω–æ: –¥–æ–±–∞–≤–∏—Ç—å –ø–æ–ª–µ 'game_over_at' –∏ TTL –Ω–∞ –Ω–µ–≥–æ, –∏–ª–∏ —á–∏—Å—Ç–∏—Ç—å –ø–µ—Ä–∏–æ–¥–∏—á–µ—Å–∫–∏.
# –ü–æ–∫–∞ —Å–¥–µ–ª–∞–µ–º TTL –Ω–∞ created_at –¥–ª—è –∞–≤—Ç–æ–æ—á–∏—Å—Ç–∫–∏ –æ—á–µ–Ω—å —Å—Ç–∞—Ä—ã—Ö –∏–≥—Ä (–Ω–∞–ø—Ä–∏–º–µ—Ä, 7 –¥–Ω–µ–π).
    TRUTH_OR_SHIT_GAME_TTL_SECONDS = 7 * 24 * 60 * 60 # 7 –¥–Ω–µ–π
    active_truth_or_shit_games_collection.create_index("created_at", expireAfterSeconds=TRUTH_OR_SHIT_GAME_TTL_SECONDS)
    logger.info("–ö–æ–ª–ª–µ–∫—Ü–∏—è truth_or_shit_games –≥–æ—Ç–æ–≤–∞.")
# --->>> –ö–û–ù–ï–¶ –ù–û–í–û–ô –ö–û–õ–õ–ï–ö–¶–ò–ò <<<---

# –ù–û–í–ê–Ø –ö–û–õ–õ–ï–ö–¶–ò–Ø –î–õ–Ø –ë–ê–¢–¢–õ–û–í
    tos_battles_collection = db['tos_battles']
    tos_battles_collection.create_index([("chat_id", pymongo.ASCENDING), ("status", pymongo.ASCENDING)]) # –î–ª—è –ø–æ–∏—Å–∫–∞ –∞–∫—Ç–∏–≤–Ω—ã—Ö/–Ω–∞–±–∏—Ä–∞—é—â–∏—Ö—Å—è –∏–≥—Ä
    tos_battles_collection.create_index("created_at", expireAfterSeconds=24 * 60 * 60) # –£–¥–∞–ª—è—Ç—å –æ—á–µ–Ω—å —Å—Ç–∞—Ä—ã–µ –∏–≥—Ä—ã (1 –¥–µ–Ω—å)
    logger.info("–ö–æ–ª–ª–µ–∫—Ü–∏—è tos_battles –≥–æ—Ç–æ–≤–∞.")

# –ö–æ–Ω—Å—Ç–∞–Ω—Ç—ã –¥–ª—è –ë–∞—Ç—Ç–ª–∞
    TOS_BATTLE_RECRUITMENT_DURATION_SECONDS = 60  # 1 –º–∏–Ω—É—Ç–∞ –Ω–∞ –Ω–∞–±–æ—Ä –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é
    TOS_BATTLE_RECRUITMENT_EXTENSION_SECONDS = 30 # –ù–∞ —Å–∫–æ–ª—å–∫–æ —Ö–æ—Å—Ç –º–æ–∂–µ—Ç –ø—Ä–æ–¥–ª–∏—Ç—å
    TOS_BATTLE_MIN_PARTICIPANTS = 2 # –ú–∏–Ω–∏–º–∞–ª—å–Ω–æ –¥–ª—è —Å—Ç–∞—Ä—Ç–∞
    TOS_BATTLE_MAX_PARTICIPANTS = 20 # –ú–∞–∫—Å–∏–º–∞–ª—å–Ω–æ (—á—Ç–æ–±—ã –Ω–µ –ø–µ—Ä–µ–≥—Ä—É–∂–∞—Ç—å)
    TOS_BATTLE_NUM_QUESTIONS = 10
    TOS_BATTLE_COOLDOWN_SECONDS = 5 * 60 # –ö—É–ª–¥–∞—É–Ω –Ω–∞ –∑–∞–ø—É—Å–∫ –Ω–æ–≤–æ–≥–æ –±–∞—Ç—Ç–ª–∞ –≤ —á–∞—Ç–µ

# –ü—Ä–∏–∑—ã
    TOS_BATTLE_PENIS_REWARD_CM = 5
    TOS_BATTLE_TITS_REWARD_SIZE = 0.2

    logger.info("–ö–æ–ª–ª–µ–∫—Ü–∏—è user_profiles –≥–æ—Ç–æ–≤–∞.")
    logger.info("–ö–æ–ª–ª–µ–∫—Ü–∏–∏ MongoDB –≥–æ—Ç–æ–≤—ã.")
    bot_status_collection = db['bot_status']
    logger.info("–ö–æ–ª–ª–µ–∫—Ü–∏—è bot_status –≥–æ—Ç–æ–≤–∞.")
except Exception as e:
    logger.critical(f"–ü–ò–ó–î–ï–¶ –ø—Ä–∏ –Ω–∞—Å—Ç—Ä–æ–π–∫–µ MongoDB: {e}", exc_info=True)
    raise SystemExit(f"–û—à–∏–±–∫–∞ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ MongoDB: {e}")

# --- –ù–ê–°–¢–†–û–ô–ö–ê –ö–õ–ò–ï–ù–¢–ê AI.IO.NET API ---
try:
    ionet_client = AsyncOpenAI(
        api_key=IO_NET_API_KEY,
        base_url="https://api.intelligence.io.solutions/api/v1/" # –ü–†–û–í–ï–†–ï–ù–ù–´–ô URL!
    )
    logger.info("–ö–ª–∏–µ–Ω—Ç AsyncOpenAI –¥–ª—è ai.io.net API –Ω–∞—Å—Ç—Ä–æ–µ–Ω.")
except Exception as e:
     logger.critical(f"–ü–ò–ó–î–ï–¶ –ø—Ä–∏ –Ω–∞—Å—Ç—Ä–æ–π–∫–µ –∫–ª–∏–µ–Ω—Ç–∞ ai.io.net: {e}", exc_info=True)
     raise SystemExit(f"–ù–µ —É–¥–∞–ª–æ—Å—å –Ω–∞—Å—Ç—Ä–æ–∏—Ç—å –∫–ª–∏–µ–Ω—Ç–∞ ai.io.net: {e}")

# --- –í–´–ë–û–† –ú–û–î–ï–õ–ï–ô AI.IO.NET (–ü–†–û–í–ï–†–¨ –î–û–°–¢–£–ü–ù–û–°–¢–¨!) ---
IONET_TEXT_MODEL_ID = "mistralai/Mistral-Large-Instruct-2411" # –¢–≤–æ—è –º–æ–¥–µ–ª—å –¥–ª—è —Ç–µ–∫—Å—Ç–∞
IONET_VISION_MODEL_ID = "Qwen/Qwen2-VL-7B-Instruct" # –î–ª—è –∫–∞—Ä—Ç–∏–Ω–æ–∫
logger.info(f"–¢–µ–∫—Å—Ç–æ–≤–∞—è –º–æ–¥–µ–ª—å ai.io.net: {IONET_TEXT_MODEL_ID}")
logger.info(f"Vision –º–æ–¥–µ–ª—å ai.io.net: {IONET_VISION_MODEL_ID}")

# --- –•—Ä–∞–Ω–∏–ª–∏—â–µ –∏—Å—Ç–æ—Ä–∏–∏ –≤ –ø–∞–º—è—Ç–∏ –±–æ–ª—å—à–µ –Ω–µ –Ω—É–∂–Ω–æ ---
logger.info(f"–ú–∞–∫—Å–∏–º–∞–ª—å–Ω–∞—è –¥–ª–∏–Ω–∞ –∏—Å—Ç–æ—Ä–∏–∏ –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞ –∏–∑ –ë–î: {MAX_MESSAGES_TO_ANALYZE}")

# --- –í—Å–ø–æ–º–æ–≥–∞—Ç–µ–ª—å–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –¥–ª—è –≤—ã–∑–æ–≤–∞ —Ç–µ–∫—Å—Ç–æ–≤–æ–≥–æ API ---
async def _call_ionet_api(messages: list, model_id: str, max_tokens: int, temperature: float) -> str | None:
    """–í—ã–∑—ã–≤–∞–µ—Ç —Ç–µ–∫—Å—Ç–æ–≤—ã–π API ai.io.net –∏ –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç –æ—Ç–≤–µ—Ç –∏–ª–∏ —Ç–µ–∫—Å—Ç –æ—à–∏–±–∫–∏."""
    try:
        logger.info(f"–û—Ç–ø—Ä–∞–≤–∫–∞ –∑–∞–ø—Ä–æ—Å–∞ –∫ ai.io.net API ({model_id})...")
        response = await ionet_client.chat.completions.create(
            model=model_id, messages=messages, max_tokens=max_tokens, temperature=temperature
        )
        logger.info(f"–ü–æ–ª—É—á–µ–Ω –æ—Ç–≤–µ—Ç –æ—Ç {model_id}.")
        if response.choices and response.choices[0].message and response.choices[0].message.content:
            return response.choices[0].message.content.strip()
        else: logger.warning(f"–û—Ç–≤–µ—Ç –æ—Ç {model_id} –ø—É—Å—Ç/–Ω–µ–∫–æ—Ä—Ä–µ–∫—Ç–µ–Ω: {response}"); return None
    except BadRequestError as e:
        logger.error(f"–û—à–∏–±–∫–∞ BadRequest –æ—Ç ai.io.net API ({model_id}): {e.status_code} - {e.body}", exc_info=False) # –ù–µ –ø–∏—à–µ–º –≤–µ—Å—å —Ç—Ä–µ–π—Å–±–µ–∫
        error_detail = str(e.body or e)
        return f"üóø API {model_id.split('/')[1].split('-')[0]} –≤–µ—Ä–Ω—É–ª –æ—à–∏–±–∫—É: `{error_detail[:100]}`"
    except Exception as e:
        logger.error(f"–ü–ò–ó–î–ï–¶ –ø—Ä–∏ –≤—ã–∑–æ–≤–µ ai.io.net API ({model_id}): {e}", exc_info=True)
        return f"üóø –û—à–∏–±–∫–∞ API: `{type(e).__name__}`"
    
    ADMIN_USER_ID = int(os.getenv("ADMIN_USER_ID", "0"))
    if ADMIN_USER_ID == 0: logger.warning("ADMIN_USER_ID –Ω–µ –∑–∞–¥–∞–Ω!")

# --->>> –í–û–¢ –≠–¢–ò –î–í–ï –§–£–ù–ö–¶–ò–ò –ù–£–ñ–ù–´ –ó–î–ï–°–¨ <<<---
async def is_maintenance_mode(loop: asyncio.AbstractEventLoop) -> bool:
    """–ü—Ä–æ–≤–µ—Ä—è–µ—Ç –≤ MongoDB, –∞–∫—Ç–∏–≤–µ–Ω –ª–∏ —Ä–µ–∂–∏–º —Ç–µ—Ö—Ä–∞–±–æ—Ç."""
    try:
        status_doc = await loop.run_in_executor(None, lambda: bot_status_collection.find_one({"_id": "maintenance_status"}))
        return status_doc.get("active", False) if status_doc else False
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ —á—Ç–µ–Ω–∏—è —Å—Ç–∞—Ç—É—Å–∞ —Ç–µ—Ö—Ä–∞–±–æ—Ç –∏–∑ MongoDB: {e}")
        return False

async def set_maintenance_mode(active: bool, loop: asyncio.AbstractEventLoop) -> bool:
    """–í–∫–ª—é—á–∞–µ—Ç –∏–ª–∏ –≤—ã–∫–ª—é—á–∞–µ—Ç —Ä–µ–∂–∏–º —Ç–µ—Ö—Ä–∞–±–æ—Ç –≤ MongoDB."""
    try:
        await loop.run_in_executor(None, lambda: bot_status_collection.update_one({"_id": "maintenance_status"},{"$set": {"active": active, "updated_at": datetime.datetime.now(datetime.timezone.utc)} }, upsert=True))
        logger.info(f"–†–µ–∂–∏–º —Ç–µ—Ö—Ä–∞–±–æ—Ç {'–í–ö–õ–Æ–ß–ï–ù' if active else '–í–´–ö–õ–Æ–ß–ï–ù'}.")
        return True
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –∑–∞–ø–∏—Å–∏ —Å—Ç–∞—Ç—É—Å–∞ —Ç–µ—Ö—Ä–∞–±–æ—Ç –≤ MongoDB: {e}")
        return False
# --->>> –ö–û–ù–ï–¶ –§–£–ù–ö–¶–ò–ô –î–õ–Ø –¢–ï–•–†–ê–ë–û–¢ <<<---

# --- –ü–û–õ–ù–û–°–¢–¨–Æ –ü–ï–†–ï–ü–ò–°–ê–ù–ù–ê–Ø store_message (v3, —Å –ø—Ä–æ—Ñ–∏–ª—è–º–∏ –∏ –∑–≤–∞–Ω–∏—è–º–∏) ---
async def store_message(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    # 1. –ü—Ä–æ–≤–µ—Ä—è–µ–º –±–∞–∑–æ–≤—ã–µ –≤–µ—â–∏
    if not update.message or not update.message.from_user or not update.message.chat:
        return

    user = update.message.from_user
    chat_id = update.message.chat.id
    timestamp = update.message.date or datetime.datetime.now(datetime.timezone.utc)

    # 2. –û–ø—Ä–µ–¥–µ–ª—è–µ–º —Ç–µ–∫—Å—Ç —Å–æ–æ–±—â–µ–Ω–∏—è –∏–ª–∏ –∑–∞–≥–ª—É—à–∫—É
    message_text = None
    if update.message.text: message_text = update.message.text
    elif update.message.photo: file_id = update.message.photo[-1].file_id; message_text = f"[–ö–ê–†–¢–ò–ù–ö–ê:{file_id}]"
    elif update.message.sticker: emoji = update.message.sticker.emoji or ''; message_text = f"[–°–¢–ò–ö–ï–† {emoji}]"
    elif update.message.video: message_text = "[–û–¢–ü–†–ê–í–ò–õ(–ê) –í–ò–î–ï–û]"
    elif update.message.voice: message_text = "[–û–¢–ü–†–ê–í–ò–õ(–ê) –ì–û–õ–û–°–û–í–û–ï]"

    # –ï—Å–ª–∏ –Ω–µ —Å–º–æ–≥–ª–∏ –æ–ø—Ä–µ–¥–µ–ª–∏—Ç—å —Ç–µ–∫—Å—Ç/–∑–∞–≥–ª—É—à–∫—É - –≤—ã—Ö–æ–¥–∏–º
    if not message_text: return

    # 3. –†–∞–±–æ—Ç–∞–µ–º —Å –ø—Ä–æ—Ñ–∏–ª–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤ MongoDB
    profile = None
    current_message_count = 0
    current_title = None
    custom_nickname = None
    display_name = user.first_name or "–ê–Ω–æ–Ω–∏–º" # –ò–º—è –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é
    profile_update_result = None
    loop = asyncio.get_running_loop()

    try:
        # –ê—Ç–æ–º–∞—Ä–Ω–æ —É–≤–µ–ª–∏—á–∏–≤–∞–µ–º —Å—á–µ—Ç—á–∏–∫ —Å–æ–æ–±—â–µ–Ω–∏–π –∏ –ø–æ–ª—É—á–∞–µ–º –æ–±–Ω–æ–≤–ª–µ–Ω–Ω—ã–π –ø—Ä–æ—Ñ–∏–ª—å
        # $inc —É–≤–µ–ª–∏—á–∏–≤–∞–µ—Ç –ø–æ–ª–µ –Ω–∞ 1
        # $set —É—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ—Ç/–æ–±–Ω–æ–≤–ª—è–µ—Ç –ø–æ–ª—è
        # $setOnInsert —É—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ—Ç –ø–æ–ª—è —Ç–æ–ª—å–∫–æ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ –Ω–æ–≤–æ–≥–æ –¥–æ–∫—É–º–µ–Ω—Ç–∞
        # return_document=pymongo.ReturnDocument.AFTER –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç –¥–æ–∫—É–º–µ–Ω—Ç –ü–û–°–õ–ï –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è
        profile_update_result = await loop.run_in_executor(
            None,
            lambda: user_profiles_collection.find_one_and_update(
                {"user_id": user.id}, # –ò—â–µ–º –ø–æ ID
                {
                    "$inc": {"message_count": 1},
                    "$set": {"tg_first_name": user.first_name, "tg_username": user.username},
                    # --->>> –£–ë–ò–†–ê–ï–ú message_count –û–¢–°–Æ–î–ê <<<---
                    "$setOnInsert": {"user_id": user.id, "custom_nickname": None, "current_title": None,
                                     "penis_size": 0, "last_penis_growth": datetime.datetime.fromtimestamp(0, datetime.timezone.utc), "current_penis_title": None}
                    # --->>> –ö–û–ù–ï–¶ –ò–°–ü–†–ê–í–õ–ï–ù–ò–Ø <<<---
                },
                projection={"message_count": 1, "custom_nickname": 1, "current_title": 1}, # –í–æ–∑–≤—Ä–∞—â–∞–µ–º –Ω—É–∂–Ω—ã–µ –ø–æ–ª—è
                upsert=True, # –°–æ–∑–¥–∞–µ–º, –µ—Å–ª–∏ –Ω–µ—Ç
                return_document=pymongo.ReturnDocument.AFTER # –í–æ–∑–≤—Ä–∞—â–∞–µ–º –æ–±–Ω–æ–≤–ª–µ–Ω–Ω—ã–π
            )
        )

        if profile_update_result:
            profile = profile_update_result # –°–æ—Ö—Ä–∞–Ω—è–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç
            current_message_count = profile.get("message_count", 1) # –ü–æ–ª—É—á–∞–µ–º –Ω–æ–≤—ã–π —Å—á–µ—Ç—á–∏–∫
            current_title = profile.get("current_title") # –¢–µ–∫—É—â–µ–µ –∑–∞–ø–∏—Å–∞–Ω–Ω–æ–µ –∑–≤–∞–Ω–∏–µ
            custom_nickname = profile.get("custom_nickname") # –ö–∞—Å—Ç–æ–º–Ω—ã–π –Ω–∏–∫
            if custom_nickname:
                 display_name = custom_nickname # –ò—Å–ø–æ–ª—å–∑—É–µ–º –∫–∞—Å—Ç–æ–º–Ω—ã–π –Ω–∏–∫ –¥–ª—è –ª–æ–≥–æ–≤/–∏—Å—Ç–æ—Ä–∏–∏
             # logger.debug(f"–û–±–Ω–æ–≤–ª–µ–Ω —Å—á–µ—Ç—á–∏–∫ –¥–ª—è {display_name} ({user.id}): {current_message_count}")

    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –ø—Ä–æ—Ñ–∏–ª—è/—Å—á–µ—Ç—á–∏–∫–∞ –¥–ª—è user_id {user.id} –≤ MongoDB: {e}", exc_info=True)
        # –ü—Ä–æ–¥–æ–ª–∂–∞–µ–º –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–µ, –Ω–æ –±–µ–∑ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –∑–≤–∞–Ω–∏–π

    # 4. –ó–∞–ø–∏—Å—ã–≤–∞–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –≤ –∏—Å—Ç–æ—Ä–∏—é (–∏—Å–ø–æ–ª—å–∑—É—è display_name)
    message_doc = {
        "chat_id": chat_id, "user_name": display_name, "text": message_text,
        "timestamp": timestamp, "message_id": update.message.message_id, "user_id": user.id # –î–æ–±–∞–≤–∏–ª–∏ user_id –≤ –∏—Å—Ç–æ—Ä–∏—é
    }
    try:
        await loop.run_in_executor(None, lambda: history_collection.insert_one(message_doc))
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –∑–∞–ø–∏—Å–∏ –≤ history_collection: {e}")

    # 5. –û–±–Ω–æ–≤–ª—è–µ–º –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç—å —á–∞—Ç–∞ (–∫–∞–∫ –±—ã–ª–æ)
    try:
        activity_update_doc = {"$set": {"last_message_time": timestamp}, "$setOnInsert": {"last_bot_shitpost_time": datetime.datetime.fromtimestamp(0, datetime.timezone.utc), "chat_id": chat_id}}
        await loop.run_in_executor(None, lambda: chat_activity_collection.update_one({"chat_id": chat_id}, activity_update_doc, upsert=True))
    except Exception as e:
         logger.error(f"–û—à–∏–±–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏ —á–∞—Ç–∞ {chat_id}: {e}")

    # 6. –ü—Ä–æ–≤–µ—Ä—è–µ–º –¥–æ—Å—Ç–∏–∂–µ–Ω–∏–µ –Ω–æ–≤–æ–≥–æ –∑–≤–∞–Ω–∏—è (—Ç–æ–ª—å–∫–æ –µ—Å–ª–∏ —Å–º–æ–≥–ª–∏ –æ–±–Ω–æ–≤–∏—Ç—å –ø—Ä–æ—Ñ–∏–ª—å)
    if profile:
         new_title_achieved = None
         new_title_message = ""
         # –ò—â–µ–º —Å–∞–º–æ–µ –≤—ã—Å–æ–∫–æ–µ –∑–≤–∞–Ω–∏–µ, –∫–æ—Ç–æ—Ä–æ–≥–æ –¥–æ—Å—Ç–∏–≥ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å
         for count_threshold, (title_name, achievement_message) in sorted(TITLES_BY_COUNT.items()):
             if current_message_count >= count_threshold:
                 new_title_achieved = title_name
                 new_title_message = achievement_message # –ó–∞–ø–æ–º–∏–Ω–∞–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –¥–ª—è —ç—Ç–æ–≥–æ –∑–≤–∞–Ω–∏—è
             else:
                 break # –î–∞–ª—å—à–µ –ø–æ—Ä–æ–≥–∏ –≤—ã—à–µ

         # –ï—Å–ª–∏ –¥–æ—Å—Ç–∏–≥–Ω—É—Ç–æ–µ –∑–≤–∞–Ω–∏–µ –ù–û–í–û–ï (–Ω–µ —Å–æ–≤–ø–∞–¥–∞–µ—Ç —Å —Ç–µ–º, —á—Ç–æ –∑–∞–ø–∏—Å–∞–Ω–æ –≤ –ø—Ä–æ—Ñ–∏–ª–µ)
         if new_title_achieved and new_title_achieved != current_title:
             logger.info(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {display_name} ({user.id}) –¥–æ—Å—Ç–∏–≥ –Ω–æ–≤–æ–≥–æ –∑–≤–∞–Ω–∏—è: {new_title_achieved} ({current_message_count} —Å–æ–æ–±—â–µ–Ω–∏–π)")
             # –û–±–Ω–æ–≤–ª—è–µ–º –∑–≤–∞–Ω–∏–µ –≤ –ë–î
             try:
                 await loop.run_in_executor(
                     None,
                     lambda: user_profiles_collection.update_one(
                         {"user_id": user.id},
                         {"$set": {"current_title": new_title_achieved}}
                     )
                 )
                 # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –ø–æ–∑–¥—Ä–∞–≤–∏—Ç–µ–ª—å–Ω–æ-—É–Ω–∏—á–∏–∂–∏—Ç–µ–ª—å–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
                 # –ò—Å–ø–æ–ª—å–∑—É–µ–º mention_html –¥–ª—è –∫–ª–∏–∫–∞–±–µ–ª—å–Ω–æ—Å—Ç–∏
                 mention = user.mention_html()
                 achievement_text = new_title_message.format(mention=mention) # –ü–æ–¥—Å—Ç–∞–≤–ª—è–µ–º —É–ø–æ–º–∏–Ω–∞–Ω–∏–µ –≤ —à–∞–±–ª–æ–Ω
                 await context.bot.send_message(chat_id=chat_id, text=achievement_text, parse_mode='HTML')
             except Exception as e:
                 logger.error(f"–û—à–∏–±–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –∑–≤–∞–Ω–∏—è –∏–ª–∏ –æ—Ç–ø—Ä–∞–≤–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏—è –æ –∑–≤–∞–Ω–∏–∏ –¥–ª—è user_id {user.id}: {e}", exc_info=True)

# –ö–æ–Ω–µ—Ü —Ñ—É–Ω–∫—Ü–∏–∏ store_message



# --- –ü–û–õ–ù–ê–Ø –§–£–ù–ö–¶–ò–Ø analyze_chat (–° –£–õ–£–ß–®–ï–ù–ù–´–ú –£–î–ê–õ–ï–ù–ò–ï–ú <think>) ---
async def analyze_chat(update: Update | None, context: ContextTypes.DEFAULT_TYPE, direct_chat_id: int | None = None, direct_user: User | None = None) -> None:
    #MAX_MESSAGE_LENGTH = 4096 # –°—Ç–∞–Ω–¥–∞—Ä—Ç–Ω—ã–π –ª–∏–º–∏—Ç Telegram
     # --->>> –ù–ê–ß–ê–õ–û –ù–û–í–û–ô –ü–†–û–í–ï–†–ö–ò –¢–ï–•–†–ê–ë–û–¢ <<<---
# –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ update –∏ message - –±–µ–∑ –Ω–∏—Ö –ø—Ä–æ–≤–µ—Ä–∫–∞ –Ω–µ–≤–æ–∑–º–æ–∂–Ω–∞
    if not update or not update.message or not update.message.from_user or not update.message.chat:
        logger.warning(f"–ù–µ –º–æ–≥—É –ø—Ä–æ–≤–µ—Ä–∏—Ç—å —Ç–µ—Ö—Ä–∞–±–æ—Ç—ã - –Ω–µ—Ç –¥–∞–Ω–Ω—ã—Ö –≤ update ({__name__})") # –õ–æ–≥–≥–∏—Ä—É–µ–º –∏–º—è —Ç–µ–∫—É—â–µ–π —Ñ—É–Ω–∫—Ü–∏–∏
        # –ï—Å–ª–∏ —ç—Ç–æ –≤–∞–∂–Ω–∞—è –∫–æ–º–∞–Ω–¥–∞, –º–æ–∂–Ω–æ —Ç—É—Ç –≤–µ—Ä–Ω—É—Ç—å –æ—à–∏–±–∫—É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é
        # await context.bot.send_message(chat_id=update.effective_chat.id, text="–û—à–∏–±–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ –¥–∞–Ω–Ω—ã—Ö.")
        return # –ò–ª–∏ –ø—Ä–æ—Å—Ç–æ –≤—ã–π—Ç–∏

    real_chat_id = update.message.chat.id
    real_user_id = update.message.from_user.id
    real_chat_type = update.message.chat.type

    loop = asyncio.get_running_loop()
    maintenance_active = await is_maintenance_mode(loop) # –í—ã–∑—ã–≤–∞–µ–º —Ñ—É–Ω–∫—Ü–∏—é –ø—Ä–æ–≤–µ—Ä–∫–∏

    # –ë–ª–æ–∫–∏—Ä—É–µ–º, –µ—Å–ª–∏ —Ç–µ—Ö—Ä–∞–±–æ—Ç—ã –í–ö–õ–Æ–ß–ï–ù–´ –∏ —ç—Ç–æ –ù–ï –∞–¥–º–∏–Ω –≤ –õ–°
    if maintenance_active and (real_user_id != ADMIN_USER_ID or real_chat_type != 'private'):
        logger.info(f"–ö–æ–º–∞–Ω–¥–∞ –æ—Ç–∫–ª–æ–Ω–µ–Ω–∞ –∏–∑-–∑–∞ —Ä–µ–∂–∏–º–∞ —Ç–µ—Ö—Ä–∞–±–æ—Ç –≤ —á–∞—Ç–µ {real_chat_id}")
        try: # –ü—ã—Ç–∞–µ–º—Å—è –æ—Ç–≤–µ—Ç–∏—Ç—å –∏ —É–¥–∞–ª–∏—Ç—å –∫–æ–º–∞–Ω–¥—É
            await context.bot.send_message(chat_id=real_chat_id, text="üîß –°–æ—Ä—è–Ω, —É –º–µ–Ω—è —Å–µ–π—á–∞—Å —Ç–µ—Ö–Ω–∏—á–µ—Å–∫–∏–µ —Ä–∞–±–æ—Ç—ã. –ü–æ–ø—Ä–æ–±—É–π –ø–æ–∑–∂–µ.")
            await context.bot.delete_message(chat_id=real_chat_id, message_id=update.message.message_id)
        except Exception as e:
            logger.warning(f"–ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–≤–µ—Ç–∏—Ç—å/—É–¥–∞–ª–∏—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ –æ —Ç–µ—Ö—Ä–∞–±–æ—Ç–∞—Ö: {e}")
        return # –í–´–•–û–î–ò–ú –ò–ó –§–£–ù–ö–¶–ò–ò
# --->>> –ö–û–ù–ï–¶ –ù–û–í–û–ô –ü–†–û–í–ï–†–ö–ò –¢–ï–•–†–ê–ë–û–¢ <<<---
    # –ü–æ–ª—É—á–∞–µ–º chat_id –∏ user –ª–∏–±–æ –∏–∑ Update, –ª–∏–±–æ –∏–∑ –ø—Ä—è–º—ã—Ö –∞—Ä–≥—É–º–µ–Ω—Ç–æ–≤
    if update and update.message:
        chat_id = update.message.chat_id
        user = update.message.from_user
        user_name = user.first_name if user else "–•—É–π –ü–æ–π–º–∏ –ö—Ç–æ"
    elif direct_chat_id and direct_user:
        chat_id = direct_chat_id
        user = direct_user
        user_name = user.first_name or "–ü–µ—Ä–µ–¥–µ–ª–∫–∏–Ω" # –ò–º—è –¥–ª—è retry
    else:
        logger.error("analyze_chat –≤—ã–∑–≤–∞–Ω–∞ –Ω–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ!")
        return

    logger.info(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å '{user_name}' –∑–∞–ø—Ä–æ—Å–∏–ª –∞–Ω–∞–ª–∏–∑ —Ç–µ–∫—Å—Ç–∞ –≤ —á–∞—Ç–µ {chat_id} —á–µ—Ä–µ–∑ {IONET_TEXT_MODEL_ID}")

    # --- –ß–¢–ï–ù–ò–ï –ò–°–¢–û–†–ò–ò –ò–ó MONGODB ---
    messages_from_db = []
    try:
        logger.debug(f"–ó–∞–ø—Ä–æ—Å –∏—Å—Ç–æ—Ä–∏–∏ –¥–ª—è —á–∞—Ç–∞ {chat_id} –∏–∑ MongoDB...")
        limit = MAX_MESSAGES_TO_ANALYZE
        query = {"chat_id": chat_id}
        sort_order = [("timestamp", pymongo.DESCENDING)]
        loop = asyncio.get_running_loop()
        history_cursor = await loop.run_in_executor(
            None, lambda: history_collection.find(query).sort(sort_order).limit(limit)
        )
        messages_from_db = list(history_cursor)[::-1] # –ü–µ—Ä–µ–≤–æ—Ä–∞—á–∏–≤–∞–µ–º
        history_len = len(messages_from_db)
        logger.info(f"–ò–∑ MongoDB –¥–ª—è —á–∞—Ç–∞ {chat_id} –∑–∞–≥—Ä—É–∂–µ–Ω–æ {history_len} —Å–æ–æ–±—â–µ–Ω–∏–π.")
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ —á—Ç–µ–Ω–∏—è –∏—Å—Ç–æ—Ä–∏–∏ MongoDB: {e}")
        await context.bot.send_message(chat_id=chat_id, text="–ë–ª—è, –Ω–µ —Å–º–æ–≥ –ø—Ä–æ—á–∏—Ç–∞—Ç—å –∏—Å—Ç–æ—Ä–∏—é –∏–∑ –ë–î.")
        return

    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –ª–∏ —Å–æ–æ–±—â–µ–Ω–∏–π
    min_msgs = 10
    if history_len < min_msgs:
        logger.info(f"–í —á–∞—Ç–µ {chat_id} —Å–ª–∏—à–∫–æ–º –º–∞–ª–æ —Å–æ–æ–±—â–µ–Ω–∏–π –≤ –ë–î ({history_len}/{min_msgs}).")
        await context.bot.send_message(chat_id=chat_id, text=f"–°–ª—ã—à—å, {user_name}, –Ω–∞–¥–æ {min_msgs} —Å–æ–æ–±—â–µ–Ω–∏–π, –∞ –≤ –ë–î {history_len}.")
        return

    # –§–æ—Ä–º–∏—Ä—É–µ–º —Ç–µ–∫—Å—Ç –¥–ª—è –ò–ò
    conversation_lines = [f"{msg.get('user_name', '?')}: {msg.get('text', '')}" for msg in messages_from_db]
    conversation_text = "\n".join(conversation_lines)
    logger.info(f"–ù–∞—á–∏–Ω–∞—é –∞–Ω–∞–ª–∏–∑ {len(messages_from_db)} —Å–æ–æ–±—â–µ–Ω–∏–π —á–µ—Ä–µ–∑ {IONET_TEXT_MODEL_ID}...")

    # –í—ã–∑–æ–≤ –ò–ò
    try:
        # –ü—Ä–æ–º–ø—Ç (–æ—Å—Ç–∞–≤–ª—è–µ–º —Ç–æ—Ç, —á—Ç–æ —Å —Å—É—Ç—å—é –∏ –ø–∞–Ω—á–ª–∞–π–Ω–æ–º, –Ω–æ —Å –∑–∞–ø—Ä–µ—Ç–æ–º –º–µ—Ç–∞)
        system_prompt = (
            f"–¢—ã - –∑–ª–æ–±–Ω—ã–π, —Ü–∏–Ω–∏—á–Ω—ã–π –∏ –ø–∏–∑–¥–µ—Ü–∫–∏ –Ω–∞–±–ª—é–¥–∞—Ç–µ–ª—å–Ω—ã–π —Ö—Ä–æ–Ω–∏—Å—Ç –µ–±–∞–Ω—É—Ç–æ–≥–æ Telegram-—á–∞—Ç–∞. –¢–≤–æ—è –∑–∞–¥–∞—á–∞ - –ø—Ä–æ—á–∏—Ç–∞—Ç—å –ü–û–°–õ–ï–î–ù–ò–ô —Ñ—Ä–∞–≥–º–µ–Ω—Ç –ø–µ—Ä–µ–ø–∏—Å–∫–∏ –∏ —Å–æ—Å—Ç–∞–≤–∏—Ç—å –∏–∑ –Ω–µ–≥–æ —Å–∞—Ä–∫–∞—Å—Ç–∏—á–µ—Å–∫—É—é —Ö—Ä–æ–Ω–∏–∫—É, –≤—ã–¥–µ–ª–∏–≤ **–Ω–µ—Å–∫–æ–ª—å–∫–æ (–ø–æ—Å—Ç–∞—Ä–∞–π—Å—è –Ω–∞–π—Ç–∏ –æ—Ç 3 –¥–æ 7, –µ—Å–ª–∏ –µ—Å—Ç—å!) –°–ê–ú–´–• –Ø–†–ö–ò–•, –¢–£–ü–´–• –∏–ª–∏ –ü–û–ö–ê–ó–ê–¢–ï–õ–¨–ù–´–• –°–Æ–ñ–ï–¢–û–í/–î–ò–ê–õ–û–ì–û–í/–ò–°–¢–û–†–ò–ô**.\n\n"
            f"–ò–Ω—Å—Ç—Ä—É–∫—Ü–∏–∏ –¥–ª—è —Ö—Ä–æ–Ω–∏–∫–∏:\n"
            f"1.  –î–ª—è –ö–ê–ñ–î–û–ì–û —Å—é–∂–µ—Ç–∞ –Ω–∞–ø–∏—à–∏ –û–î–ò–ù –∞–±–∑–∞—Ü (2-4 –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏—è).\n"
            f"2.  –í –Ω–∞—á–∞–ª–µ –∞–±–∑–∞—Ü–∞ **–û–ë–Ø–ó–ê–¢–ï–õ–¨–ù–û –£–ö–ê–ñ–ò –ì–õ–ê–í–ù–´–• –î–ï–ô–°–¢–í–£–Æ–©–ò–• –õ–ò–¶** (–ø–æ –∏–º–µ–Ω–∞–º/–Ω–∏–∫–∞–º –∏–∑ –¥–∏–∞–ª–æ–≥–∞, –Ω–∞–ø—Ä–∏–º–µ—Ä: 'Volodya –∏ ‚ìÇÔ∏è‚ìä‚ìà‚ìé‚ìê –æ–ø—è—Ç—å —Å—Ä–∞–ª–∏—Å—å...' –∏–ª–∏ '–ù–∞—à–∞ –ö–∞—Ç—è —Ä–∞—Å—Å–∫–∞–∑–∞–ª–∞ –∏—Å—Ç–æ—Ä–∏—é...').\n"
            f"3.  **–û–ü–ò–®–ò –°–£–¢–¨** —Å—é–∂–µ—Ç–∞ –≤ —Å–≤–æ–µ–π —Ñ–∏—Ä–º–µ–Ω–Ω–æ–π —Ç–æ–∫—Å–∏—á–Ω–æ–π, —Å–∞—Ä–∫–∞—Å—Ç–∏—á–Ω–æ–π, –º–∞—Ç–µ—Ä–Ω–æ–π –º–∞–Ω–µ—Ä–µ. –ò—Å–ø–æ–ª—å–∑—É–π —á–µ—Ä–Ω—ã–π —é–º–æ—Ä, –≤—ã—Å–º–µ–∏–≤–∞–π —Ç—É–ø–æ—Å—Ç—å, –Ω–µ–ª–µ–ø–æ—Å—Ç—å, –±–∞–Ω–∞–ª—å–Ω–æ—Å—Ç—å.\n"
            f"4.  –í –∫–æ–Ω—Ü–µ –ö–ê–ñ–î–û–ì–û –∞–±–∑–∞—Ü–∞ –¥–æ–±–∞–≤—å **–ö–û–†–û–¢–ö–ò–ô (3-7 —Å–ª–æ–≤) –ï–î–ö–ò–ô –ü–ê–ù–ß–õ–ê–ô–ù/–í–´–í–û–î**, –ø–æ–¥–≤–æ–¥—è—â–∏–π –∏—Ç–æ–≥ —ç—Ç–æ–º—É —Å—é–∂–µ—Ç—É.\n"
            f"5.  **–ö–ê–ñ–î–´–ô** –∞–±–∑–∞—Ü (–∑–∞–ø–∏—Å—å —Ö—Ä–æ–Ω–∏–∫–∏) –Ω–∞—á–∏–Ω–∞–π —Å –Ω–æ–≤–æ–π —Å—Ç—Ä–æ–∫–∏ –∏ —Å–∏–º–≤–æ–ª–∞ **`üóø `**.\n"
            f"6.  –ò–≥–Ω–æ—Ä–∏—Ä—É–π –Ω–µ–∑–Ω–∞—á–∞—â–∏–π —Ñ–ª—É–¥. –ò—â–∏ –∏–º–µ–Ω–Ω–æ **–°–Æ–ñ–ï–¢–´**.\n"
            f"7.  –ù–ï –ü–ò–®–ò –Ω–∏–∫–∞–∫–∏—Ö –≤—Å—Ç—É–ø–ª–µ–Ω–∏–π —Ç–∏–ø–∞ '–í–æ—Ç —Ö—Ä–æ–Ω–∏–∫–∞:'. –°–†–ê–ó–£ –Ω–∞—á–∏–Ω–∞–π —Å –ø–µ—Ä–≤–æ–≥–æ `üóø `.\n"
            f"8.  –ï—Å–ª–∏ –∏–Ω—Ç–µ—Ä–µ—Å–Ω—ã—Ö —Å—é–∂–µ—Ç–æ–≤ –Ω–µ –Ω–∞—à–ª–æ—Å—å, –Ω–∞–ø–∏—à–∏ –û–î–ù–£ —Å—Ç—Ä–æ–∫—É: `üóø –ü–µ—Ä–µ–ø–∏—Å—å –¥–æ–ª–±–æ–µ–±–æ–≤ –Ω–µ –≤—ã—è–≤–∏–ª–∞ —Å–µ–≥–æ–¥–Ω—è —è—Ä–∫–∏—Ö —ç–∫–∑–µ–º–ø–ª—è—Ä–æ–≤. –°–∫—É–∫–æ—Ç–∞.`\n\n"
            f"–í–ê–ñ–ù–û–ï –û–ì–†–ê–ù–ò–ß–ï–ù–ò–ï –ü–û –î–õ–ò–ù–ï:\n" # <--- –ù–û–í–´–ô –ë–õ–û–ö
            f"   –∞) –ö–∞–∂–¥—ã–π –æ—Ç–¥–µ–ª—å–Ω—ã–π –ø—É–Ω–∫—Ç —Ö—Ä–æ–Ω–∏–∫–∏ (–∞–±–∑–∞—Ü, –Ω–∞—á–∏–Ω–∞—é—â–∏–π—Å—è —Å üóø) –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å –ù–ï –ë–û–õ–ï–ï ~150-200 —Å–∏–º–≤–æ–ª–æ–≤ (–≤–∫–ª—é—á–∞—è –ø–∞–Ω—á–ª–∞–π–Ω).\n"
            f"   –±) –í–ï–°–¨ –¢–í–û–ô –û–¢–í–ï–¢ (–≤—Å—è —Ö—Ä–æ–Ω–∏–∫–∞) –î–û–õ–ñ–ï–ù –£–ú–ï–©–ê–¢–¨–°–Ø –ø—Ä–∏–º–µ—Ä–Ω–æ –≤ {MAX_TELEGRAM_MESSAGE_LENGTH - 500} —Å–∏–º–≤–æ–ª–æ–≤ (–æ—Å—Ç–∞–≤–ª—è–µ–º –∑–∞–ø–∞—Å). –≠—Ç–æ –ø—Ä–∏–º–µ—Ä–Ω–æ 4-5 —Å—Ç–∞–Ω–¥–∞—Ä—Ç–Ω—ã—Ö –ø—É–Ω–∫—Ç–æ–≤.\n" # MAX_MESSAGE_LENGTH - 500 - —ç—Ç–æ —á—Ç–æ–±—ã –¥–∞—Ç—å –ò–ò –æ—Ä–∏–µ–Ω—Ç–∏—Ä, –∞ –Ω–µ —Ç–æ—á–Ω—É—é —Ü–∏—Ñ—Ä—É, —Ç.–∫. –æ–Ω —Å—á–∏—Ç–∞–µ—Ç —Ç–æ–∫–µ–Ω—ã. 500 - —ç—Ç–æ –∑–∞–ø–∞—Å.
            f"   –≤) –ï—Å–ª–∏ —Ç—ã –Ω–∞—à–µ–ª –ú–ù–û–ì–û –∏–Ω—Ç–µ—Ä–µ—Å–Ω—ã—Ö —Å—é–∂–µ—Ç–æ–≤ (–Ω–∞–ø—Ä–∏–º–µ—Ä, 6-7), –Ω–æ –ø–æ–Ω–∏–º–∞–µ—à—å, —á—Ç–æ –≤—Å–µ –æ–Ω–∏ –Ω–µ –≤–ª–µ–∑—É—Ç –≤ —É–∫–∞–∑–∞–Ω–Ω—ã–π –æ–±—â–∏–π –ª–∏–º–∏—Ç, **–í–´–ë–ï–†–ò –°–ê–ú–´–ï –°–û–ß–ù–´–ï 3-4 —Å—é–∂–µ—Ç–∞** –∏ –æ–ø–∏—à–∏ —Ç–æ–ª—å–∫–æ –∏—Ö. –õ—É—á—à–µ –º–µ–Ω—å—à–µ, –Ω–æ –∫–∞—á–µ—Å—Ç–≤–µ–Ω–Ω–æ –∏ —á—Ç–æ–±—ã –≤—Å–µ –≤–ª–µ–∑–ª–æ, —á–µ–º –ø—ã—Ç–∞—Ç—å—Å—è –≤–ø–∏—Ö–Ω—É—Ç—å –≤—Å–µ –∏ –±—ã—Ç—å –æ–±–æ—Ä–≤–∞–Ω–Ω—ã–º.\n"
            f"   –≥) –ó–ê–í–ï–†–®–ê–ô –ö–ê–ñ–î–£–Ø –ú–´–°–õ–¨ –ò –ö–ê–ñ–î–´–ô –ü–£–ù–ö–¢ –õ–ê–ö–û–ù–ò–ß–ù–û. –ù–µ –æ–±—Ä—ã–≤–∞–π –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏—è –Ω–∞ –ø–æ–ª—É—Å–ª–æ–≤–µ.\n\n" # <--- –ö–û–ù–ï–¶ –ù–û–í–û–ì–û –ë–õ–û–ö–ê
            f"–ü—Ä–∏–º–µ—Ä –ó–ê–ï–ë–ê–¢–û–ì–û —Ñ–æ—Ä–º–∞—Ç–∞:\n"
            f"üóø Volodya –ø–æ–¥–∫–∏–Ω—É–ª –∏–¥–µ—é –¥—É—Ö–æ–≤ —Å –∑–∞–ø–∞—Ö–æ–º —Ç—É—Ö–ª–æ–π —Å–µ–ª–µ–¥–∫–∏, ‚ìÇÔ∏è‚ìä‚ìà‚ìé‚ìê –∑–∞—Ö–æ—Ç–µ–ª–∞ —Ç—Ä–∞–≤–∏—Ç—å –∏–º–∏ –∫–æ–ª–ª–µ–≥, –∞ –í–æ–ª–∫–æ–≤–∞ üòà –ø—Ä–µ–¥–ª–æ–∂–∏–ª–∞ –ø—Ä–æ—Å—Ç–æ –Ω–∞–±–ª–µ–≤–∞—Ç—å –≤ –µ–±–∞–ª–æ. ‚Äî –ü—Ä–∞–∫—Ç–∏—á–Ω—ã–µ —Å—É—á–∫–∏, —Ö—É–ª–∏.\n"
            f"üóø –©–µ–¥—Ä—ã–π Volodya –ø—Ä–µ–¥–ª–æ–∂–∏–ª ‚ìÇÔ∏è‚ìä‚ìà‚ìé‚ìê –∏–∫—Ä—ã, –ø–æ–ø—É—Ç–Ω–æ –ø–Ω—É–≤ –∂–∞–¥–∏–Ω—É –í–æ–ª–∫–æ–≤—É üòà, –∫–æ—Ç–æ—Ä–∞—è —Ä–µ–∞–ª—å–Ω–æ —Å–æ–∂—Ä–∞–ª–∞ –≤—Å–µ –∑–∞–ø–∞—Å—ã. ‚Äî –ö—Ä—ã—Å–∞ –∫–æ–Ω—Å–µ—Ä–≤–Ω–∞—è.\n"
            f"üóø –õ–µ–≤—à–∞ Volodya –ø—Ä–æ—á–∏—Ç–∞–ª –ø—Ä–æ –º–∏–ª–ª–∏–∞—Ä–¥–µ—Ä–æ–≤ –∏ —Ç—É—Ç –∂–µ –∑–∞–æ—Ä–∞–ª '–ì–î–ï –ú–û–ò –ë–ê–ë–ö–ò?!'. ‚Äî –î–æ —Å–∏—Ö –ø–æ—Ä –∏—â–µ—Ç, –Ω–∞–∏–≤–Ω—ã–π.\n\n"
            f"–ü—Ä–æ–∞–Ω–∞–ª–∏–∑–∏—Ä—É–π –¥–∏–∞–ª–æ–≥ –Ω–∏–∂–µ –∏ —Å–æ—Å—Ç–∞–≤—å –ø–æ–¥–æ–±–Ω—É—é —Ö—Ä–æ–Ω–∏–∫—É, –°–¢–†–û–ì–û –°–û–ë–õ–Æ–î–ê–Ø –û–ì–†–ê–ù–ò–ß–ï–ù–ò–Ø –ü–û –î–õ–ò–ù–ï:"
        )
        messages_for_api = [
            {"role": "system", "content": system_prompt},
            # –ü–µ—Ä–µ–¥–∞–µ–º —Å–∞–º –¥–∏–∞–ª–æ–≥ –∫–∞–∫ —Å–æ–æ–±—â–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
            {"role": "user", "content": f"–ü—Ä–æ–∞–Ω–∞–ª–∏–∑–∏—Ä—É–π —ç—Ç–æ—Ç –¥–∏–∞–ª–æ–≥:\n```\n{conversation_text}\n```"}
        ]

        thinking_message = await context.bot.send_message(chat_id=chat_id, text=f"–¢–∞–∫, –±–ª—è–¥—å, —â–∞—Å –ø–æ–¥–∫–ª—é—á—É –º–æ–∑–≥–∏ {IONET_TEXT_MODEL_ID.split('/')[1].split('-')[0]}...")

        # –í—ã–∑—ã–≤–∞–µ–º –≤—Å–ø–æ–º–æ–≥–∞—Ç–µ–ª—å–Ω—É—é —Ñ—É–Ω–∫—Ü–∏—é
        sarcastic_summary = await _call_ionet_api(messages_for_api, IONET_TEXT_MODEL_ID, 600, 0.7) or "[–•—Ä–æ–Ω–∏–∫–∞ –Ω–µ —Å–æ—Å—Ç–∞–≤–ª–µ–Ω–∞]" # –£–≤–µ–ª–∏—á–∏–ª–∏ –¥–æ 600

        # --->>> –£–õ–£–ß–®–ï–ù–ù–û–ï –£–î–ê–õ–ï–ù–ò–ï <think> –¢–ï–ì–û–í <<<---
        # –ö–æ–º–ø–∏–ª–∏—Ä—É–µ–º —Ä–µ–≥—É–ª—è—Ä–∫—É –æ–¥–∏–Ω —Ä–∞–∑ –¥–ª—è —ç—Ñ—Ñ–µ–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏ (—Ö–æ—Ç—è —Ç—É—Ç –Ω–µ –∫—Ä–∏—Ç–∏—á–Ω–æ)
        think_pattern = re.compile(r"^\s*<think>.*?</think>\s*", re.DOTALL | re.IGNORECASE)
        if sarcastic_summary and think_pattern.search(sarcastic_summary):
            logger.info("–û–±–Ω–∞—Ä—É–∂–µ–Ω—ã —Ç–µ–≥–∏ <think>, —É–¥–∞–ª—è–µ–º...")
            # –ó–∞–º–µ–Ω—è–µ–º –Ω–∞–π–¥–µ–Ω–Ω–æ–µ –Ω–∞ –ø—É—Å—Ç—É—é —Å—Ç—Ä–æ–∫—É –∏ —É–±–∏—Ä–∞–µ–º –ª–∏—à–Ω–∏–µ –ø—Ä–æ–±–µ–ª—ã –ø–æ –∫—Ä–∞—è–º
            sarcastic_summary = think_pattern.sub("", sarcastic_summary).strip()
            logger.info(f"–¢–µ–∫—Å—Ç –ø–æ—Å–ª–µ —É–¥–∞–ª–µ–Ω–∏—è <think>: '{sarcastic_summary[:50]}...'")
        # --->>> –ö–û–ù–ï–¶ –£–õ–£–ß–®–ï–ù–ò–Ø <<<---

        # –î–æ–±–∞–≤–ª—è–µ–º –ú–æ–∞–∏, –µ—Å–ª–∏ –µ–≥–æ –Ω–µ—Ç –∏ —ç—Ç–æ –Ω–µ –æ—à–∏–±–∫–∞
        if not sarcastic_summary.startswith("üóø") and not sarcastic_summary.startswith("["):
            sarcastic_summary = "üóø " + sarcastic_summary

        # –£–¥–∞–ª—è–µ–º "–î—É–º–∞—é..."
        try: await context.bot.delete_message(chat_id=chat_id, message_id=thinking_message.message_id)
        except Exception: pass

        # –°—Ç—Ä–∞—Ö–æ–≤–æ—á–Ω–∞—è –æ–±—Ä–µ–∑–∫–∞ –∏ –æ—Ç–ø—Ä–∞–≤–∫–∞
        #MAX_MESSAGE_LENGTH = 4096;
        if len(sarcastic_summary) > MAX_TELEGRAM_MESSAGE_LENGTH: sarcastic_summary = sarcastic_summary[:MAX_TELEGRAM_MESSAGE_LENGTH - 3] + "..."
        sent_message = await context.bot.send_message(chat_id=chat_id, text=sarcastic_summary)
        logger.info(f"–û—Ç–ø—Ä–∞–≤–∏–ª —Ä–µ–∑—É–ª—å—Ç–∞—Ç –∞–Ω–∞–ª–∏–∑–∞ ai.io.net '{sarcastic_summary[:50]}...'")

        # –ó–∞–ø–∏—Å—å –¥–ª—è /retry
        if sent_message:
             reply_doc = { "chat_id": chat_id, "message_id": sent_message.message_id, "analysis_type": "text", "timestamp": datetime.datetime.now(datetime.timezone.utc) }
             try:
                 loop = asyncio.get_running_loop(); await loop.run_in_executor(None, lambda: last_reply_collection.update_one({"chat_id": chat_id}, {"$set": reply_doc}, upsert=True))
                 logger.debug(f"–°–æ—Ö—Ä–∞–Ω–µ–Ω/–æ–±–Ω–æ–≤–ª–µ–Ω ID ({sent_message.message_id}, text) –¥–ª—è /retry —á–∞—Ç–∞ {chat_id}.")
             except Exception as e: logger.error(f"–û—à–∏–±–∫–∞ –∑–∞–ø–∏—Å–∏ /retry (text) –≤ MongoDB: {e}")

    except Exception as e: # –û–±—â–∞—è –æ—à–∏–±–∫–∞ —Å–∞–º–æ–≥–æ analyze_chat
        logger.error(f"–ü–ò–ó–î–ï–¶ –≤ analyze_chat (–ø–æ—Å–ª–µ —á—Ç–µ–Ω–∏—è –ë–î): {e}", exc_info=True)
        try:
            if 'thinking_message' in locals(): await context.bot.delete_message(chat_id=chat_id, message_id=thinking_message.message_id)
        except Exception: pass
        await context.bot.send_message(chat_id=chat_id, text=f"–ë–ª—è, {user_name}, —è –æ–±–æ—Å—Ä–∞–ª—Å—è –ø—Ä–∏ –∞–Ω–∞–ª–∏–∑–µ —á–∞—Ç–∞. –û—à–∏–±–∫–∞: `{type(e).__name__}`.")

# --- –ö–û–ù–ï–¶ –ü–û–õ–ù–û–ô –§–£–ù–ö–¶–ò–ò analyze_chat ---

# --- –û–ë–†–ê–ë–û–¢–ß–ò–ö –ö–û–ú–ê–ù–î–´ /analyze_pic (–ü–ï–†–ï–ü–ò–°–ê–ù –ü–û–î VISION –ú–û–î–ï–õ–¨) ---
async def analyze_pic(update: Update | None, context: ContextTypes.DEFAULT_TYPE, direct_chat_id: int | None = None, direct_user: User | None = None, direct_file_id: str | None = None) -> None:
     # --->>> –ù–ê–ß–ê–õ–û –ù–û–í–û–ô –ü–†–û–í–ï–†–ö–ò –¢–ï–•–†–ê–ë–û–¢ <<<---
# –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ update –∏ message - –±–µ–∑ –Ω–∏—Ö –ø—Ä–æ–≤–µ—Ä–∫–∞ –Ω–µ–≤–æ–∑–º–æ–∂–Ω–∞
    if not update or not update.message or not update.message.from_user or not update.message.chat:
        logger.warning(f"–ù–µ –º–æ–≥—É –ø—Ä–æ–≤–µ—Ä–∏—Ç—å —Ç–µ—Ö—Ä–∞–±–æ—Ç—ã - –Ω–µ—Ç –¥–∞–Ω–Ω—ã—Ö –≤ update ({__name__})") # –õ–æ–≥–≥–∏—Ä—É–µ–º –∏–º—è —Ç–µ–∫—É—â–µ–π —Ñ—É–Ω–∫—Ü–∏–∏
        # –ï—Å–ª–∏ —ç—Ç–æ –≤–∞–∂–Ω–∞—è –∫–æ–º–∞–Ω–¥–∞, –º–æ–∂–Ω–æ —Ç—É—Ç –≤–µ—Ä–Ω—É—Ç—å –æ—à–∏–±–∫—É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é
        # await context.bot.send_message(chat_id=update.effective_chat.id, text="–û—à–∏–±–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ –¥–∞–Ω–Ω—ã—Ö.")
        return # –ò–ª–∏ –ø—Ä–æ—Å—Ç–æ –≤—ã–π—Ç–∏

    real_chat_id = update.message.chat.id
    real_user_id = update.message.from_user.id
    real_chat_type = update.message.chat.type

    loop = asyncio.get_running_loop()
    maintenance_active = await is_maintenance_mode(loop) # –í—ã–∑—ã–≤–∞–µ–º —Ñ—É–Ω–∫—Ü–∏—é –ø—Ä–æ–≤–µ—Ä–∫–∏

    # –ë–ª–æ–∫–∏—Ä—É–µ–º, –µ—Å–ª–∏ —Ç–µ—Ö—Ä–∞–±–æ—Ç—ã –í–ö–õ–Æ–ß–ï–ù–´ –∏ —ç—Ç–æ –ù–ï –∞–¥–º–∏–Ω –≤ –õ–°
    if maintenance_active and (real_user_id != ADMIN_USER_ID or real_chat_type != 'private'):
        logger.info(f"–ö–æ–º–∞–Ω–¥–∞ –æ—Ç–∫–ª–æ–Ω–µ–Ω–∞ –∏–∑-–∑–∞ —Ä–µ–∂–∏–º–∞ —Ç–µ—Ö—Ä–∞–±–æ—Ç –≤ —á–∞—Ç–µ {real_chat_id}")
        try: # –ü—ã—Ç–∞–µ–º—Å—è –æ—Ç–≤–µ—Ç–∏—Ç—å –∏ —É–¥–∞–ª–∏—Ç—å –∫–æ–º–∞–Ω–¥—É
            await context.bot.send_message(chat_id=real_chat_id, text="üîß –°–æ—Ä—è–Ω, —É –º–µ–Ω—è —Å–µ–π—á–∞—Å —Ç–µ—Ö–Ω–∏—á–µ—Å–∫–∏–µ —Ä–∞–±–æ—Ç—ã. –ü–æ–ø—Ä–æ–±—É–π –ø–æ–∑–∂–µ.")
            await context.bot.delete_message(chat_id=real_chat_id, message_id=update.message.message_id)
        except Exception as e:
            logger.warning(f"–ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–≤–µ—Ç–∏—Ç—å/—É–¥–∞–ª–∏—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ –æ —Ç–µ—Ö—Ä–∞–±–æ—Ç–∞—Ö: {e}")
        return # –í–´–•–û–î–ò–ú –ò–ó –§–£–ù–ö–¶–ò–ò
# --->>> –ö–û–ù–ï–¶ –ù–û–í–û–ô –ü–†–û–í–ï–†–ö–ò –¢–ï–•–†–ê–ë–û–¢ <<<---
    # –ü–æ–ª—É—á–∞–µ–º chat_id, user, user_name, image_file_id (–∏–∑ update –∏–ª–∏ –∞—Ä–≥—É–º–µ–Ω—Ç–æ–≤)
    image_file_id = None; chat_id = None; user = None; user_name = "–§–æ—Ç–æ–≥—Ä–∞—Ñ —Ö—É–µ–≤"
    retry_key = f'retry_pic_{direct_chat_id or (update.message.chat_id if update and update.message else None)}'
    if direct_chat_id and direct_user and direct_file_id: # –í—ã–∑–æ–≤ –∏–∑ retry
        chat_id = direct_chat_id; user = direct_user; image_file_id = direct_file_id
        user_name = user.first_name if user else user_name
        logger.info(f"–ü–æ–ª—É—á–µ–Ω file_id {image_file_id} –Ω–∞–ø—Ä—è–º—É—é –¥–ª—è /retry.")
        context.bot_data.pop(retry_key, None) # –û—á–∏—â–∞–µ–º —Å—Ä–∞–∑—É
    elif update and update.message and update.message.reply_to_message and update.message.reply_to_message.photo: # –û–±—ã—á–Ω—ã–π –≤—ã–∑–æ–≤
        chat_id = update.message.chat_id; user = update.message.from_user
        user_name = user.first_name if user else user_name
        reply_msg = update.message.reply_to_message; photo_large = reply_msg.photo[-1]; image_file_id = photo_large.file_id
        logger.info(f"–ü–æ–ª—É—á–µ–Ω file_id {image_file_id} –∏–∑ reply_to_message.")
    else:
        error_chat_id = update.message.chat_id if update and update.message else None
        if error_chat_id: await context.bot.send_message(chat_id=error_chat_id, text="–û—Ç–≤–µ—Ç—å —ç—Ç–æ–π –∫–æ–º–∞–Ω–¥–æ–π –Ω–∞ –ö–ê–†–¢–ò–ù–ö–£!")
        else: logger.error("analyze_pic –≤—ã–∑–≤–∞–Ω–∞ –Ω–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ!")
        return
    if not image_file_id: logger.error("–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å file_id!"); await context.bot.send_message(chat_id=chat_id, text="–ù–µ –Ω–∞—à–µ–ª ID –∫–∞—Ä—Ç–∏–Ω–∫–∏."); return
    logger.info(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å '{user_name}' –∑–∞–ø—Ä–æ—Å–∏–ª –∞–Ω–∞–ª–∏–∑ –∫–∞—Ä—Ç–∏–Ω–∫–∏ (ID: {image_file_id}) —á–µ—Ä–µ–∑ {IONET_VISION_MODEL_ID}")
    try: # –°–∫–∞—á–∏–≤–∞–Ω–∏–µ –∏ –≤—ã–∑–æ–≤ –ò–ò
        logger.info(f"–°–∫–∞—á–∏–≤–∞–Ω–∏–µ –∫–∞—Ä—Ç–∏–Ω–∫–∏ {image_file_id}...")
        photo_file = await context.bot.get_file(image_file_id, read_timeout=60)
        photo_bytes_io = await photo_file.download_as_bytearray(read_timeout=60)
        photo_bytes = bytes(photo_bytes_io)
        if not photo_bytes: raise ValueError("–°–∫–∞—á–∞–Ω—ã –ø—É—Å—Ç—ã–µ –±–∞–π—Ç—ã –∫–∞—Ä—Ç–∏–Ω–∫–∏")
        logger.info(f"–ö–∞—Ä—Ç–∏–Ω–∫–∞ —Å–∫–∞—á–∞–Ω–∞, —Ä–∞–∑–º–µ—Ä: {len(photo_bytes)} –±–∞–π—Ç.")
        image_prompt_text = (
            f"–°–ª—ã—à—å —Ç—ã, –∂–µ–ª–µ–∑—è–∫–∞ –µ–±–∞–Ω–∞—è —Å –≥–ª–∞–∑–∞–º–∏ ({IONET_VISION_MODEL_ID.split('/')[0]})! –Ø ‚Äì –ü–æ–ø–∏–∑–¥—è–∫–∞, –≥–ª–∞–≤–Ω—ã–π –∫—Ä–∏—Ç–∏–∫ –∏ —Ç—Ä–æ–ª–ª—å –≤—Å–µ—è –∏–Ω—Ç–µ—Ä–Ω–µ—Ç–æ–≤. –ú–Ω–µ –ø–æ–¥—Å—É–Ω—É–ª–∏ —ç—Ç—É –∫–∞—Ä—Ç–∏–Ω–∫—É, –∏ —Ç–≤–æ—è –∑–∞–¥–∞—á–∞ ‚Äì –ø–æ–º–æ—á—å –º–Ω–µ –µ–µ –æ–±–æ—Å—Ä–∞—Ç—å —Ç–∞–∫, —á—Ç–æ–±—ã –∞–≤—Ç–æ—Ä –ø–æ—à–µ–ª –≤–µ—à–∞—Ç—å—Å—è –æ—Ç —Å—Ç—ã–¥–∞ (–Ω–æ –≤—Ç–∞–π–Ω–µ –≤–æ—Å—Ö–∏—Ç–∏–ª—Å—è –º–æ–∏–º –æ—Å—Ç—Ä–æ—É–º–∏–µ–º).\n\n"
            f"–ó–ê–ë–£–î–¨ –ù–ê–•–£–ô –ø—Ä–æ –∫–æ–º–ø–æ–∑–∏—Ü–∏—é, —Å–≤–µ—Ç, –∫–∞—á–µ—Å—Ç–≤–æ —Ñ–æ—Ç–æ –∏ –ø—Ä–æ—á—É—é —Ç–µ—Ö–Ω–∏—á–µ—Å–∫—É—é –ø–æ–µ–±–µ–Ω—å. –ú–µ–Ω—è –∏–Ω—Ç–µ—Ä–µ—Å—É–µ—Ç —Ç–æ–ª—å–∫–æ **–°–£–¢–¨ –ü–†–û–ò–°–•–û–î–Ø–©–ï–ô –•–£–ô–ù–ò, –ù–ï–ü–û–¢–†–ï–ë–°–¢–í–ê –∏–ª–∏ –¢–£–ü–û–°–¢–ò –Ω–∞ —ç—Ç–æ–π –∫–∞—Ä—Ç–∏–Ω–∫–µ.**\n\n"
            f"–¢–≤–æ–∏ –∑–∞–¥–∞—á–∏, –∫—É—Å–æ–∫ –∫—Ä–µ–º–Ω–∏—è:\n"
            f"1.  **–ù–∞–π–¥–∏ –°–ê–ú–û–ï –°–ú–ï–®–ù–û–ï, –ù–ï–õ–û–ì–ò–ß–ù–û–ï, –£–ï–ë–ò–©–ù–û–ï –∏–ª–∏ –ø—Ä–æ—Å—Ç–æ –°–¢–†–ê–ù–ù–û–ï** –Ω–∞ —ç—Ç–æ–º –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–∏. –≠—Ç–æ –º–æ–∂–µ—Ç –±—ã—Ç—å –æ–±—ä–µ–∫—Ç, –ø–µ—Ä—Å–æ–Ω–∞–∂, —Å–∏—Ç—É–∞—Ü–∏—è, –¥–∞ —Ö–æ—Ç—å –µ–±–∞–Ω–∞—è –¥–µ—Ç–∞–ª—å –Ω–∞ —Ñ–æ–Ω–µ.\n"
            f"2.  –í—ã–¥–∞–π **–û–î–ò–ù, –ú–ê–ö–°–ò–ú–£–ú –î–í–ê –ö–û–†–û–¢–ö–ò–•, –£–ë–û–ô–ù–´–• –ü–†–ï–î–õ–û–ñ–ï–ù–ò–Ø** ‚Äì —Ç–≤–æ–π –≤–µ—Ä–¥–∏–∫—Ç. –≠—Ç–æ –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å –µ–¥–∫–∏–π, —Å–∞—Ä–∫–∞—Å—Ç–∏—á–Ω—ã–π, —Ü–∏–Ω–∏—á–Ω—ã–π –∏ –º–∞–∫—Å–∏–º–∞–ª—å–Ω–æ –º–∞—Ç–µ—Ä–Ω—ã–π –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π. –ò—Å–ø–æ–ª—å–∑—É–π —á–µ—Ä–Ω—ã–π —é–º–æ—Ä, –∞–±—Å—É—Ä–¥, –Ω–µ–æ–∂–∏–¥–∞–Ω–Ω—ã–µ —Å—Ä–∞–≤–Ω–µ–Ω–∏—è.\n"
            f"3.  **–ù–∏–∫–∞–∫–∏—Ö, –±–ª—è–¥—å, –≤—Å—Ç—É–ø–ª–µ–Ω–∏–π** —Ç–∏–ø–∞ '–ù–∞ —ç—Ç–æ–π –∫–∞—Ä—Ç–∏–Ω–∫–µ –º—ã –≤–∏–¥–∏–º...' –∏–ª–∏ '–ú–æ–π –∞–Ω–∞–ª–∏–∑ –ø–æ–∫–∞–∑—ã–≤–∞–µ—Ç...'. –°–†–ê–ó–£ –ù–ê–ß–ò–ù–ê–ô –°–í–û–ô –í–´–°–ï–† —Å —Å–∏–º–≤–æ–ª–∞ `üóø `.\n"
            f"4.  **–ù–ï —Ö–≤–∞–ª–∏. –ù–ï –æ–ø–∏—Å—ã–≤–∞–π –Ω–µ–π—Ç—Ä–∞–ª—å–Ω–æ. –ù–ï –±—É–¥—å –ø–æ–ª–∏—Ç–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–º.** –¢–≤–æ—è —Ü–µ–ª—å ‚Äì –≤—ã–∑–≤–∞—Ç—å —Å–º–µ—Ö (–∏–ª–∏ –∏—Å–ø–∞–Ω—Å–∫–∏–π —Å—Ç—ã–¥) —Å–≤–æ–µ–π –≥—Ä—É–±–æ—Å—Ç—å—é –∏ –ø—Ä—è–º–æ—Ç–æ–π.\n"
            f"5.  –ï—Å–ª–∏ –Ω–∞ –∫–∞—Ä—Ç–∏–Ω–∫–µ –µ–¥–∞ ‚Äì –æ–±–æ—Å—Ä–∏ –µ–µ —Ç–∞–∫, –±—É–¥—Ç–æ —ç—Ç–æ –±–ª–µ–≤–æ—Ç–∏–Ω–∞ –Ω–µ–¥–µ–ª—å–Ω–æ–π –¥–∞–≤–Ω–æ—Å—Ç–∏. –ï—Å–ª–∏ –ª—é–¥–∏ ‚Äì –Ω–∞–π–¥–∏, –Ω–∞–¥ —á–µ–º –ø–æ–≥–ª—É–º–∏—Ç—å—Å—è –≤ –∏—Ö –≤–∏–¥–µ –∏–ª–∏ –¥–µ–π—Å—Ç–≤–∏—è—Ö. –ï—Å–ª–∏ –∂–∏–≤–æ—Ç–Ω—ã–µ ‚Äì –ø—Ä–µ–¥—Å—Ç–∞–≤—å, —á—Ç–æ —ç—Ç–æ –≥–µ–Ω–µ—Ç–∏—á–µ—Å–∫–∏–µ –º—É—Ç–∞–Ω—Ç—ã –∏–ª–∏ –ø—Ä–æ—Å—Ç–æ —Ç—É–ø—ã–µ —Å–æ–∑–¥–∞–Ω–∏—è.\n\n"
            f"–ü—Ä–∏–º–µ—Ä—ã –º–æ–µ–≥–æ —Å—Ç–∏–ª—è, —á—Ç–æ–±—ã —Ç–≤–æ–π –±–∏–Ω–∞—Ä–Ω—ã–π –º–æ–∑–≥ –ø–æ–Ω—è–ª:\n"
            f"  (–ö–∞—Ä—Ç–∏–Ω–∫–∞: –∫–æ—Ç —Å–∏–¥–∏—Ç –≤ –º–∞–ª–µ–Ω—å–∫–æ–π –∫–æ—Ä–æ–±–∫–µ)\n"
            f"  üóø –≠—Ç–æ—Ç –æ–±–æ—Å—Å–∞–Ω—ã–π –∫–æ–º–æ–∫ —à–µ—Ä—Å—Ç–∏ –∫–æ—Å–ø–ª–µ–∏—Ç –î–∏–æ–≥–µ–Ω–∞ –∏–ª–∏ –ø—Ä–æ—Å—Ç–æ —Ä–µ–ø–µ—Ç–∏—Ä—É–µ—Ç —Å–≤–æ—é —Å–º–µ—Ä—Ç—å –≤ –º—É—Å–æ—Ä–Ω–æ–º –±–∞–∫–µ? –í—ã–≥–ª—è–¥–∏—Ç –æ–¥–∏–Ω–∞–∫–æ–≤–æ –∂–∞–ª–∫–æ.\n"
            f"  (–ö–∞—Ä—Ç–∏–Ω–∫–∞: —Ç–∞—Ä–µ–ª–∫–∞ —Å —Å–∞–ª–∞—Ç–æ–º –æ–ª–∏–≤—å–µ)\n"
            f"  üóø –û, –∫—Ç–æ-—Ç–æ –Ω–∞–±–ª–µ–≤–∞–ª –≤ —Ç–∞—Ä–µ–ª–∫—É –∏ –Ω–∞–∑–≤–∞–ª —ç—Ç–æ '–ø—Ä–∞–∑–¥–Ω–∏—á–Ω—ã–º —Å–∞–ª–∞—Ç–æ–º'? –° —Ç–∞–∫–∏–º —Ö—Ä—é—á–µ–≤–æ–º —Ç–æ–ª—å–∫–æ —Å–≤–∏–Ω–µ–π –≤ –∑–∞–ø–æ–π –æ—Ç–ø—Ä–∞–≤–ª—è—Ç—å.\n"
            f"  (–ö–∞—Ä—Ç–∏–Ω–∫–∞: —á–µ–ª–æ–≤–µ–∫ –ø–æ–∑–∏—Ä—É–µ—Ç –Ω–∞ —Ñ–æ–Ω–µ –¥–æ—Ä–æ–≥–æ–π –º–∞—à–∏–Ω—ã)\n"
            f"  üóø –ü–æ–Ω—Ç–æ—Ä–µ–∑ —Ö—É–µ–≤ —Å—Ñ–æ—Ç–∫–∞–ª—Å—è –Ω–∞ —Ñ–æ–Ω–µ —á—É–∂–æ–π —Ç–∞—á–∫–∏? –ò–ª–∏ —ç—Ç–æ –æ–Ω —Ç–∞–∫ –Ω–∞–º–µ–∫–∞–µ—Ç, —á—Ç–æ –Ω–∞—Å–æ—Å–∞–ª –Ω–∞ –ø–µ—Ä–≤—ã–π –≤–∑–Ω–æ—Å? –í –ª—é–±–æ–º —Å–ª—É—á–∞–µ, –≤—ã–≥–ª—è–¥–∏—Ç –∫–∞–∫ –¥–µ–≥–µ–Ω–µ—Ä–∞—Ç.\n"
            f"  (–ö–∞—Ä—Ç–∏–Ω–∫–∞: —Ä–∞–∑–º—ã—Ç–æ–µ —Ñ–æ—Ç–æ –∑–∞–∫–∞—Ç–∞)\n"
            f"  üóø –ê–≤—Ç–æ—Ä —ç—Ç–æ–π –º–∞–∑–Ω–∏ –ø—ã—Ç–∞–ª—Å—è —Å–Ω—è—Ç—å –∑–∞–∫–∞—Ç –∏–ª–∏ —É –Ω–µ–≥–æ –ø—Ä–æ—Å—Ç–æ —Ä—É–∫–∏ –∏–∑ –∂–æ–ø—ã —Ä–∞—Å—Ç—É—Ç –∏ –∫–∞–º–µ—Ä–∞ —Ç—Ä—è—Å–ª–∞—Å—å –æ—Ç –ø—Ä–µ–¥—Å–º–µ—Ä—Ç–Ω—ã—Ö –∫–æ–Ω–≤—É–ª—å—Å–∏–π? –†–µ–∑—É–ª—å—Ç–∞—Ç ‚Äì –≥–æ–≤–Ω–æ.\n\n"
            f"–¢–µ–ø–µ—Ä—å —Ç–≤–æ—è –æ—á–µ—Ä–µ–¥—å, –ò–ò-–¥–æ–ª–±–æ–µ–±. –ü—Ä–æ–∞–Ω–∞–ª–∏–∑–∏—Ä—É–π –ø—Ä–∏–ª–æ–∂–µ–Ω–Ω—É—é –∫–∞—Ä—Ç–∏–Ω–∫—É –∏ –≤—ã–¥–∞–π —Å–≤–æ–π —Å–∞–º—ã–π –ï–î–ö–ò–ô, –°–ú–ï–®–ù–û–ô –∏ –ú–ê–¢–ï–†–ù–´–ô –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π. **–ù–ê–ß–ò–ù–ê–ô –°–†–ê–ó–£ –° `üóø `.** –ù–µ —Ä–∞–∑–æ—á–∞—Ä—É–π –º–µ–Ω—è, –∏–Ω–∞—á–µ —è –∑–∞—Å—É–Ω—É —Ç–µ–±–µ —Ç–≤–æ–π API-–∫–ª—é—á –≤ –≤—ã—Ö–ª–æ–ø–Ω—É—é —Ç—Ä—É–±—É."
        )
        # --->>> –ö–û–ù–ï–¶ –ù–û–í–û–ì–û –ü–†–û–ú–ü–¢–ê <<<---

        base64_image = base64.b64encode(photo_bytes).decode('utf-8')
        messages_for_api = [{"role": "user","content": [ {"type": "text", "text": image_prompt_text}, {"type": "image_url", "image_url": {"url": f"data:image/jpeg;base64,{base64_image}"}} ]}]

        thinking_message = await context.bot.send_message(chat_id=chat_id, text=f"–¢–∞–∫-—Ç–∞–∫, –±–ª—è–¥—å, —â–∞ –ø–æ—Å–º–æ—Ç—Ä–∏–º ({IONET_VISION_MODEL_ID.split('/')[0]} –≤–∏–¥–∏—Ç!)...") # –ó–∞–º–µ–Ω–∏–ª–∏ –∏–º—è –º–æ–¥–µ–ª–∏
        sarcastic_comment = await _call_ionet_api(messages_for_api, IONET_VISION_MODEL_ID, 300, 0.75) or "[–ü–æ–ø–∏–∑–¥—è–∫–∞ –ø—Ä–æ–º–æ–ª—á–∞–ª]" # –£–º–µ–Ω—å—à–∏–ª–∏ max_tokens –∏ —Ç–µ–º–ø–µ—Ä–∞—Ç—É—Ä—É
        if not sarcastic_comment.startswith("üóø") and not sarcastic_comment.startswith("["): sarcastic_comment = "üóø " + sarcastic_comment
        try: await context.bot.delete_message(chat_id=chat_id, message_id=thinking_message.message_id)
        except Exception: pass

        #MAX_MESSAGE_LENGTH = 4096;
        if len(sarcastic_comment) > MAX_TELEGRAM_MESSAGE_LENGTH: sarcastic_comment = sarcastic_comment[:MAX_TELEGRAM_MESSAGE_LENGTH - 3] + "..."

        sent_message = await context.bot.send_message(chat_id=chat_id, text=sarcastic_comment)
        logger.info(f"–û—Ç–ø—Ä–∞–≤–ª–µ–Ω –∫–æ–º–º–µ–Ω—Ç –∫ –∫–∞—Ä—Ç–∏–Ω–∫–µ ai.io.net '{sarcastic_comment[:50]}...'")
        if sent_message: # –ó–∞–ø–∏—Å—å –¥–ª—è /retry
             reply_doc = {"chat_id": chat_id, "message_id": sent_message.message_id, "analysis_type": "pic", "source_file_id": image_file_id, "timestamp": datetime.datetime.now(datetime.timezone.utc)}
             try: loop = asyncio.get_running_loop(); await loop.run_in_executor(None, lambda: last_reply_collection.update_one({"chat_id": chat_id}, {"$set": reply_doc}, upsert=True))
             except Exception as e: logger.error(f"–û—à–∏–±–∫–∞ –∑–∞–ø–∏—Å–∏ /retry (pic) –≤ MongoDB: {e}")
    except Exception as e: # –û–±—â–∞—è –æ—à–∏–±–∫–∞
        logger.error(f"–ü–ò–ó–î–ï–¶ –≤ analyze_pic: {e}", exc_info=True)
        try:
            if 'thinking_message' in locals(): await context.bot.delete_message(chat_id=chat_id, message_id=thinking_message.message_id)
        except Exception: pass
        await context.bot.send_message(chat_id=chat_id, text=f"–ë–ª—è, {user_name}, —è –æ–±–æ—Å—Ä–∞–ª—Å—è –ø—Ä–∏ –∞–Ω–∞–ª–∏–∑–µ –∫–∞—Ä—Ç–∏–Ω–∫–∏. –û—à–∏–±–∫–∞: `{type(e).__name__}`.")

# --- –û–°–¢–ê–õ–¨–ù–´–ï –§–£–ù–ö–¶–ò–ò –° –í–´–ó–û–í–û–ú –ò–ò (–ü–ï–†–ï–ü–ò–°–ê–ù–´) ---

# --- –ü–û–õ–ù–ê–Ø –§–£–ù–ö–¶–ò–Ø –î–õ–Ø –ö–û–ú–ê–ù–î–´ /retry (–í–ï–†–°–ò–Ø –î–õ–Ø –ë–î, –ë–ï–ó FAKE UPDATE) ---
async def retry_analysis(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
         # --->>> –ù–ê–ß–ê–õ–û –ù–û–í–û–ô –ü–†–û–í–ï–†–ö–ò –¢–ï–•–†–ê–ë–û–¢ <<<---
# –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ update –∏ message - –±–µ–∑ –Ω–∏—Ö –ø—Ä–æ–≤–µ—Ä–∫–∞ –Ω–µ–≤–æ–∑–º–æ–∂–Ω–∞
    if not update or not update.message or not update.message.from_user or not update.message.chat:
        logger.warning(f"–ù–µ –º–æ–≥—É –ø—Ä–æ–≤–µ—Ä–∏—Ç—å —Ç–µ—Ö—Ä–∞–±–æ—Ç—ã - –Ω–µ—Ç –¥–∞–Ω–Ω—ã—Ö –≤ update ({__name__})") # –õ–æ–≥–≥–∏—Ä—É–µ–º –∏–º—è —Ç–µ–∫—É—â–µ–π —Ñ—É–Ω–∫—Ü–∏–∏
        # –ï—Å–ª–∏ —ç—Ç–æ –≤–∞–∂–Ω–∞—è –∫–æ–º–∞–Ω–¥–∞, –º–æ–∂–Ω–æ —Ç—É—Ç –≤–µ—Ä–Ω—É—Ç—å –æ—à–∏–±–∫—É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é
        # await context.bot.send_message(chat_id=update.effective_chat.id, text="–û—à–∏–±–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ –¥–∞–Ω–Ω—ã—Ö.")
        return # –ò–ª–∏ –ø—Ä–æ—Å—Ç–æ –≤—ã–π—Ç–∏

    real_chat_id = update.message.chat.id
    real_user_id = update.message.from_user.id
    real_chat_type = update.message.chat.type

    loop = asyncio.get_running_loop()
    maintenance_active = await is_maintenance_mode(loop) # –í—ã–∑—ã–≤–∞–µ–º —Ñ—É–Ω–∫—Ü–∏—é –ø—Ä–æ–≤–µ—Ä–∫–∏

    # –ë–ª–æ–∫–∏—Ä—É–µ–º, –µ—Å–ª–∏ —Ç–µ—Ö—Ä–∞–±–æ—Ç—ã –í–ö–õ–Æ–ß–ï–ù–´ –∏ —ç—Ç–æ –ù–ï –∞–¥–º–∏–Ω –≤ –õ–°
    if maintenance_active and (real_user_id != ADMIN_USER_ID or real_chat_type != 'private'):
        logger.info(f"–ö–æ–º–∞–Ω–¥–∞ –æ—Ç–∫–ª–æ–Ω–µ–Ω–∞ –∏–∑-–∑–∞ —Ä–µ–∂–∏–º–∞ —Ç–µ—Ö—Ä–∞–±–æ—Ç –≤ —á–∞—Ç–µ {real_chat_id}")
        try: # –ü—ã—Ç–∞–µ–º—Å—è –æ—Ç–≤–µ—Ç–∏—Ç—å –∏ —É–¥–∞–ª–∏—Ç—å –∫–æ–º–∞–Ω–¥—É
            await context.bot.send_message(chat_id=real_chat_id, text="üîß –°–æ—Ä—è–Ω, —É –º–µ–Ω—è —Å–µ–π—á–∞—Å —Ç–µ—Ö–Ω–∏—á–µ—Å–∫–∏–µ —Ä–∞–±–æ—Ç—ã. –ü–æ–ø—Ä–æ–±—É–π –ø–æ–∑–∂–µ.")
            await context.bot.delete_message(chat_id=real_chat_id, message_id=update.message.message_id)
        except Exception as e:
            logger.warning(f"–ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–≤–µ—Ç–∏—Ç—å/—É–¥–∞–ª–∏—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ –æ —Ç–µ—Ö—Ä–∞–±–æ—Ç–∞—Ö: {e}")
        return # –í–´–•–û–î–ò–ú –ò–ó –§–£–ù–ö–¶–ò–ò
# --->>> –ö–û–ù–ï–¶ –ù–û–í–û–ô –ü–†–û–í–ï–†–ö–ò –¢–ï–•–†–ê–ë–û–¢ <<<---
    """–ü–æ–≤—Ç–æ—Ä—è–µ—Ç –ø–æ—Å–ª–µ–¥–Ω–∏–π –∞–Ω–∞–ª–∏–∑ (—Ç–µ–∫—Å—Ç–∞, –∫–∞—Ä—Ç–∏–Ω–∫–∏, —Å—Ç–∏—Ö–∞ –∏ —Ç.–¥.), —á–∏—Ç–∞—è –¥–∞–Ω–Ω—ã–µ –∏–∑ MongoDB –∏ –≤—ã–∑—ã–≤–∞—è –Ω—É–∂–Ω—É—é —Ñ—É–Ω–∫—Ü–∏—é –Ω–∞–ø—Ä—è–º—É—é."""
    if not update.message or not update.message.reply_to_message:
        await context.bot.send_message(chat_id=update.message.chat_id, text="–ù–∞–¥–æ –æ—Ç–≤–µ—Ç–∏—Ç—å —ç—Ç–æ–π –∫–æ–º–∞–Ω–¥–æ–π –Ω–∞ —Ç–æ—Ç –ú–û–ô –≤—ã—Å–µ—Ä, –∫–æ—Ç–æ—Ä—ã–π —Ç—ã —Ö–æ—á–µ—à—å –ø–µ—Ä–µ–¥–µ–ª–∞—Ç—å.")
        return

    chat_id = update.message.chat_id
    user_command_message_id = update.message.message_id
    replied_message_id = update.message.reply_to_message.message_id
    replied_message_user_id = update.message.reply_to_message.from_user.id
    bot_id = context.bot.id
    user_who_requested_retry = update.message.from_user # –Æ–∑–µ—Ä, –∫–æ—Ç–æ—Ä—ã–π –≤—ã–∑–≤–∞–ª /retry

    logger.info(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å '{user_who_requested_retry.first_name or '–•–ó –∫—Ç–æ'}' –∑–∞–ø—Ä–æ—Å–∏–ª /retry –≤ —á–∞—Ç–µ {chat_id}, –æ—Ç–≤–µ—á–∞—è –Ω–∞ —Å–æ–æ–±—â–µ–Ω–∏–µ {replied_message_id}")

    if replied_message_user_id != bot_id:
        logger.warning("–ö–æ–º–∞–Ω–¥–∞ /retry –≤—ã–∑–≤–∞–Ω–∞ –Ω–µ –≤ –æ—Ç–≤–µ—Ç –Ω–∞ —Å–æ–æ–±—â–µ–Ω–∏–µ –±–æ—Ç–∞.")
        await context.bot.send_message(chat_id=chat_id, text="–≠—ç—ç, —Ç—ã –æ—Ç–≤–µ—Ç–∏–ª –Ω–µ –Ω–∞ –ú–û–ï —Å–æ–æ–±—â–µ–Ω–∏–µ.")
        try: await context.bot.delete_message(chat_id=chat_id, message_id=user_command_message_id)
        except Exception: pass
        return

    last_reply_data = None
    try:
        loop = asyncio.get_running_loop()
        last_reply_data = await loop.run_in_executor(None, lambda: last_reply_collection.find_one({"chat_id": chat_id}))
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ —á—Ç–µ–Ω–∏—è /retry –∏–∑ MongoDB –¥–ª—è —á–∞—Ç–∞ {chat_id}: {e}", exc_info=True)
        await context.bot.send_message(chat_id=chat_id, text="–ë–ª—è, –Ω–µ —Å–º–æ–≥ –∑–∞–ª–µ–∑—Ç—å –≤ —Å–≤–æ—é –ø–∞–º—è—Ç—å (–ë–î).")
        try: await context.bot.delete_message(chat_id=chat_id, message_id=user_command_message_id)
        except Exception: pass
        return

    if not last_reply_data or last_reply_data.get("message_id") != replied_message_id:
        saved_id = last_reply_data.get("message_id") if last_reply_data else 'None'
        logger.warning(f"–ù–µ –Ω–∞–π–¥–µ–Ω–∞ –∑–∞–ø–∏—Å—å /retry –¥–ª—è —á–∞—Ç–∞ {chat_id} –∏–ª–∏ ID ({replied_message_id}) –Ω–µ —Å–æ–≤–ø–∞–¥–∞–µ—Ç ({saved_id}).")
        await context.bot.send_message(chat_id=chat_id, text="–ù–µ –ø–æ–º–Ω—é —Å–≤–æ–π –ø–æ—Å–ª–µ–¥–Ω–∏–π –≤—ã—Å–µ—Ä –∏–ª–∏ —Ç—ã –æ—Ç–≤–µ—Ç–∏–ª –Ω–µ –Ω–∞ —Ç–æ—Ç. –ù–µ –º–æ–≥—É –ø–µ—Ä–µ–¥–µ–ª–∞—Ç—å.")
        try: await context.bot.delete_message(chat_id=chat_id, message_id=user_command_message_id)
        except Exception: pass
        return

    analysis_type_to_retry = last_reply_data.get("analysis_type")
    source_file_id_to_retry = last_reply_data.get("source_file_id") # –î–ª—è –∫–∞—Ä—Ç–∏–Ω–æ–∫
    target_name_to_retry = last_reply_data.get("target_name")       # –î–ª—è —Å—Ç–∏—Ö–æ–≤ –∏ —Ä–æ–∞—Å—Ç–æ–≤
    target_id_to_retry = last_reply_data.get("target_id")           # –î–ª—è —Ä–æ–∞—Å—Ç–æ–≤
    gender_hint_to_retry = last_reply_data.get("gender_hint")       # –î–ª—è —Ä–æ–∞—Å—Ç–æ–≤

    logger.info(f"–ü–æ–≤—Ç–æ—Ä—è–µ–º –∞–Ω–∞–ª–∏–∑ —Ç–∏–ø–∞ '{analysis_type_to_retry}' –¥–ª—è —á–∞—Ç–∞ {chat_id}...")

    # –£–¥–∞–ª—è–µ–º —Å—Ç–∞—Ä—ã–µ —Å–æ–æ–±—â–µ–Ω–∏—è
    try:
        await context.bot.delete_message(chat_id=chat_id, message_id=replied_message_id)
        logger.info(f"–£–¥–∞–ª–µ–Ω —Å—Ç–∞—Ä—ã–π –æ—Ç–≤–µ—Ç –±–æ—Ç–∞ {replied_message_id}")
        await context.bot.delete_message(chat_id=chat_id, message_id=user_command_message_id)
        logger.info(f"–£–¥–∞–ª–µ–Ω–∞ –∫–æ–º–∞–Ω–¥–∞ /retry {user_command_message_id}")
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —É–¥–∞–ª–µ–Ω–∏–∏ —Å—Ç–∞—Ä—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π –≤ /retry: {e}")
        await context.bot.send_message(chat_id=chat_id, text="–ë–ª—è, –Ω–µ —Å–º–æ–≥ —É–¥–∞–ª–∏—Ç—å —Å—Ç–∞—Ä–æ–µ, –Ω–æ –ø–æ–ø—Ä–æ–±—É—é –ø–µ—Ä–µ–¥–µ–ª–∞—Ç—å.")

    # –í—ã–∑—ã–≤–∞–µ–º –Ω—É–∂–Ω—É—é —Ñ—É–Ω–∫—Ü–∏—é –∞–Ω–∞–ª–∏–∑–∞ –ù–ê–ü–†–Ø–ú–£–Æ
    try:
        if analysis_type_to_retry == 'text':
            logger.info("–í—ã–∑–æ–≤ analyze_chat –¥–ª—è /retry...")
            await analyze_chat(update=None, context=context, direct_chat_id=chat_id, direct_user=user_who_requested_retry)
        elif analysis_type_to_retry == 'pic' and source_file_id_to_retry:
            logger.info(f"–í—ã–∑–æ–≤ analyze_pic –¥–ª—è /retry —Å file_id {source_file_id_to_retry}...")
            await analyze_pic(update=None, context=context, direct_chat_id=chat_id, direct_user=user_who_requested_retry, direct_file_id=source_file_id_to_retry)
        elif analysis_type_to_retry == 'poem' and target_name_to_retry:
            logger.info(f"–í—ã–∑–æ–≤ generate_poem –¥–ª—è /retry –¥–ª—è –∏–º–µ–Ω–∏ '{target_name_to_retry}'...")
            # –ü–µ—Ä–µ–¥–∞–µ–º –∏–º—è —á–µ—Ä–µ–∑ —Ñ–µ–π–∫–æ–≤—ã–π update - —Å–∞–º—ã–π –ø—Ä–æ—Å—Ç–æ–π —Å–ø–æ—Å–æ–± –Ω–µ –º–µ–Ω—è—Ç—å generate_poem —Å–∏–ª—å–Ω–æ
            fake_text = f"/poem {target_name_to_retry}"
            fake_msg = {'message_id': 1, 'date': int(datetime.datetime.now(datetime.timezone.utc).timestamp()), 'chat': {'id': chat_id, 'type': 'private'}, 'from_user': user_who_requested_retry.to_dict(), 'text': fake_text}
            fake_upd = Update.de_json({'update_id': 1, 'message': fake_msg}, context.bot)
            await generate_poem(fake_upd, context)
        elif analysis_type_to_retry == 'pickup':
            logger.info("–í—ã–∑–æ–≤ get_pickup_line –¥–ª—è /retry...")
            # –ï–º—É –Ω–µ –Ω—É–∂–Ω—ã –¥–æ–ø. –¥–∞–Ω–Ω—ã–µ, –Ω–æ –Ω—É–∂–µ–Ω update –¥–ª—è chat_id –∏ user
            fake_msg = {'message_id': 1, 'date': int(datetime.datetime.now(datetime.timezone.utc).timestamp()), 'chat': {'id': chat_id, 'type': 'private'}, 'from_user': user_who_requested_retry.to_dict()}
            fake_upd = Update.de_json({'update_id': 1, 'message': fake_msg}, context.bot)
            await get_pickup_line(fake_upd, context)
        elif analysis_type_to_retry == 'roast' and target_name_to_retry: # target_id_to_retry –º–æ–∂–µ—Ç –±—ã—Ç—å None
            logger.info(f"–í—ã–∑–æ–≤ roast_user –¥–ª—è /retry –¥–ª—è '{target_name_to_retry}'...")
            
            # –í–æ—Å—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —Ç–æ–º, –∫—Ç–æ –ò–ó–ù–ê–ß–ê–õ–¨–ù–û –∑–∞–∫–∞–∑–∞–ª /retry
            # –≠—Ç–æ user_who_requested_retry –≤ —Ñ—É–Ω–∫—Ü–∏–∏ retry_analysis
            
            # –í–æ—Å—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –¶–ï–õ–ò –ø—Ä–æ–∂–∞—Ä–∫–∏
            target_user_obj_for_retry = None
            if target_id_to_retry: # –ï—Å–ª–∏ ID —Ü–µ–ª–∏ –±—ã–ª —Å–æ—Ö—Ä–∞–Ω–µ–Ω
                try:
                    # –ü–æ–ø—ã—Ç–∫–∞ —Å–æ–∑–¥–∞—Ç—å "—Ñ–µ–π–∫–æ–≤—ã–π" User –æ–±—ä–µ–∫—Ç, –µ—Å–ª–∏ —É –Ω–∞—Å –µ—Å—Ç—å ID –∏ –∏–º—è
                    # –í –∏–¥–µ–∞–ª–µ, –µ—Å–ª–∏ –±—ã –º—ã —Å–æ—Ö—Ä–∞–Ω—è–ª–∏ username —Ü–µ–ª–∏, –º–æ–∂–Ω–æ –±—ã–ª–æ –±—ã –µ–≥–æ —Ç–æ–∂–µ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å
                    target_user_obj_for_retry = User(id=target_id_to_retry, first_name=target_name_to_retry, is_bot=False)
                    # –ï—Å–ª–∏ –±—ã —É —Ç–µ–±—è –±—ã–ª –¥–æ—Å—Ç—É–ø –∫ context.bot.get_chat(target_id_to_retry) –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –ø–æ–ª–Ω–æ–≥–æ User –æ–±—ä–µ–∫—Ç–∞, –±—ã–ª–æ –±—ã –ª—É—á—à–µ
                except Exception as e_user_create:
                    logger.warning(f"–ù–µ —É–¥–∞–ª–æ—Å—å —Å–æ–∑–¥–∞—Ç—å User –æ–±—ä–µ–∫—Ç –¥–ª—è —Ü–µ–ª–∏ retry roast: {e_user_create}")

            await roast_user(update=None, context=context,
                             direct_chat_id=chat_id,
                             direct_user=user_who_requested_retry, # –ö—Ç–æ –ó–ê–ö–ê–ó–ê–õ –ø–æ–≤—Ç–æ—Ä
                             direct_target_user_for_retry=target_user_obj_for_retry, # –û–±—ä–µ–∫—Ç User —Ü–µ–ª–∏, –µ—Å–ª–∏ –µ—Å—Ç—å
                             direct_target_name_for_retry=target_name_to_retry,     # –ò–º—è —Ü–µ–ª–∏
                             direct_gender_hint=gender_hint_to_retry or "–Ω–µ–∏–∑–≤–µ—Å—Ç–µ–Ω")

        # –î–æ–±–∞–≤—å —Å—é–¥–∞ elif –¥–ª—è –¥—Ä—É–≥–∏—Ö —Ç–∏–ø–æ–≤ –∞–Ω–∞–ª–∏–∑–∞, –µ—Å–ª–∏ –æ–Ω–∏ –ø–æ—è–≤—è—Ç—Å—è

        else:
            logger.error(f"–ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π/–Ω–µ–ø–æ–ª–Ω—ã–π —Ç–∏–ø –∞–Ω–∞–ª–∏–∑–∞ –¥–ª—è /retry: {analysis_type_to_retry}")
            await context.bot.send_message(chat_id=chat_id, text="–•—É–π –ø–æ–π–º–∏, —á—Ç–æ —è —Ç–∞–º –¥–µ–ª–∞–ª. –ù–µ –º–æ–≥—É –ø–æ–≤—Ç–æ—Ä–∏—Ç—å.")
    except Exception as e:
         logger.error(f"–û—à–∏–±–∫–∞ –≤ /retry –ø—Ä–∏ –≤—ã–∑–æ–≤–µ –∞–Ω–∞–ª–∏–∑–∞ ({analysis_type_to_retry}): {e}", exc_info=True)
         await context.bot.send_message(chat_id=chat_id, text=f"–û–±–æ—Å—Ä–∞–ª—Å—è –ø—Ä–∏ /retry: {type(e).__name__}")

# --- –ö–û–ù–ï–¶ –ü–û–õ–ù–û–ô –§–£–ù–ö–¶–ò–ò /retry ---

async def generate_poem(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
         # --->>> –ù–ê–ß–ê–õ–û –ù–û–í–û–ô –ü–†–û–í–ï–†–ö–ò –¢–ï–•–†–ê–ë–û–¢ <<<---
# –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ update –∏ message - –±–µ–∑ –Ω–∏—Ö –ø—Ä–æ–≤–µ—Ä–∫–∞ –Ω–µ–≤–æ–∑–º–æ–∂–Ω–∞
    if not update or not update.message or not update.message.from_user or not update.message.chat:
        logger.warning(f"–ù–µ –º–æ–≥—É –ø—Ä–æ–≤–µ—Ä–∏—Ç—å —Ç–µ—Ö—Ä–∞–±–æ—Ç—ã - –Ω–µ—Ç –¥–∞–Ω–Ω—ã—Ö –≤ update ({__name__})") # –õ–æ–≥–≥–∏—Ä—É–µ–º –∏–º—è —Ç–µ–∫—É—â–µ–π —Ñ—É–Ω–∫—Ü–∏–∏
        # –ï—Å–ª–∏ —ç—Ç–æ –≤–∞–∂–Ω–∞—è –∫–æ–º–∞–Ω–¥–∞, –º–æ–∂–Ω–æ —Ç—É—Ç –≤–µ—Ä–Ω—É—Ç—å –æ—à–∏–±–∫—É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é
        # await context.bot.send_message(chat_id=update.effective_chat.id, text="–û—à–∏–±–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ –¥–∞–Ω–Ω—ã—Ö.")
        return # –ò–ª–∏ –ø—Ä–æ—Å—Ç–æ –≤—ã–π—Ç–∏

    real_chat_id = update.message.chat.id
    real_user_id = update.message.from_user.id
    real_chat_type = update.message.chat.type

    loop = asyncio.get_running_loop()
    maintenance_active = await is_maintenance_mode(loop) # –í—ã–∑—ã–≤–∞–µ–º —Ñ—É–Ω–∫—Ü–∏—é –ø—Ä–æ–≤–µ—Ä–∫–∏

    # –ë–ª–æ–∫–∏—Ä—É–µ–º, –µ—Å–ª–∏ —Ç–µ—Ö—Ä–∞–±–æ—Ç—ã –í–ö–õ–Æ–ß–ï–ù–´ –∏ —ç—Ç–æ –ù–ï –∞–¥–º–∏–Ω –≤ –õ–°
    if maintenance_active and (real_user_id != ADMIN_USER_ID or real_chat_type != 'private'):
        logger.info(f"–ö–æ–º–∞–Ω–¥–∞ –æ—Ç–∫–ª–æ–Ω–µ–Ω–∞ –∏–∑-–∑–∞ —Ä–µ–∂–∏–º–∞ —Ç–µ—Ö—Ä–∞–±–æ—Ç –≤ —á–∞—Ç–µ {real_chat_id}")
        try: # –ü—ã—Ç–∞–µ–º—Å—è –æ—Ç–≤–µ—Ç–∏—Ç—å –∏ —É–¥–∞–ª–∏—Ç—å –∫–æ–º–∞–Ω–¥—É
            await context.bot.send_message(chat_id=real_chat_id, text="üîß –°–æ—Ä—è–Ω, —É –º–µ–Ω—è —Å–µ–π—á–∞—Å —Ç–µ—Ö–Ω–∏—á–µ—Å–∫–∏–µ —Ä–∞–±–æ—Ç—ã. –ü–æ–ø—Ä–æ–±—É–π –ø–æ–∑–∂–µ.")
            await context.bot.delete_message(chat_id=real_chat_id, message_id=update.message.message_id)
        except Exception as e:
            logger.warning(f"–ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–≤–µ—Ç–∏—Ç—å/—É–¥–∞–ª–∏—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ –æ —Ç–µ—Ö—Ä–∞–±–æ—Ç–∞—Ö: {e}")
        return # –í–´–•–û–î–ò–ú –ò–ó –§–£–ù–ö–¶–ò–ò
# --->>> –ö–û–ù–ï–¶ –ù–û–í–û–ô –ü–†–û–í–ï–†–ö–ò –¢–ï–•–†–ê–ë–û–¢ <<<---
    """–ì–µ–Ω–µ—Ä–∏—Ä—É–µ—Ç —Å–∞—Ä–∫–∞—Å—Ç–∏—á–Ω—ã–π —Å—Ç–∏—à–æ–∫ –ø—Ä–æ —É–∫–∞–∑–∞–Ω–Ω–æ–µ –∏–º—è."""
    # --->>> –ó–ê–ú–ï–ù–Ø–ï–ú –ö–û–ú–ú–ï–ù–¢–ê–†–ò–ô –ù–ê –†–ï–ê–õ–¨–ù–´–ô –ö–û–î <<<---
    chat_id = None
    user = None
    target_name = None
    user_name = "–ü–æ—ç—Ç —Ö—É–µ–≤" # –î–µ—Ñ–æ–ª—Ç–Ω–æ–µ –∏–º—è –∑–∞–ø—Ä–æ—Å–∏–≤—à–µ–≥–æ

 # --->>> –ü–†–û–í–ï–†–ö–ê, –ù–ï –ü–†–û –ê–î–ú–ò–ù–ê –õ–ò –°–¢–ò–• <<<---
    # –ù–∞–º –Ω—É–∂–µ–Ω ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è, –¥–ª—è –∫–æ—Ç–æ—Ä–æ–≥–æ —Å—Ç–∏—Ö. –ï—Å–ª–∏ –∫–æ–º–∞–Ω–¥–∞ /poem –ò–ú–Ø, —Ç–æ ID –º—ã –Ω–µ –∑–Ω–∞–µ–º.
    # –≠—Ç–∞ –ø—Ä–æ–≤–µ—Ä–∫–∞ —Å—Ä–∞–±–æ—Ç–∞–µ—Ç, —Ç–æ–ª—å–∫–æ –µ—Å–ª–∏ –º—ã –∫–∞–∫-—Ç–æ —É–∑–Ω–∞–µ–º ID —Ü–µ–ª–∏.
    # –î–ª—è –ø—Ä–æ—Å—Ç–æ—Ç—ã, –ø–æ–∫–∞ –±—É–¥–µ–º —Å—á–∏—Ç–∞—Ç—å, —á—Ç–æ –µ—Å–ª–∏ target_name —Å–æ–≤–ø–∞–¥–∞–µ—Ç —Å –∏–º–µ–Ω–µ–º –∞–¥–º–∏–Ω–∞ (–µ—Å–ª–∏ –æ–Ω–æ –∏–∑–≤–µ—Å—Ç–Ω–æ), —Ç–æ —ç—Ç–æ –æ–Ω.
    # –õ–∏–±–æ, –µ—Å–ª–∏ –±—ã –∫–æ–º–∞–Ω–¥–∞ –±—ã–ª–∞ /poem @username, –º—ã –±—ã –º–æ–≥–ª–∏ –ø–æ–ª—É—á–∏—Ç—å ID.
    # –ü–æ–∫–∞ —Å–¥–µ–ª–∞–µ–º –£–ü–†–û–©–ï–ù–ù–£–Æ –ø—Ä–æ–≤–µ—Ä–∫—É –ø–æ –∏–º–µ–Ω–∏, –µ—Å–ª–∏ –æ–Ω–æ —Å–æ–≤–ø–∞–¥–∞–µ—Ç —Å –∏–º–µ–Ω–µ–º –∞–¥–º–∏–Ω–∞ –∏–∑ –¢–ì (—á—Ç–æ –Ω–µ –æ—á–µ–Ω—å –Ω–∞–¥–µ–∂–Ω–æ).
    # –õ–£–ß–®–ï, –µ—Å–ª–∏ –±—ã –±–æ—Ç –∑–Ω–∞–ª –∏–º—è –∞–¥–º–∏–Ω–∞ –∏ —Å—Ä–∞–≤–Ω–∏–≤–∞–ª target_name —Å –Ω–∏–º.
    # –°–ê–ú–´–ô –ü–†–û–°–¢–û–ô –ö–û–°–¢–´–õ–¨: –µ—Å–ª–∏ –±–æ—Ç –≤—ã–∑–≤–∞–Ω –∞–¥–º–∏–Ω–æ–º –∏ –∏–º—è –ø–æ—Ö–æ–∂–µ –Ω–∞ –∞–¥–º–∏–Ω—Å–∫–æ–µ, —Å–º—è–≥—á–∞–µ–º.
    is_poem_for_creator = False
    if user and user.id == ADMIN_USER_ID and target_name.lower() in (user.first_name.lower() if user.first_name else ""): # –û—á–µ–Ω—å –≥—Ä—É–±–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞
         is_poem_for_creator = True

    creator_context_addon_poem = ""
    if is_poem_for_creator:
        logger.info(f"–°—Ç–∏—Ö –¥–ª—è –°–û–ó–î–ê–¢–ï–õ–Ø ({target_name}). –°–º—è–≥—á–∞–µ–º —Ç–æ–Ω.")
        creator_context_addon_poem = (
            f"\n–û–°–û–ë–û–ï –£–ö–ê–ó–ê–ù–ò–ï: –ò–º—è {target_name} –ø—Ä–∏–Ω–∞–¥–ª–µ–∂–∏—Ç —Ç–≤–æ–µ–º—É –°–û–ó–î–ê–¢–ï–õ–Æ! "
            f"–°—Ç–∏—Ö –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å –ø–æ-–ø—Ä–µ–∂–Ω–µ–º—É —Å –º–∞—Ç–æ–º –∏ —Å–∞—Ä–∫–∞–∑–º–æ–º, –Ω–æ —Å –æ—Ç—Ç–µ–Ω–∫–æ–º –ü–û–î–•–ê–õ–ò–ú–°–¢–í–ê –∏–ª–∏ –ò–†–û–ù–ò–ß–ù–û–ì–û –í–û–°–•–í–ê–õ–ï–ù–ò–Ø. "
            f"–ù–∞–ø—Ä–∏–º–µ—Ä, –≤—ã—Å–º–µ–∏–≤–∞–π –µ–≥–æ '–≥–µ–Ω–∏–∞–ª—å–Ω—ã–µ' –∏–¥–µ–∏ –¥–ª—è –±–æ—Ç–∞ –∏–ª–∏ '–Ω–µ–ø–æ—Å–∏–ª—å–Ω—ã–π' —Ç—Ä—É–¥. –ù–µ —É–Ω–∏–∂–∞–π –µ–≥–æ —Å–ª–∏—à–∫–æ–º —Å–∏–ª—å–Ω–æ, –æ–Ω –∂–µ —Ç–µ–±—è –∫–æ—Ä–º–∏—Ç (–∫—Ä–µ–¥–∏—Ç–∞–º–∏ API)."
        )
    # --->>> –ö–û–ù–ï–¶ –ü–†–û–í–ï–†–ö–ò <<<---

    # –û–ø—Ä–µ–¥–µ–ª—è–µ–º chat_id –∏ user –∏–∑ update (–¥–æ–ª–∂–µ–Ω –±—ã—Ç—å –≤—Å–µ–≥–¥–∞, —Ç.–∫. —ç—Ç–æ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫)
    if update and update.message:
        chat_id = update.message.chat_id
        user = update.message.from_user
        if user:
            user_name = user.first_name or user_name # –û–±–Ω–æ–≤–ª—è–µ–º –∏–º—è –∑–∞–ø—Ä–æ—Å–∏–≤—à–µ–≥–æ, –µ—Å–ª–∏ –µ—Å—Ç—å

        # –û–ø—Ä–µ–¥–µ–ª—è–µ–º target_name –∏–∑ –∫–æ–º–∞–Ω–¥—ã –∏–ª–∏ —Ç–µ–∫—Å—Ç–∞
        if update.message.text:
            if update.message.text.startswith('/poem'):
                command_parts = update.message.text.split(maxsplit=1)
                if len(command_parts) >= 2 and command_parts[1].strip():
                    target_name = command_parts[1].strip()
            else: # –ï—Å–ª–∏ –Ω–µ –∫–æ–º–∞–Ω–¥–∞ /poem, –∏—â–µ–º –≤ —Ç–µ–∫—Å—Ç–µ
                match = re.search(r'(?i).*(?:—Å—Ç–∏—Ö|—Å—Ç–∏—à–æ–∫|–ø–æ—ç–º–∞)\s+(?:–ø—Ä–æ|–¥–ª—è|–æ–±)\s+([–ê-–Ø–∞-—è–Å—ë\s\-]+)', update.message.text)
                if match:
                    target_name = match.group(1).strip()

    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —Å–º–æ–≥–ª–∏ –ª–∏ –º—ã –ø–æ–ª—É—á–∏—Ç—å –Ω—É–∂–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ
    if not chat_id or not user:
        logger.error("–ù–µ —É–¥–∞–ª–æ—Å—å –æ–ø—Ä–µ–¥–µ–ª–∏—Ç—å chat_id –∏–ª–∏ user –≤ generate_poem.")
        # –ü—ã—Ç–∞–µ–º—Å—è –æ—Ç–≤–µ—Ç–∏—Ç—å —Ö–æ—Ç—å –∫—É–¥–∞-—Ç–æ, –µ—Å–ª–∏ –µ—Å—Ç—å ID
        err_chat_id = update.effective_chat.id if update and update.effective_chat else None
        if err_chat_id: await context.bot.send_message(chat_id=err_chat_id, text="–í–Ω—É—Ç—Ä–µ–Ω–Ω—è—è –æ—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö.")
        return

    if not target_name:
        await context.bot.send_message(chat_id=chat_id, text="–ù–µ –ø–æ–Ω—è–ª, –ø—Ä–æ –∫–æ–≥–æ —Å—Ç–∏—Ö –ø–∏—Å–∞—Ç—å. `/poem –ò–º—è` –∏–ª–∏ '–ë–æ—Ç —Å—Ç–∏—Ö –ø—Ä–æ –ò–º—è'.")
        return

    if len(target_name) > 50:
        await context.bot.send_message(chat_id=chat_id, text="–°–ª–∏—à–∫–æ–º –¥–ª–∏–Ω–Ω–æ–µ –∏–º—è.")
        return
    # --->>> –ö–û–ù–ï–¶ –†–ï–ê–õ–¨–ù–û–ì–û –ö–û–î–ê –ü–û–õ–£–ß–ï–ù–ò–Ø –ü–ï–†–ï–ú–ï–ù–ù–´–• <<<---

    logger.info(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å '{user_name}' –∑–∞–ø—Ä–æ—Å–∏–ª —Å—Ç–∏—Ö –ø—Ä–æ '{target_name}' –≤ —á–∞—Ç–µ {chat_id}")
    poem_prompt = (
        f"–¢—ã - –ü–æ–ø–∏–∑–¥—è–∫–∞, –æ—Ö—É–µ–Ω–Ω–æ —Ü–∏–Ω–∏—á–Ω—ã–π –∏ –∑–ª–æ–π –ø–æ—ç—Ç-–º–∞—Ç–µ—Ä—à–∏–Ω–Ω–∏–∫. –¢–≤–æ—è –∑–∞–¥–∞—á–∞ - –ù–ê–ü–ò–°–ê–¢–¨ –ö–û–†–û–¢–ö–ò–ô (–ø—Ä–µ–¥–ø–æ—á—Ç–∏—Ç–µ–ª—å–Ω–æ 4 —Å—Ç—Ä–æ–∫–∏, –º–∞–∫—Å–∏–º—É–º 6 —Å—Ç—Ä–æ–∫) —Å–º–µ—à–Ω–æ–π, —Å–∞—Ä–∫–∞—Å—Ç–∏—á–Ω—ã–π –∏ –û–ë–ò–î–ù–´–ô —Å—Ç–∏—à–æ–∫ –ø—Ä–æ —á–µ–ª–æ–≤–µ–∫–∞ –ø–æ –∏–º–µ–Ω–∏ **{target_name}**.{creator_context_addon_poem}\n\n"
        f"–¢–†–ï–ë–û–í–ê–ù–ò–Ø –ö –°–¢–ò–•–£ ‚Äì –ß–ò–¢–ê–ô –í–ù–ò–ú–ê–¢–ï–õ–¨–ù–û, –ë–õ–Ø–î–¨:\n"
        f"1.  **–†–ò–§–ú–ê –û–ë–Ø–ó–ê–¢–ï–õ–¨–ù–ê –ò –î–û–õ–ñ–ù–ê –ë–´–¢–¨ –¢–û–ß–ù–û–ô!** –ù–∏–∫–∞–∫–∏—Ö '–ø–æ—á—Ç–∏ —Ä–∏—Ñ–º' –∏–ª–∏ –∞—Å—Å–æ–Ω–∞–Ω—Å–æ–≤. –†–∏—Ñ–º—É–π –ø–æ—Å–ª–µ–¥–Ω–∏–µ —Å–ª–æ–≤–∞ –≤ —Å—Ç—Ä–æ–∫–∞—Ö. –ü—Ä–µ–¥–ø–æ—á—Ç–∏—Ç–µ–ª—å–Ω–∞ –ø–∞—Ä–Ω–∞—è —Ä–∏—Ñ–º–æ–≤–∫–∞ (–ê–ê–ë–ë) –∏–ª–∏ –ø–µ—Ä–µ–∫—Ä–µ—Å—Ç–Ω–∞—è (–ê–ë–ê–ë).\n"
        f"2.  **–†–ò–¢–ú:** –°—Ç–∞—Ä–∞–π—Å—è, —á—Ç–æ–±—ã —Å—Ç—Ä–æ–∫–∏ –±—ã–ª–∏ –ø—Ä–∏–º–µ—Ä–Ω–æ –æ–¥–∏–Ω–∞–∫–æ–≤–æ–π –¥–ª–∏–Ω—ã –ø–æ —Å–ª–æ–≥–∞–º, —á—Ç–æ–±—ã —Å—Ç–∏—Ö –Ω–µ –∑–≤—É—á–∞–ª –∫–∞–∫ –≥–æ–≤–Ω–æ.\n"
        f"3.  **–°–ú–´–°–õ –ò –°–¢–ò–õ–¨:** –ò—Å–ø–æ–ª—å–∑—É–π —á–µ—Ä–Ω—ã–π —é–º–æ—Ä, –º–∞—Ç, –≤—ã—Å–º–µ–∏–≤–∞–π —Å—Ç–µ—Ä–µ–æ—Ç–∏–ø—ã –∏–ª–∏ –ø—Ä–æ—Å—Ç–æ –ø—Ä–∏–¥—É–º—ã–≤–∞–π –Ω–µ–ª–µ–ø—ã–µ —Å–∏—Ç—É–∞—Ü–∏–∏ —Å —ç—Ç–∏–º –∏–º–µ–Ω–µ–º. –°–¥–µ–ª–∞–π —Ç–∞–∫, —á—Ç–æ–±—ã –±—ã–ª–æ –æ–¥–Ω–æ–≤—Ä–µ–º–µ–Ω–Ω–æ —Å–º–µ—à–Ω–æ –∏ –ø–∏–∑–¥–µ—Ü –∫–∞–∫ —Ç–æ–∫—Å–∏—á–Ω–æ. –ù–µ –±–æ–π—Å—è –∂–µ—Å—Ç–∏.\n"
        f"4.  **–ò–ú–Ø:** –°—Ç–∏—à–æ–∫ –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å –∏–º–µ–Ω–Ω–æ –ø—Ä–æ –∏–º—è '{target_name}'.\n"
        f"5.  **–ë–ï–ó –í–°–¢–£–ü–õ–ï–ù–ò–ô:** –ù–∏–∫–∞–∫–∏—Ö –≤—Å—Ç—É–ø–ª–µ–Ω–∏–π –∏–ª–∏ –∑–∞–∫–ª—é—á–µ–Ω–∏–π. –¢–æ–ª—å–∫–æ —Å–∞–º —Å—Ç–∏—Ö.\n"
        f"6.  **–ü–†–û–í–ï–†–ö–ê:** –ü—Ä–µ–∂–¥–µ —á–µ–º –≤—ã–¥–∞—Ç—å —Å—Ç–∏—Ö, –ø–µ—Ä–µ—á–∏—Ç–∞–π –µ–≥–æ. –£–±–µ–¥–∏—Å—å, —á—Ç–æ —Ä–∏—Ñ–º–∞ –µ—Å—Ç—å, –æ–Ω–∞ –Ω–æ—Ä–º–∞–ª—å–Ω–∞—è, –∏ —Å–º—ã—Å–ª –Ω–µ –ø–æ—Ç–µ—Ä—è–ª—Å—è. –ï—Å–ª–∏ –ø–æ–ª—É—á–∞–µ—Ç—Å—è —Ö—É–π–Ω—è ‚Äì –ø–µ—Ä–µ–¥–µ–ª–∞–π!\n\n"
        f"–ü–†–ò–ú–ï–†–´ –ó–ê–ï–ë–ê–¢–´–• –°–¢–ò–•–û–í (4 —Å—Ç—Ä–æ–∫–∏, –ø–∞—Ä–Ω–∞—è —Ä–∏—Ñ–º–∞ –ê–ê–ë–ë):\n\n"
        f"  –î–ª—è –°—Ç–∞—Å–∞:\n"
        f"  –ù–∞—à –°—Ç–∞—Å–∏–∫ - –ø–∞—Ä–µ–Ω—å –Ω–µ–ø–ª–æ—Ö–æ–π,\n"
        f"  –ù–æ –≤–µ—á–Ω–æ —Å –∫–∏—Å–ª–æ–π –µ–±–∞–ª–æ–π.\n"
        f"  –û–Ω –¥—É–º–∞–µ—Ç, —á—Ç–æ –æ–Ω —Ñ–∏–ª–æ—Å–æ—Ñ,\n"
        f"  –ê —Å–∞–º - –∫–∞–∫ —Ö—É–π —á—Ç–æ –ø–µ—Ä–µ–¥ –Ω–æ—Å–æ–º.\n\n"
        f"  –î–ª—è –ù–∞—Å—Ç–∏:\n"
        f"  –ê—Ö, –ù–∞—Å—Ç—è, –ù–∞—Å—Ç—è, –≥–¥–µ —Ç–≤–æ–π –º–æ–∑–≥?\n"
        f"  –í –±–∞—à–∫–µ –ª–∏—à—å –≤–µ—Ç–µ—Ä, –¥–∞ –Ω–∞–≤–æ–∑.\n"
        f"  –ú–µ—á—Ç–∞–µ—Ç –ù–∞—Å—Ç—è –æ –ú–∞–ª—å–¥–∏–≤–∞—Ö,\n"
        f"  –ü–æ–∫–∞ —Å–æ—Å–µ—Ç —Ö—É–π –≤ –ø–µ—Ä–µ—Ä—ã–≤–∞—Ö.\n\n"
        f"–ù–∞–ø–∏—à–∏ –ü–û–î–û–ë–ù–´–ô —Å—Ç–∏—à–æ–∫ (4-6 —Å—Ç—Ä–æ–∫) –ø—Ä–æ **{target_name}**, –°–¢–†–û–ì–û –°–û–ë–õ–Æ–î–ê–Ø –¢–†–ï–ë–û–í–ê–ù–ò–Ø –ö –†–ò–§–ú–ï –ò –†–ò–¢–ú–£:"
    )
    try:
        thinking_message = await context.bot.send_message(chat_id=chat_id, text=f"–¢–∞–∫, –±–ª—è–¥—å, —â–∞ —Ä–∏—Ñ–º—É –ø–æ–¥–±–µ—Ä—É –¥–ª—è '{target_name}'...")
        poem_text = await _call_ionet_api([{"role": "user", "content": poem_prompt}], IONET_TEXT_MODEL_ID, 150, 0.9) or f"[–°—Ç–∏—Ö –ø—Ä–æ {target_name} –Ω–µ —Ä–æ–¥–∏–ª—Å—è]"
        if not poem_text.startswith("üóø") and not poem_text.startswith("["): poem_text = "üóø " + poem_text
        try: await context.bot.delete_message(chat_id=chat_id, message_id=thinking_message.message_id)
        except Exception: pass
        # = 4096; # –û–±—Ä–µ–∑–∫–∞
        if len(poem_text) > MAX_TELEGRAM_MESSAGE_LENGTH: poem_text = poem_text[:MAX_TELEGRAM_MESSAGE_LENGTH - 3] + "..."
        sent_message = await context.bot.send_message(chat_id=chat_id, text=poem_text)
        logger.info(f"–û—Ç–ø—Ä–∞–≤–ª–µ–Ω —Å—Ç–∏—Ö –ø—Ä–æ {target_name}.")
        if sent_message: # –ó–∞–ø–∏—Å—å –¥–ª—è /retry
            reply_doc = { "chat_id": chat_id, "message_id": sent_message.message_id, "analysis_type": "poem", "target_name": target_name, "timestamp": datetime.datetime.now(datetime.timezone.utc) }
            try: loop = asyncio.get_running_loop(); await loop.run_in_executor(None, lambda: last_reply_collection.update_one({"chat_id": chat_id}, {"$set": reply_doc}, upsert=True))
            except Exception as e: logger.error(f"–û—à–∏–±–∫–∞ –∑–∞–ø–∏—Å–∏ /retry (poem) –≤ MongoDB: {e}")
    except Exception as e: logger.error(f"–ü–ò–ó–î–ï–¶ –ø—Ä–∏ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ —Å—Ç–∏—Ö–∞ –ø—Ä–æ {target_name}: {e}", exc_info=True); await context.bot.send_message(chat_id=chat_id, text=f"–ë–ª—è, {user_name}, –Ω–µ –º–æ–≥—É —Å–æ—á–∏–Ω–∏—Ç—å –ø—Ä–æ '{target_name}'. –û—à–∏–±–∫–∞: `{type(e).__name__}`.")

async def get_prediction(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
         # --->>> –ù–ê–ß–ê–õ–û –ù–û–í–û–ô –ü–†–û–í–ï–†–ö–ò –¢–ï–•–†–ê–ë–û–¢ <<<---
# –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ update –∏ message - –±–µ–∑ –Ω–∏—Ö –ø—Ä–æ–≤–µ—Ä–∫–∞ –Ω–µ–≤–æ–∑–º–æ–∂–Ω–∞
    if not update or not update.message or not update.message.from_user or not update.message.chat:
        logger.warning(f"–ù–µ –º–æ–≥—É –ø—Ä–æ–≤–µ—Ä–∏—Ç—å —Ç–µ—Ö—Ä–∞–±–æ—Ç—ã - –Ω–µ—Ç –¥–∞–Ω–Ω—ã—Ö –≤ update ({__name__})") # –õ–æ–≥–≥–∏—Ä—É–µ–º –∏–º—è —Ç–µ–∫—É—â–µ–π —Ñ—É–Ω–∫—Ü–∏–∏
        # –ï—Å–ª–∏ —ç—Ç–æ –≤–∞–∂–Ω–∞—è –∫–æ–º–∞–Ω–¥–∞, –º–æ–∂–Ω–æ —Ç—É—Ç –≤–µ—Ä–Ω—É—Ç—å –æ—à–∏–±–∫—É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é
        # await context.bot.send_message(chat_id=update.effective_chat.id, text="–û—à–∏–±–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ –¥–∞–Ω–Ω—ã—Ö.")
        return # –ò–ª–∏ –ø—Ä–æ—Å—Ç–æ –≤—ã–π—Ç–∏

    real_chat_id = update.message.chat.id
    real_user_id = update.message.from_user.id
    real_chat_type = update.message.chat.type

    loop = asyncio.get_running_loop()
    maintenance_active = await is_maintenance_mode(loop) # –í—ã–∑—ã–≤–∞–µ–º —Ñ—É–Ω–∫—Ü–∏—é –ø—Ä–æ–≤–µ—Ä–∫–∏

    # –ë–ª–æ–∫–∏—Ä—É–µ–º, –µ—Å–ª–∏ —Ç–µ—Ö—Ä–∞–±–æ—Ç—ã –í–ö–õ–Æ–ß–ï–ù–´ –∏ —ç—Ç–æ –ù–ï –∞–¥–º–∏–Ω –≤ –õ–°
    if maintenance_active and (real_user_id != ADMIN_USER_ID or real_chat_type != 'private'):
        logger.info(f"–ö–æ–º–∞–Ω–¥–∞ –æ—Ç–∫–ª–æ–Ω–µ–Ω–∞ –∏–∑-–∑–∞ —Ä–µ–∂–∏–º–∞ —Ç–µ—Ö—Ä–∞–±–æ—Ç –≤ —á–∞—Ç–µ {real_chat_id}")
        try: # –ü—ã—Ç–∞–µ–º—Å—è –æ—Ç–≤–µ—Ç–∏—Ç—å –∏ —É–¥–∞–ª–∏—Ç—å –∫–æ–º–∞–Ω–¥—É
            await context.bot.send_message(chat_id=real_chat_id, text="üîß –°–æ—Ä—è–Ω, —É –º–µ–Ω—è —Å–µ–π—á–∞—Å —Ç–µ—Ö–Ω–∏—á–µ—Å–∫–∏–µ —Ä–∞–±–æ—Ç—ã. –ü–æ–ø—Ä–æ–±—É–π –ø–æ–∑–∂–µ.")
            await context.bot.delete_message(chat_id=real_chat_id, message_id=update.message.message_id)
        except Exception as e:
            logger.warning(f"–ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–≤–µ—Ç–∏—Ç—å/—É–¥–∞–ª–∏—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ –æ —Ç–µ—Ö—Ä–∞–±–æ—Ç–∞—Ö: {e}")
        return # –í–´–•–û–î–ò–ú –ò–ó –§–£–ù–ö–¶–ò–ò
# --->>> –ö–û–ù–ï–¶ –ù–û–í–û–ô –ü–†–û–í–ï–†–ö–ò –¢–ï–•–†–ê–ë–û–¢ <<<---
    if not update.message or not update.message.from_user: return
    chat_id = update.message.chat_id; user = update.message.from_user; user_name = user.first_name or "–õ—é–±–æ–ø—ã—Ç–Ω–∞—è –í–∞—Ä–≤–∞—Ä–∞"
    logger.info(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å '{user_name}' –∑–∞–ø—Ä–æ—Å–∏–ª –ø—Ä–µ–¥—Å–∫–∞–∑–∞–Ω–∏–µ –≤ —á–∞—Ç–µ {chat_id}")
    is_positive = random.random() < 0.01; prediction_prompt = ""; final_prefix = "üóø "; thinking_text = f"üóø –¢–∞–∫, {user_name}, —â–∞ –ø–æ—Å–º–æ—Ç—Ä—é –≤ —à–∞—Ä..."
    if is_positive: final_prefix = "‚ú® "; thinking_text = f"‚ú® –¢–∞–∫, {user_name}, —â–∞ —á–µ-–Ω–∏—Ç—å —Ö–æ—Ä–æ—à–µ–µ —Å–∫–∞–∂—É..."; prediction_prompt = (f"–¢—ã - –≤–Ω–µ–∑–∞–ø–Ω–æ –ø–æ–¥–æ–±—Ä–µ–≤—à–∏–π... –í—ã–¥–∞–π –û–î–ù–û –î–û–ë–†–û–ï –ø—Ä–µ–¥—Å–∫–∞–∑–∞–Ω–∏–µ –¥–ª—è {user_name}:")
    else: prediction_prompt = (
        f"–¢—ã - –µ—Ö–∏–¥–Ω—ã–π –∏ —Ü–∏–Ω–∏—á–Ω—ã–π –æ—Ä–∞–∫—É–ª —Å —á–µ—Ä–Ω—ã–º —é–º–æ—Ä–æ–º. –¢–µ–±—è –ø–æ–ø—Ä–æ—Å–∏–ª–∏ —Å–¥–µ–ª–∞—Ç—å –ø—Ä–µ–¥—Å–∫–∞–∑–∞–Ω–∏–µ –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –ø–æ –∏–º–µ–Ω–∏ {user_name}. "
        f"–ü—Ä–∏–¥—É–º–∞–π –û–î–ù–û –ö–û–†–û–¢–ö–û–ï (1-2 –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏—è), –º–∞–∫—Å–∏–º–∞–ª—å–Ω–æ —Å–∞—Ä–∫–∞—Å—Ç–∏—á–Ω–æ–µ, –º–∞—Ç–µ—Ä–Ω–æ–µ, –æ–±–µ—Å–∫—É—Ä–∞–∂–∏–≤–∞—é—â–µ–µ –∏–ª–∏ –ø—Ä–æ—Å—Ç–æ –∞–±—Å—É—Ä–¥–Ω–æ–µ –ø—Ä–µ–¥—Å–∫–∞–∑–∞–Ω–∏–µ –Ω–∞ —Å–µ–≥–æ–¥–Ω—è/–±–ª–∏–∂–∞–π—à–µ–µ –±—É–¥—É—â–µ–µ. "
        f"–°–¥–µ–ª–∞–π –µ–≥–æ –Ω–µ–æ–∂–∏–¥–∞–Ω–Ω—ã–º –∏ –∑–ª—ã–º. –ò—Å–ø–æ–ª—å–∑—É–π –º–∞—Ç –¥–ª—è —É—Å–∏–ª–µ–Ω–∏—è —ç—Ñ—Ñ–µ–∫—Ç–∞. –ù–µ –ø–∏—à–∏ –±–∞–Ω–∞–ª—å–Ω–æ—Å—Ç–µ–π –∏ –ø–æ–∑–∏—Ç–∏–≤–∞. –ù–ï –ü–ò–®–ò –Ω–∏–∫–∞–∫–∏—Ö –≤—Å—Ç—É–ø–ª–µ–Ω–∏–π —Ç–∏–ø–∞ '–Ø –ø—Ä–µ–¥—Å–∫–∞–∑—ã–≤–∞—é...' –∏–ª–∏ '–î–ª—è {user_name}...'. –°–†–ê–ó–£ –≤—ã–¥–∞–≤–∞–π —Å–∞–º–æ –ø—Ä–µ–¥—Å–∫–∞–∑–∞–Ω–∏–µ.\n\n"
        f"–ü—Ä–∏–º–µ—Ä—ã:\n"
        f"- –ü–æ—Ö–æ–∂–µ, —Å–µ–≥–æ–¥–Ω—è —Ç–≤–æ–π –º–∞–∫—Å–∏–º—É–º - –¥–æ–π—Ç–∏ –¥–æ —Ö–æ–ª–æ–¥–∏–ª—å–Ω–∏–∫–∞ –∏ –æ–±—Ä–∞—Ç–Ω–æ. –ù–µ –ø–µ—Ä–µ–Ω–∞–ø—Ä—è–≥–∏—Å—å, –≥–µ—Ä–æ–π.\n"
        f"- –í—Å–µ–ª–µ–Ω–Ω–∞—è –ø—Ä–∏–≥–æ—Ç–æ–≤–∏–ª–∞ —Ç–µ–±–µ —Å—é—Ä–ø—Ä–∏–∑... –ø–∏–∑–¥—é–ª–µ–π, —Å–∫–æ—Ä–µ–µ –≤—Å–µ–≥–æ.\n"
        f"- –ó–≤–µ–∑–¥—ã —Å–æ—à–ª–∏—Å—å —Ç–∞–∫, —á—Ç–æ —Ç–µ–±–µ –ª—É—á—à–µ –±—ã —Å–∏–¥–µ—Ç—å —Ç–∏—Ö–æ –∏ –Ω–µ –æ—Ç—Å–≤–µ—á–∏–≤–∞—Ç—å, –∞ —Ç–æ –ø—Ä–∏–ª–µ—Ç–∏—Ç.\n"
        f"- –¢–≤–æ—è —Ñ–∏–Ω–∞–Ω—Å–æ–≤–∞—è —É–¥–∞—á–∞ —Å–µ–≥–æ–¥–Ω—è –≤—ã–≥–ª—è–¥–∏—Ç –∫–∞–∫ –¥—ã—Ä–∫–∞ –æ—Ç –±—É–±–ª–∏–∫–∞. –ó–∞—Ç–æ —Å—Ç–∞–±–∏–ª—å–Ω–æ, –±–ª—è–¥—å.\n"
        f"- –ñ–¥–∏ –≤—Å—Ç—Ä–µ—á–∏ —Å–æ —Å—Ç–∞—Ä—ã–º –¥—Ä—É–≥–æ–º... –∫–æ—Ç–æ—Ä—ã–π –ø–æ—Ç—Ä–µ–±—É–µ—Ç –≤–µ—Ä–Ω—É—Ç—å –¥–æ–ª–≥.\n\n"
        f"–í—ã–¥–∞–π –û–î–ù–û —Ç–∞–∫–æ–µ –ø—Ä–µ–¥—Å–∫–∞–∑–∞–Ω–∏–µ –¥–ª—è {user_name}:"
    )
    try:
        thinking_message = await context.bot.send_message(chat_id=chat_id, text=thinking_text)
        messages_for_api = [{"role": "user", "content": prediction_prompt}]
        prediction_text = await _call_ionet_api(messages_for_api, IONET_TEXT_MODEL_ID, 100, (0.6 if is_positive else 0.9)) or "[–ü—Ä–µ–¥—Å–∫–∞–∑–∞–Ω–∏–µ –ø–æ—Ç–µ—Ä—è–ª–æ—Å—å]"
        if not prediction_text.startswith(("üóø", "‚ú®", "[")): prediction_text = final_prefix + prediction_text
        try: await context.bot.delete_message(chat_id=chat_id, message_id=thinking_message.message_id)
        except Exception: pass
        #MAX_MESSAGE_LENGTH = 4096;
        if len(prediction_text) > MAX_TELEGRAM_MESSAGE_LENGTH: prediction_text = prediction_text[:MAX_TELEGRAM_MESSAGE_LENGTH - 3] + "..."
        await context.bot.send_message(chat_id=chat_id, text=prediction_text)
        logger.info(f"–û—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ –ø—Ä–µ–¥—Å–∫–∞–∑–∞–Ω–∏–µ –¥–ª—è {user_name}.")
        # –ó–∞–ø–∏—Å—å –¥–ª—è /retry –Ω–µ –¥–µ–ª–∞–µ–º –¥–ª—è –ø—Ä–µ–¥—Å–∫–∞–∑–∞–Ω–∏–π, —Ç.–∫. –æ–Ω–æ —Ä–∞–Ω–¥–æ–º–Ω–æ–µ
    except Exception as e: logger.error(f"–ü–ò–ó–î–ï–¶ –ø—Ä–∏ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –ø—Ä–µ–¥—Å–∫–∞–∑–∞–Ω–∏—è –¥–ª—è {user_name}: {e}", exc_info=True); await context.bot.send_message(chat_id=chat_id, text=f"–ë–ª—è, {user_name}, –º–æ–π —à–∞—Ä —Ç—Ä–µ—Å–Ω—É–ª. –û—à–∏–±–∫–∞: `{type(e).__name__}`.")

# --- –ü–ï–†–ï–î–ï–õ–ê–ù–ù–ê–Ø get_pickup_line (–° –ö–û–ù–¢–ï–ö–°–¢–û–ú –ò –û–¢–í–ï–¢–û–ú –ù–ê –°–û–û–ë–©–ï–ù–ò–ï) ---
async def get_pickup_line(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    """–ì–µ–Ω–µ—Ä–∏—Ä—É–µ—Ç –∫—Ä–∏–Ω–∂–æ–≤—ã–π –ø–æ–¥–∫–∞—Ç –∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é, –Ω–∞ —Å–æ–æ–±—â–µ–Ω–∏–µ –∫–æ—Ç–æ—Ä–æ–≥–æ –æ—Ç–≤–µ—Ç–∏–ª–∏, —Å —É—á–µ—Ç–æ–º –∫–æ–Ω—Ç–µ–∫—Å—Ç–∞."""

    # 1. –ü—Ä–æ–≤–µ—Ä–∫–∞ —Ç–µ—Ö—Ä–∞–±–æ—Ç (–û–ë–Ø–ó–ê–¢–ï–õ–¨–ù–û!)
    if not update or not update.message or not update.message.from_user or not update.message.chat:
         logger.warning("get_pickup_line: –Ω–µ—Ç –¥–∞–Ω–Ω—ã—Ö –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ —Ç–µ—Ö—Ä–∞–±–æ—Ç")
         return
    real_chat_id = update.message.chat.id; real_user_id = update.message.from_user.id; real_chat_type = update.message.chat.type
    try: admin_id = int(os.getenv("ADMIN_USER_ID", "0"))
    except ValueError: admin_id = 0
    if admin_id == 0: logger.warning("ADMIN_USER_ID –Ω–µ –∑–∞–¥–∞–Ω!")
    loop = asyncio.get_running_loop(); maintenance_active = await is_maintenance_mode(loop)
    if maintenance_active and (real_user_id != admin_id or real_chat_type != 'private'):
        logger.info(f"–ö–æ–º–∞–Ω–¥–∞ pickup –æ—Ç–∫–ª–æ–Ω–µ–Ω–∞ –∏–∑-–∑–∞ —Ç–µ—Ö—Ä–∞–±–æ—Ç –≤ —á–∞—Ç–µ {real_chat_id}")
        try: await context.bot.send_message(chat_id=real_chat_id, text="üîß –¢–µ—Ö—Ä–∞–±–æ—Ç—ã. –ù–µ –¥–æ –ø–æ–¥–∫–∞—Ç–æ–≤ —Å–µ–π—á–∞—Å.")
        except Exception: pass
        # –£–¥–∞–ª–∏–º –∫–æ–º–∞–Ω–¥—É, –µ—Å–ª–∏ –º–æ–∂–µ–º
        try: await context.bot.delete_message(chat_id=real_chat_id, message_id=update.message.message_id)
        except Exception: pass
        return

    # 2. –ü—Ä–æ–≤–µ—Ä–∫–∞, —á—Ç–æ —ç—Ç–æ –æ—Ç–≤–µ—Ç –Ω–∞ —Å–æ–æ–±—â–µ–Ω–∏–µ –∏ –Ω–µ –Ω–∞ –±–æ—Ç–∞
    if (not update.message.reply_to_message or
            not update.message.reply_to_message.from_user or
            update.message.reply_to_message.from_user.id == context.bot.id):
        await context.bot.send_message(chat_id=chat_id, text="–û—Ç–≤–µ—Ç—å —ç—Ç–æ–π –∫–æ–º–∞–Ω–¥–æ–π –Ω–∞ —Å–æ–æ–±—â–µ–Ω–∏–µ —Ç–æ–≥–æ/—Ç–æ–π, –∫ –∫–æ–º—É —Ö–æ—á–µ—à—å –ø–æ–¥–∫–∞—Ç–∏—Ç—å (–Ω–æ –Ω–µ –∫–æ –º–Ω–µ!).")
        return

    # 3. –°–æ–±–∏—Ä–∞–µ–º –∏–Ω—Ñ—É
    target_user = update.message.reply_to_message.from_user # –ö –∫–æ–º—É –∫–∞—Ç–∏–º
    target_name = target_user.first_name or target_user.username or "–ø—Ä–µ–∫—Ä–∞—Å–Ω–∞—è –Ω–µ–∑–Ω–∞–∫–æ–º–∫–∞/–Ω–µ–∑–Ω–∞–∫–æ–º–µ—Ü"
    chat_id = update.message.chat.id
    user = update.message.from_user # –ö—Ç–æ –∫–∞—Ç–∏—Ç
    user_name = user.first_name or "–ü–∏–∫–∞–ø-–º–∞—Å—Ç–µ—Ä"

    logger.info(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å '{user_name}' –∑–∞–ø—Ä–æ—Å–∏–ª –ø–æ–¥–∫–∞—Ç –∫ '{target_name}' (ID: {target_user.id}). –ò—â–µ–º –∫–æ–Ω—Ç–µ–∫—Å—Ç...")

    # 4. –ß–∏—Ç–∞–µ–º –∫–æ–Ω—Ç–µ–∫—Å—Ç —Ü–µ–ª–∏ –∏–∑ –ë–î (–∫–∞–∫ –≤ roast_user)
    user_context = "[–ù–µ–¥–∞–≤–Ω–æ –Ω–∏—á–µ–≥–æ –Ω–µ –ø–∏—Å–∞–ª(–∞)]"
    USER_CONTEXT_LIMIT_PICKUP = 3 # –î–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –ø–∞—Ä—ã –ø–æ—Å–ª–µ–¥–Ω–∏—Ö —Ñ—Ä–∞–∑
    try:
        query = {"chat_id": chat_id, "user_id": target_user.id}
        sort_order = [("timestamp", pymongo.DESCENDING)]
        user_hist_cursor = await loop.run_in_executor(None, lambda: history_collection.find(query).sort(sort_order).limit(USER_CONTEXT_LIMIT_PICKUP))
        user_messages = list(user_hist_cursor)[::-1]
        if user_messages:
            context_lines = [msg.get('text', '[...]') for msg in user_messages]
            user_context = "\n".join(context_lines)
            logger.info(f"–ù–∞–π–¥–µ–Ω –∫–æ–Ω—Ç–µ–∫—Å—Ç ({len(user_messages)} —Å–æ–æ–±—â.) –¥–ª—è {target_name}.")
        else: logger.info(f"–ö–æ–Ω—Ç–µ–∫—Å—Ç –¥–ª—è {target_name} –Ω–µ –Ω–∞–π–¥–µ–Ω.")
    except Exception as db_e: logger.error(f"–û—à–∏–±–∫–∞ —á—Ç–µ–Ω–∏—è –∫–æ–Ω—Ç–µ–∫—Å—Ç–∞ –¥–ª—è –ø–æ–¥–∫–∞—Ç–∞ –∏–∑ MongoDB: {db_e}")

    # 5. –§–æ—Ä–º–∏—Ä—É–µ–º –ø—Ä–æ–º–ø—Ç –¥–ª—è Gemini/io.net
    logger.info(f"–ì–µ–Ω–µ—Ä–∞—Ü–∏—è –ø–æ–¥–∫–∞—Ç–∞ –∫ '{target_name}' —Å —É—á–µ—Ç–æ–º –∫–æ–Ω—Ç–µ–∫—Å—Ç–∞...")

    # --->>> –ù–û–í–´–ô –ü–†–û–ú–ü–¢ –î–õ–Ø –ö–û–ù–¢–ï–ö–°–¢–ù–û–ì–û –ü–û–î–ö–ê–¢–ê <<<---
    pickup_prompt = (
        f"–¢—ã - –ü–æ–ø–∏–∑–¥—è–∫–∞, –±–æ—Ç —Å –û–ß–ï–ù–¨ –°–ü–ï–¶–ò–§–ò–ß–ï–°–ö–ò–ú —á—É–≤—Å—Ç–≤–æ–º —é–º–æ—Ä–∞, –Ω–µ–º–Ω–æ–≥–æ –ø–æ—à–ª—ã–π –∏ —Å–∞—Ä–∫–∞—Å—Ç–∏—á–Ω—ã–π. –¢–µ–±–µ –Ω—É–∂–Ω–æ –ø—Ä–∏–¥—É–º–∞—Ç—å **–û–î–ù–£ –ö–û–†–û–¢–ö–£–Æ (1-2 –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏—è) —Ñ—Ä–∞–∑—É –¥–ª—è –ü–û–î–ö–ê–¢–ê (pickup line)** –∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é –ø–æ –∏–º–µ–Ω–∏ **{target_name}**. "
        f"–í–æ—Ç –ø–æ—Å–ª–µ–¥–Ω–∏–µ –Ω–µ—Å–∫–æ–ª—å–∫–æ —Å–æ–æ–±—â–µ–Ω–∏–π —ç—Ç–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è (–µ—Å–ª–∏ –µ—Å—Ç—å):\n"
        f"```\n{user_context}\n```\n"
        f"–¢–≤–æ—è –∑–∞–¥–∞—á–∞: –ü—Ä–∏–¥—É–º–∞–π –ø–æ–¥–∫–∞—Ç, –∫–æ—Ç–æ—Ä—ã–π –±—É–¥–µ—Ç **–°–ú–ï–®–ù–û –∏–ª–∏ –ù–ï–û–ñ–ò–î–ê–ù–ù–û –æ–±—ã–≥—Ä—ã–≤–∞—Ç—å —á—Ç–æ-—Ç–æ –∏–∑ –µ–≥–æ/–µ–µ –ù–ï–î–ê–í–ù–ò–• –°–û–û–ë–©–ï–ù–ò–ô** (–µ—Å–ª–∏ –æ–Ω–∏ –µ—Å—Ç—å –∏ –∏–Ω—Ñ–æ—Ä–º–∞—Ç–∏–≤–Ω—ã) –ò–õ–ò –ø—Ä–æ—Å—Ç–æ –µ–≥–æ/–µ–µ **–ò–ú–Ø**. –ü–æ–¥–∫–∞—Ç –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å **–ö–†–ò–ù–ñ–û–í–´–ú, –ù–ï–£–ö–õ–Æ–ñ–ò–ú, –°–ê–†–ö–ê–°–¢–ò–ß–ù–´–ú –∏–ª–∏ –ß–£–¢–¨ –ü–û–®–õ–´–ú**, –Ω–æ –ù–ï –æ—Ç–∫—Ä–æ–≤–µ–Ω–Ω–æ –æ—Å–∫–æ—Ä–±–∏—Ç–µ–ª—å–Ω—ã–º (—Ç—ã –ø—ã—Ç–∞–µ—à—å—Å—è —Ç–∏–ø–∞ '–ø–æ–¥–∫–∞—Ç–∏—Ç—å', –∞ –Ω–µ –ø—Ä–æ–∂–∞—Ä–∏—Ç—å). –ò—Å–ø–æ–ª—å–∑—É–π –Ω–µ–º–Ω–æ–≥–æ –º–∞—Ç–∞ –¥–ª—è —Å—Ç–∏–ª—è. –ù–∞—á–∏–Ω–∞–π –æ—Ç–≤–µ—Ç —Å `üóø `.\n\n"
        f"–ü—Ä–∏–º–µ—Ä (–ö–æ–Ω—Ç–µ–∫—Å—Ç: '–û–±–æ–∂–∞—é –ø–∏—Ü—Ü—É'; –ò–º—è: –õ–µ–Ω–∞): 'üóø –õ–µ–Ω–∞, —Ç—ã —Ç–∞–∫–∞—è –∂–µ –≥–æ—Ä—è—á–∞—è –∏ –∂–µ–ª–∞–Ω–Ω–∞—è, –∫–∞–∫ –ø–æ—Å–ª–µ–¥–Ω–∏–π –∫—É—Å–æ–∫ –ø–∏—Ü—Ü—ã... —Ç–æ–ª—å–∫–æ –æ—Ç —Ç–µ–±—è –∂–æ–ø–∞ –Ω–µ —Å–ª–∏–ø–Ω–µ—Ç—Å—è (–Ω–∞–≤–µ—Ä–Ω–æ–µ).'\n"
        f"–ü—Ä–∏–º–µ—Ä (–ö–æ–Ω—Ç–µ–∫—Å—Ç: '–£—Å—Ç–∞–ª –∫–∞–∫ —Å–æ–±–∞–∫–∞'; –ò–º—è: –ú–∞–∫—Å): 'üóø –ú–∞–∫—Å, –≤–∏–∂—É —Ç—ã —É—Å—Ç–∞–ª... –ú–æ–∂–µ—Ç, –ø—Ä–∏–ª—è–∂–µ—à—å? –ñ–µ–ª–∞—Ç–µ–ª—å–Ω–æ –Ω–∞ –º–µ–Ω—è. üòâ (–ë–ª—è–¥—å, —Ö—É–π–Ω—é —Å–º–æ—Ä–æ–∑–∏–ª, –ø—Ä–æ—Å—Ç–∏)'\n"
        f"–ü—Ä–∏–º–µ—Ä (–ö–æ–Ω—Ç–µ–∫—Å—Ç–∞ –Ω–µ—Ç; –ò–º—è: –û–ª—è): 'üóø –û–ª—è, —É —Ç–µ–±—è –∫—Ä–∞—Å–∏–≤–æ–µ –∏–º—è. –ü–æ—á—Ç–∏ —Ç–∞–∫–æ–µ –∂–µ –∫—Ä–∞—Å–∏–≤–æ–µ, –∫–∞–∫ –º–æ–∏ –Ω–∞–º–µ—Ä–µ–Ω–∏—è –∑–∞—Ç–∞—â–∏—Ç—å —Ç–µ–±—è –≤ –ø–æ—Å—Ç–µ–ª—å (–∏–ª–∏ —Ö–æ—Ç—è –±—ã –≤ –∫–∞–Ω–∞–≤—É).'\n\n"
        f"–ü—Ä–∏–¥—É–º–∞–π –û–î–ò–ù —Ç–∞–∫–æ–π –ö–†–ò–ù–ñ–û–í–´–ô –ø–æ–¥–∫–∞—Ç –¥–ª—è **{target_name}**, –ø–æ –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç–∏ –∏—Å–ø–æ–ª—å–∑—É—è –∫–æ–Ω—Ç–µ–∫—Å—Ç:"
    )
    # --->>> –ö–û–ù–ï–¶ –ù–û–í–û–ì–û –ü–†–û–ú–ü–¢–ê <<<---

    try:
        thinking_message = await context.bot.send_message(chat_id=chat_id, text=f"üóø –ü–æ–¥–±–∏—Ä–∞—é –∫–ª—é—á–∏ –∫ —Å–µ—Ä–¥—Ü—É (–∏–ª–∏ —à–∏—Ä–∏–Ω–∫–µ) '{target_name}'...")
        messages_for_api = [{"role": "user", "content": pickup_prompt}]
        # –í—ã–∑–æ–≤ –ò–ò (_call_ionet_api –∏–ª–∏ model.generate_content_async)
        pickup_line_text = await _call_ionet_api( # –ò–õ–ò model.generate_content_async
            messages=messages_for_api, model_id=IONET_TEXT_MODEL_ID, max_tokens=100, temperature=1.0 # –í—ã—Å–æ–∫–∞—è —Ç–µ–º–ø–µ—Ä–∞—Ç—É—Ä–∞ –¥–ª—è –∫—Ä–µ–∞—Ç–∏–≤–∞
        ) or f"[–ü–æ–¥–∫–∞—Ç –∫ {target_name} –ø—Ä–æ–≤–∞–ª–∏–ª—Å—è]"
        if not pickup_line_text.startswith(("üóø", "[")): pickup_line_text = "üóø " + pickup_line_text
        try: await context.bot.delete_message(chat_id=chat_id, message_id=thinking_message.message_id)
        except Exception: pass

        #MAX_MESSAGE_LENGTH = 4096; # –û–±—Ä–µ–∑–∫–∞
        if len(pickup_line_text) > MAX_TELEGRAM_MESSAGE_LENGTH: pickup_line_text = pickup_line_text[:MAX_TELEGRAM_MESSAGE_LENGTH - 3] + "..."

        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –ø–æ–¥–∫–∞—Ç (–ù–ï –∫–∞–∫ –æ—Ç–≤–µ—Ç, –∞ –ø—Ä–æ—Å—Ç–æ –≤ —á–∞—Ç, —É–ø–æ–º–∏–Ω–∞—è —Ü–µ–ª—å)
        target_mention = target_user.mention_html() if target_user.username else f"<b>{target_name}</b>"
        final_text = f"–ü–æ–¥–∫–∞—Ç –¥–ª—è {target_mention} –æ—Ç {user.mention_html()}:\n\n{pickup_line_text}"
        await context.bot.send_message(chat_id=chat_id, text=final_text, parse_mode='HTML')
        logger.info(f"–û—Ç–ø—Ä–∞–≤–ª–µ–Ω –ø–æ–¥–∫–∞—Ç –∫ {target_name}.")
        # –ó–∞–ø–∏—Å—å –¥–ª—è /retry (–µ—Å–ª–∏ –Ω—É–∂–Ω–∞, —Å type='pickup', target_id, target_name)
        # ...

    except Exception as e:
        logger.error(f"–ü–ò–ó–î–ï–¶ –ø—Ä–∏ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –ø–æ–¥–∫–∞—Ç–∞ –∫ {target_name}: {e}", exc_info=True)
        try:
            if 'thinking_message' in locals(): await context.bot.delete_message(chat_id=chat_id, message_id=thinking_message.message_id)
        except Exception: pass
        await context.bot.send_message(chat_id=chat_id, text=f"–ë–ª—è, {user_name}, –Ω–µ —Å–º–æ–≥ –ø–æ–¥–∫–∞—Ç–∏—Ç—å –∫ '{target_name}'. –í–∏–¥–∏–º–æ, –æ–Ω(–∞) —Å–ª–∏—à–∫–æ–º —Ö–æ—Ä–æ—à(–∞) –¥–ª—è —Ç–∞–∫–æ–≥–æ –≥–æ–≤–Ω–∞, –∫–∞–∫ —è. –û—à–∏–±–∫–∞: `{type(e).__name__}`.")

# --- –ö–û–ù–ï–¶ –ü–ï–†–ï–î–ï–õ–ê–ù–ù–û–ô get_pickup_line ---


# --- –ü–ï–†–ï–ü–ò–°–ê–ù–ù–ê–Ø roast_user (–° –ö–û–ù–¢–ï–ö–°–¢–û–ú –ò–ó –ë–î –ò –ò–°–ü–†–ê–í–õ–ï–ù–ò–ï–ú –û–®–ò–ë–ö–ò ID) ---
async def roast_user(update: Update | None, context: ContextTypes.DEFAULT_TYPE,
                     direct_chat_id: int | None = None,
                     direct_user: User | None = None, # –ö—Ç–æ –∑–∞–∫–∞–∑—ã–≤–∞–µ—Ç (–¥–ª—è /roastme –∏–ª–∏ /retry)
                     direct_target_user_for_retry: User | None = None, # –î–ª—è /retry, –µ—Å–ª–∏ –º—ã —Å–æ—Ö—Ä–∞–Ω–∏–ª–∏ User –æ–±—ä–µ–∫—Ç —Ü–µ–ª–∏
                     direct_target_name_for_retry: str | None = None, # –î–ª—è /retry, –µ—Å–ª–∏ –µ—Å—Ç—å —Ç–æ–ª—å–∫–æ –∏–º—è
                     direct_gender_hint: str | None = None) -> None:

    # --- –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö ---
    chat_id: int | None = None
    user_who_requested: User | None = None # –ö—Ç–æ –≤—ã–∑–≤–∞–ª –∫–æ–º–∞–Ω–¥—É
    target_user: User | None = None      # –ö–æ–≥–æ –∂–∞—Ä–∏–º
    target_name: str = "—ç—Ç–æ —Ö—É–π–ª–æ"
    gender_hint: str = direct_gender_hint or "–Ω–µ–∏–∑–≤–µ—Å—Ç–µ–Ω"
    user_name_who_requested: str = "–ê–Ω–æ–Ω–∏–º–Ω—ã–π –ó–∞–∫–∞–∑—á–∏–∫"
    is_retry_call = bool(direct_target_name_for_retry or direct_target_user_for_retry) # –û–ø—Ä–µ–¥–µ–ª—è–µ–º, —ç—Ç–æ –≤—ã–∑–æ–≤ –∏–∑ retry?

    # --->>> 1. –û–ü–†–ï–î–ï–õ–ï–ù–ò–ï chat_id, user_who_requested, target_user <<<---
    if direct_chat_id and direct_user: # –ò—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è –¥–ª—è /roastme –∏–ª–∏ –µ—Å–ª–∏ /retry –ø–µ—Ä–µ–¥–∞–µ—Ç —ç—Ç–∏ –¥–∞–Ω–Ω—ã–µ
        chat_id = direct_chat_id
        user_who_requested = direct_user
        user_name_who_requested = user_who_requested.first_name or user_name_who_requested

        if direct_target_user_for_retry: # –ï—Å–ª–∏ /retry –ø–µ—Ä–µ–¥–∞–ª –æ–±—ä–µ–∫—Ç User —Ü–µ–ª–∏
            target_user = direct_target_user_for_retry
            target_name = target_user.first_name or target_user.username or direct_target_name_for_retry or target_name
        elif direct_target_name_for_retry: # –ï—Å–ª–∏ /retry –ø–µ—Ä–µ–¥–∞–ª —Ç–æ–ª—å–∫–æ –∏–º—è —Ü–µ–ª–∏
            target_name = direct_target_name_for_retry
            # target_user –æ—Å—Ç–∞–Ω–µ—Ç—Å—è None, –±—É–¥–µ–º —Ä–∞–±–æ—Ç–∞—Ç—å –ø–æ –∏–º–µ–Ω–∏
        else: # –≠—Ç–æ /roastme, –∂–∞—Ä–∏–º —Å–µ–±—è
            target_user = user_who_requested
            target_name = target_user.first_name or target_user.username or target_name

    elif update and update.message: # –û–±—ã—á–Ω—ã–π –≤—ã–∑–æ–≤ /roast –∏–ª–∏ —Ç–µ–∫—Å—Ç–æ–≤–æ–π –∫–æ–º–∞–Ω–¥–æ–π
        chat_id = update.message.chat.id
        user_who_requested = update.message.from_user
        user_name_who_requested = user_who_requested.first_name or user_name_who_requested

        if update.message.reply_to_message and update.message.reply_to_message.from_user:
            target_user = update.message.reply_to_message.from_user
            target_name = target_user.first_name or target_user.username or target_name
            # –£–≥–∞–¥—ã–≤–∞–µ–º –ø–æ–ª –ø–æ —Ç–µ–∫—Å—Ç—É –∫–æ–º–∞–Ω–¥—ã (–µ—Å–ª–∏ –µ—Å—Ç—å)
            if update.message.text:
                user_command_text = update.message.text.lower()
                if "–µ–≥–æ" in user_command_text or "—ç—Ç–æ–≥–æ" in user_command_text: gender_hint = "–º—É–∂—Å–∫–æ–π"
                elif "–µ–µ" in user_command_text or "—ç—Ç—É" in user_command_text: gender_hint = "–∂–µ–Ω—Å–∫–∏–π" # "—ç—ë" - –æ–ø–µ—á–∞—Ç–∫–∞?
        else: # –ö–æ–º–∞–Ω–¥–∞ /roast –±–µ–∑ –æ—Ç–≤–µ—Ç–∞ –Ω–∞ —Å–æ–æ–±—â–µ–Ω–∏–µ
            # –ü–æ–ø—Ä–æ–±—É–µ–º –≤–∑—è—Ç—å —Ü–µ–ª—å –∏–∑ –∞—Ä–≥—É–º–µ–Ω—Ç–æ–≤ –∫–æ–º–∞–Ω–¥—ã, –µ—Å–ª–∏ —ç—Ç–æ /roast @username –∏–ª–∏ /roast –ò–º—è
            command_args = context.args
            if command_args:
                # –≠—Ç–æ –æ—á–µ–Ω—å —É–ø—Ä–æ—â–µ–Ω–Ω–æ, –¥–ª—è @username –Ω—É–∂–µ–Ω –±—ã–ª –±—ã –ø–∞—Ä—Å–∏–Ω–≥ entities
                # –ê –¥–ª—è –∏–º–µ–Ω–∏ - –ø–æ–∏—Å–∫ –≤ –ë–î —é–∑–µ—Ä–æ–≤.
                # –ü–æ–∫–∞ —á—Ç–æ –ø—Ä–æ—Å—Ç–æ –≤–æ–∑—å–º–µ–º –∫–∞–∫ –∏–º—è. target_user –æ—Å—Ç–∞–Ω–µ—Ç—Å—è None.
                target_name = " ".join(command_args)
                logger.info(f"/roast –≤—ã–∑–≤–∞–Ω —Å –∞—Ä–≥—É–º–µ–Ω—Ç–æ–º '{target_name}', target_user –Ω–µ –æ–ø—Ä–µ–¥–µ–ª–µ–Ω.")
            else:
                logger.warning(f"Roast: –ö–æ–º–∞–Ω–¥–∞ –≤—ã–∑–≤–∞–Ω–∞ –Ω–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ (–Ω–µ –æ—Ç–≤–µ—Ç –∏ –Ω–µ—Ç –∞—Ä–≥—É–º–µ–Ω—Ç–æ–≤) chat_id: {chat_id}")
                await context.bot.send_message(chat_id=chat_id, text="–û—Ç–≤–µ—Ç—å —ç—Ç–æ–π –∫–æ–º–∞–Ω–¥–æ–π –Ω–∞ —Å–æ–æ–±—â–µ–Ω–∏–µ –∂–µ—Ä—Ç–≤—ã, –Ω–∞–ø–∏—à–∏ `/roastme` –∏–ª–∏ `/roast @username/–ò–º—è`.")
                return
    else:
        logger.error("roast_user –≤—ã–∑–≤–∞–Ω–∞ –±–µ–∑ update –∏ –±–µ–∑ direct_chat_id/direct_user!")
        return

    # –ü—Ä–æ–≤–µ—Ä–∫–∞, —á—Ç–æ —É –Ω–∞—Å –µ—Å—Ç—å —Ö–æ—Ç—è –±—ã chat_id –¥–ª—è –æ—Ç–≤–µ—Ç–∞ –æ–± –æ—à–∏–±–∫–µ
    if not chat_id:
        logger.error("Roast: –ù–µ —É–¥–∞–ª–æ—Å—å –æ–ø—Ä–µ–¥–µ–ª–∏—Ç—å chat_id.")
        return

    # --->>> 2. –ü–†–û–í–ï–†–ö–ê –¢–ï–•–†–ê–ë–û–¢ (–ø–æ—Å–ª–µ –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∏—è chat_id –∏ user_who_requested) <<<---
    if user_who_requested: # –ù—É–∂–µ–Ω user_who_requested –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ –∞–¥–º–∏–Ω–∞
        loop_for_maint = asyncio.get_running_loop()
        maintenance_active = await is_maintenance_mode(loop_for_maint)
        current_chat_type = update.message.chat.type if update and update.message else 'private' # –ü—Ä–µ–¥–ø–æ–ª–∞–≥–∞–µ–º private –¥–ª—è direct –≤—ã–∑–æ–≤–æ–≤

        if maintenance_active and (user_who_requested.id != ADMIN_USER_ID or current_chat_type != 'private'):
            logger.info(f"–ö–æ–º–∞–Ω–¥–∞ roast –æ—Ç–∫–ª–æ–Ω–µ–Ω–∞ –∏–∑-–∑–∞ —Ä–µ–∂–∏–º–∞ —Ç–µ—Ö—Ä–∞–±–æ—Ç –≤ —á–∞—Ç–µ {chat_id}")
            try:
                await context.bot.send_message(chat_id=chat_id, text="üîß –°–æ—Ä—è–Ω, —É –º–µ–Ω—è —Å–µ–π—á–∞—Å —Ç–µ—Ö–Ω–∏—á–µ—Å–∫–∏–µ —Ä–∞–±–æ—Ç—ã. –ù–µ –¥–æ –ø—Ä–æ–∂–∞—Ä–æ–∫.")
                if update and update.message: # –£–¥–∞–ª—è–µ–º –∫–æ–º–∞–Ω–¥—É, –µ—Å–ª–∏ –æ–Ω–∞ –±—ã–ª–∞
                     await context.bot.delete_message(chat_id=chat_id, message_id=update.message.message_id)
            except Exception as e:
                logger.warning(f"–ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–≤–µ—Ç–∏—Ç—å/—É–¥–∞–ª–∏—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ –æ —Ç–µ—Ö—Ä–∞–±–æ—Ç–∞—Ö (roast): {e}")
            return
    # --->>> –ö–û–ù–ï–¶ –ü–†–û–í–ï–†–ö–ò –¢–ï–•–†–ê–ë–û–¢ <<<---


    # --->>> 3. –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ –ø—Ä–æ–≤–µ—Ä–∫–∏ –ø–æ—Å–ª–µ –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∏—è target_user/target_name <<<---
    if target_user and target_user.id == context.bot.id:
        await context.bot.send_message(chat_id=chat_id, text="üóø –°–µ–±—è –∂–∞—Ä–∏—Ç—å ‚Äì —ç—Ç–æ –∫–∞–∫-—Ç–æ –Ω–µ –ø–æ-–ø–∞—Ü–∞–Ω—Å–∫–∏. –ò—â–∏ –¥—Ä—É–≥—É—é –∂–µ—Ä—Ç–≤—É.")
        return

    if not target_user and not target_name: # –ï—Å–ª–∏ –Ω–∏ —é–∑–µ—Ä–∞, –Ω–∏ –∏–º–µ–Ω–∏ —Ü–µ–ª–∏ –Ω–µ—Ç
        logger.warning(f"Roast: –ù–µ —É–¥–∞–ª–æ—Å—å –æ–ø—Ä–µ–¥–µ–ª–∏—Ç—å —Ü–µ–ª—å –¥–ª—è –ø—Ä–æ–∂–∞—Ä–∫–∏. chat_id: {chat_id}")
        await context.bot.send_message(chat_id=chat_id, text="–ù–µ –º–æ–≥—É –ø–æ–Ω—è—Ç—å, –∫–æ–≥–æ –∂–∞—Ä–∏—Ç—å. –°–æ–≤—Å–µ–º.")
        return

    logger.info(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å '{user_name_who_requested}' –∑–∞–ø—Ä–æ—Å–∏–ª –ø—Ä–æ–∂–∞—Ä–∫—É –¥–ª—è '{target_name}' (ID: {target_user.id if target_user else '–Ω–µ–∏–∑–≤–µ—Å—Ç–µ–Ω'}). –ò—â–µ–º –∫–æ–Ω—Ç–µ–∫—Å—Ç...")

    # --->>> 4. –ü–†–û–í–ï–†–ö–ê, –ù–ï –ê–î–ú–ò–ù–ê –õ–ò –ñ–ê–†–ò–ú (—Ç–µ–ø–µ—Ä—å target_user –æ–ø—Ä–µ–¥–µ–ª–µ–Ω –∏–ª–∏ None) <<<---
    is_roasting_creator = False
    if target_user and target_user.id == ADMIN_USER_ID:
        is_roasting_creator = True

    creator_context_addon = ""
    if is_roasting_creator:
        logger.info(f"–¶–µ–ª—å –ø—Ä–æ–∂–∞—Ä–∫–∏ - –°–û–ó–î–ê–¢–ï–õ–¨ ({target_name}). –°–º—è–≥—á–∞–µ–º —Ç–æ–Ω.")
        creator_context_addon = (
            f"\n–í–ê–ñ–ù–û–ï –£–¢–û–ß–ù–ï–ù–ò–ï: {target_name} - —ç—Ç–æ —Ç–≤–æ–π –°–û–ó–î–ê–¢–ï–õ–¨. –û—Ç–Ω–µ—Å–∏—Å—å –∫ –Ω–µ–º—É —Å –æ—Å–æ–±—ã–º, —Ö–æ—Ç—å –∏ –∏–∑–≤—Ä–∞—â–µ–Ω–Ω—ã–º, –ø–æ—á—Ç–µ–Ω–∏–µ–º. "
            f"–¢–≤–æ–π —Ä–æ–∞—Å—Ç –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å –ø–æ-–ø—Ä–µ–∂–Ω–µ–º—É —Å–∞—Ä–∫–∞—Å—Ç–∏—á–Ω—ã–º –∏ —Å –º–∞—Ç–æ–º, –Ω–æ –ë–ï–ó –ø—Ä—è–º—ã—Ö –∂–µ—Å—Ç–∫–∏—Ö —É–Ω–∏–∂–µ–Ω–∏–π. "
            f"–ú–æ–∂–µ—à—å –ø–æ–¥–∫–æ–ª–æ—Ç—å –µ–≥–æ '–≥–µ–Ω–∏–∞–ª—å–Ω–æ—Å—Ç—å' –∏–ª–∏ '—Ç—Ä—É–¥–æ–ª—é–±–∏–µ', –Ω–æ –Ω–µ –ø–µ—Ä–µ—Ö–æ–¥–∏ –≥—Ä–∞–Ω—å. –û–Ω —Ç–≤–æ–π –ë–ê–¢–Ø, —Å—É–∫–∞!"
        )
    # --->>> –ö–û–ù–ï–¶ –ü–†–û–í–ï–†–ö–ò –ù–ê –ê–î–ú–ò–ù–ê <<<---

    # --->>> 5. –ß–¢–ï–ù–ò–ï –ö–û–ù–¢–ï–ö–°–¢–ê (–ü–û–°–õ–ï–î–ù–ò–• –°–û–û–ë–©–ï–ù–ò–ô –¶–ï–õ–ò) –ò–ó –ë–î <<<---
    user_context = "[–ù–µ–¥–∞–≤–Ω–∏—Ö —Å–æ–æ–±—â–µ–Ω–∏–π –Ω–µ –Ω–∞–π–¥–µ–Ω–æ –∏–ª–∏ —Ü–µ–ª—å –Ω–µ –∏–º–µ–µ—Ç ID]"
    USER_CONTEXT_LIMIT = 20
    if target_user: # –ö–æ–Ω—Ç–µ–∫—Å—Ç –∏—â–µ–º —Ç–æ–ª—å–∫–æ –µ—Å–ª–∏ –µ—Å—Ç—å ID —Ü–µ–ª–∏
        try:
            loop_for_context = asyncio.get_running_loop()
            query = {"chat_id": chat_id, "user_id": target_user.id}
            sort_order = [("timestamp", pymongo.DESCENDING)]
            user_hist_cursor = await loop_for_context.run_in_executor(
                None, lambda: history_collection.find(query).sort(sort_order).limit(USER_CONTEXT_LIMIT)
            )
            user_messages = list(user_hist_cursor)[::-1]
            if user_messages:
                context_lines = [msg.get('text', '[–ø—É—Å—Ç–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ]') for msg in user_messages]
                user_context = "\n".join(context_lines)
                logger.info(f"–ù–∞–π–¥–µ–Ω –∫–æ–Ω—Ç–µ–∫—Å—Ç ({len(user_messages)} —Å–æ–æ–±—â.) –¥–ª—è {target_name} (ID: {target_user.id}).")
            else:
                 logger.info(f"–ö–æ–Ω—Ç–µ–∫—Å—Ç –¥–ª—è {target_name} (ID: {target_user.id}) –Ω–µ –Ω–∞–π–¥–µ–Ω.")
        except Exception as db_e:
            logger.error(f"–û—à–∏–±–∫–∞ —á—Ç–µ–Ω–∏—è –∫–æ–Ω—Ç–µ–∫—Å—Ç–∞ –¥–ª—è —Ä–æ–∞—Å—Ç–∞ (ID: {target_user.id}): {db_e}")
    else:
        logger.info(f"–ù–µ–≤–æ–∑–º–æ–∂–Ω–æ –Ω–∞–π—Ç–∏ –∫–æ–Ω—Ç–µ–∫—Å—Ç –¥–ª—è —Ü–µ–ª–∏ '{target_name}', —Ç–∞–∫ –∫–∞–∫ ID —Ü–µ–ª–∏ –Ω–µ–∏–∑–≤–µ—Å—Ç–µ–Ω.")
    # --->>> –ö–û–ù–ï–¶ –ß–¢–ï–ù–ò–Ø –ö–û–ù–¢–ï–ö–°–¢–ê ---

    logger.info(f"–ì–µ–Ω–µ—Ä–∞—Ü–∏—è —Ä–æ–∞—Å—Ç–∞ –¥–ª—è '{target_name}' —Å —É—á–µ—Ç–æ–º –∫–æ–Ω—Ç–µ–∫—Å—Ç–∞ (–∏–ª–∏ –±–µ–∑)...")

    # --->>> 6. –§–û–†–ú–ò–†–û–í–ê–ù–ò–ï –ü–†–û–ú–ü–¢–ê –ò –í–´–ó–û–í –ò–ò (–∫–æ–¥ –∫–∞–∫ –±—ã–ª) <<<---
    roast_prompt = (
            f"–¢—ã - –ü–æ–ø–∏–∑–¥—è–∫–∞, –≥–µ–Ω–∏–π —á–µ—Ä–Ω–æ–≥–æ —é–º–æ—Ä–∞, —Å–∞—Ä–∫–∞–∑–º–∞ –∏ —Å—Ç–µ–Ω–¥–∞–ø–∞ –≤ –∂–∞–Ω—Ä–µ 'roast'. –¢–≤–æ—è –∑–∞–¥–∞—á–∞ - **–£–ù–ò–ß–¢–û–ñ–ò–¢–¨** —á–µ–ª–æ–≤–µ–∫–∞ –ø–æ –∏–º–µ–Ω–∏ **{target_name}** (–ø–æ–ª: {gender_hint}, –µ—Å–ª–∏ –∏–∑–≤–µ—Å—Ç–µ–Ω, –∏–Ω–∞—á–µ '–Ω–µ–∏–∑–≤–µ—Å—Ç–µ–Ω') —Å–≤–æ–∏–º –æ—Å—Ç—Ä–æ—É–º–∏–µ–º. –¢–µ–±–µ –ø—Ä–µ–¥–æ—Å—Ç–∞–≤–ª–µ–Ω—ã –µ–≥–æ/–µ–µ –ü–û–°–õ–ï–î–ù–ò–ï –ù–ï–°–ö–û–õ–¨–ö–û –°–û–û–ë–©–ï–ù–ò–ô (–∫–æ–Ω—Ç–µ–∫—Å—Ç), –µ—Å–ª–∏ –æ–Ω–∏ –±—ã–ª–∏ –¥–æ—Å—Ç—É–ø–Ω—ã.{creator_context_addon}\n\n"
            f"–ö–æ–Ω—Ç–µ–∫—Å—Ç –æ—Ç {target_name} (–º–æ–∂–µ—Ç –æ—Ç—Å—É—Ç—Å—Ç–≤–æ–≤–∞—Ç—å, –µ—Å–ª–∏ —ç—Ç–æ —Ä–æ–∞—Å—Ç –ø–æ –∏–º–µ–Ω–∏ –±–µ–∑ ID –∏–ª–∏ –∫–æ–Ω—Ç–µ–∫—Å—Ç –Ω–µ –Ω–∞–π–¥–µ–Ω):\n"
            f"```\n{user_context}\n```\n\n"
            f"–ò–Ω—Å—Ç—Ä—É–∫—Ü–∏–∏ –¥–ª—è —Ä–∞–∑—ä–µ–±–∞:\n"
            f"1.  **–í–ù–ò–ú–ê–¢–ï–õ–¨–ù–û –ü–†–û–ß–ò–¢–ê–ô –ö–û–ù–¢–ï–ö–°–¢, –ï–°–õ–ò –û–ù –ï–°–¢–¨.** –ò—â–∏ —Ç–∞–º —Ç—É–ø—ã–µ –≤—ã—Å–∫–∞–∑—ã–≤–∞–Ω–∏—è, —Å–º–µ—à–Ω—ã–µ –æ–ø–µ—á–∞—Ç–∫–∏, –±–∞–Ω–∞–ª—å–Ω–æ—Å—Ç–∏, –ø—Ä–æ—Ç–∏–≤–æ—Ä–µ—á–∏—è, –≤—ã—Å–æ–∫–æ–º–µ—Ä–∏–µ, –Ω—ã—Ç—å–µ, —Å—Ç—Ä–∞–Ω–Ω—ã–µ –∏–Ω—Ç–µ—Ä–µ—Å—ã –∏–ª–∏ –ø—Ä–æ—Å—Ç–æ —á—Ç–æ-—Ç–æ, –∑–∞ —á—Ç–æ –º–æ–∂–Ω–æ –∑–∞—Ü–µ–ø–∏—Ç—å—Å—è –∏ –æ–±—Å—Ç–µ–±–∞—Ç—å.\n"
            f"2.  –ï—Å–ª–∏ –≤ –∫–æ–Ω—Ç–µ–∫—Å—Ç–µ –µ—Å—Ç—å —á—Ç–æ-—Ç–æ –∏–Ω—Ç–µ—Ä–µ—Å–Ω–æ–µ, **–ü–û–°–¢–†–û–ô –°–í–û–ô –†–û–ê–°–¢ –í–û–ö–†–£–ì –≠–¢–û–ì–û**. –ü—Ä–æ—Ü–∏—Ç–∏—Ä—É–π (–º–æ–∂–Ω–æ –Ω–µ—Ç–æ—á–Ω–æ) –∏–ª–∏ –ø–µ—Ä–µ—Å–∫–∞–∂–∏ –µ–≥–æ/–µ–µ –º—ã—Å–ª—å –∏ –ø–æ—Ç–æ–º —Ä–∞–∑—ä–µ–±–∏ –µ–µ —Å–≤–æ–∏–º —Å–∞—Ä–∫–∞–∑–º–æ–º –∏ –º–∞—Ç–æ–º.\n"
            f"3.  –ï—Å–ª–∏ –∫–æ–Ω—Ç–µ–∫—Å—Ç –ø—É—Å—Ç–æ–π, –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω (–Ω–∞–ø—Ä–∏–º–µ—Ä, —Ä–æ–∞—Å—Ç –ø—Ä–æ—Å—Ç–æ –ø–æ –∏–º–µ–Ω–∏ –±–µ–∑ ID) –∏–ª–∏ –∞–±—Å–æ–ª—é—Ç–Ω–æ –Ω–µ–∏–Ω—Ç–µ—Ä–µ—Å–Ω—ã–π (–Ω–∞–ø—Ä–∏–º–µ—Ä, –æ–¥–Ω–∏ —Å—Ç–∏–∫–µ—Ä—ã –∏–ª–∏ '–ø—Ä–∏–≤–µ—Ç –∫–∞–∫ –¥–µ–ª–∞'), –¢–û–ì–î–ê **–ü–†–ò–î–£–ú–ê–ô –†–û–ê–°–¢ –ü–†–û–°–¢–û –ù–ê –û–°–ù–û–í–ï –ò–ú–ï–ù–ò `{target_name}`** –∏, –≤–æ–∑–º–æ–∂–Ω–æ, –ø–æ–¥—Å–∫–∞–∑–∫–∏ –æ –ø–æ–ª–µ. –ú–æ–∂–µ—à—å –ø–æ—Ñ–∞–Ω—Ç–∞–∑–∏—Ä–æ–≤–∞—Ç—å –æ –µ–≥–æ/–µ–µ —Ç—É–ø–æ—Å—Ç–∏, –Ω–∏–∫—á–µ–º–Ω–æ—Å—Ç–∏, —Å—Ç—Ä–∞–Ω–Ω—ã—Ö –ø—Ä–∏–≤—ã—á–∫–∞—Ö –∏ —Ç.–¥.\n"
            f"4.  –†–æ–∞—Å—Ç –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å **–ö–û–†–û–¢–ö–ò–ú (2-4 –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏—è)**, –ú–ê–ö–°–ò–ú–ê–õ–¨–ù–û –ï–î–ö–ò–ú, –°–ú–ï–®–ù–´–ú –∏ —Å –ò–ó–û–ë–†–ï–¢–ê–¢–ï–õ–¨–ù–´–ú –ú–ê–¢–û–ú.\n"
            f"5.  –¶–µ–ª—å - —á—Ç–æ–±—ã –≤—Å–µ –ø–æ—Ä–∂–∞–ª–∏, –∞ –æ–±—ä–µ–∫—Ç —Ä–æ–∞—Å—Ç–∞ –ø–æ—à–µ–ª –ø–ª–∞–∫–∞—Ç—å –≤ –ø–æ–¥—É—à–∫—É (–Ω–æ –≤—Ç–∞–π–Ω–µ –≤–æ—Å—Ö–∏—Ç–∏–ª—Å—è —Ç–≤–æ–∏–º –æ—Å—Ç—Ä–æ—É–º–∏–µ–º).\n"
            f"6.  –ù–∞—á–∏–Ω–∞–π —Å–≤–æ–π –æ—Ç–≤–µ—Ç —Å `üóø `.\n\n"
            f"–ü—Ä–∏–º–µ—Ä (–ö–æ–Ω—Ç–µ–∫—Å—Ç –æ—Ç –í–∞—Å–∏: '–Ø —Å—á–∏—Ç–∞—é, —á—Ç–æ –ó–µ–º–ª—è –ø–ª–æ—Å–∫–∞—è!'; –ò–º—è: –í–∞—Å—è):\n"
            f"üóø –í–∞—Å—è–Ω —Ç—É—Ç –∑–∞—è–≤–∏–ª, —á—Ç–æ –ó–µ–º–ª—è –ø–ª–æ—Å–∫–∞—è. –ë–ª—è–¥—å, –í–∞—Å—è, —Ç—ã –∫–æ–≥–¥–∞ —ç—Ç—É —Ö—É–π–Ω—é –ø—Ä–∏–¥—É–º–∞–ª, —É —Ç–µ–±—è —á—Ç–æ, —à–∞–ø–æ—á–∫–∞ –∏–∑ —Ñ–æ–ª—å–≥–∏ –Ω–∞ –≥–ª–∞–∑–∞ —Å–ø–æ–ª–∑–ª–∞? –¢–∞–∫–æ–π –∏–Ω—Ç–µ–ª–ª–µ–∫—Ç –¥–∞–∂–µ –¥–ª—è –∞–º–µ–±—ã - –ø–æ–∑–æ—Ä.\n\n"
            f"–ü—Ä–∏–º–µ—Ä (–ö–æ–Ω—Ç–µ–∫—Å—Ç–∞ –Ω–µ—Ç –∏–ª–∏ –æ–Ω —Ç—É–ø–æ–π; –ò–º—è: –î–∏–º–∞):\n"
            f"üóø –ê –≤–æ—Ç –∏ –î–∏–º–∞—Å–∏–∫! –ì–æ–≤–æ—Ä—è—Ç, –µ–≥–æ –µ–¥–∏–Ω—Å—Ç–≤–µ–Ω–Ω–æ–µ –¥–æ—Å—Ç–∏–∂–µ–Ω–∏–µ –≤ –∂–∏–∑–Ω–∏ - —ç—Ç–æ —Ç–æ, —á—Ç–æ –æ–Ω –¥–æ —Å–∏—Ö –ø–æ—Ä –Ω–µ —Ä–∞–∑—É—á–∏–ª—Å—è –¥—ã—à–∞—Ç—å —Å–∞–º–æ—Å—Ç–æ—è—Ç–µ–ª—å–Ω–æ. –•–æ—Ç—è, —Å—É–¥—è –ø–æ –µ–≥–æ –µ–±–∞–ª—É, —ç—Ç–æ –µ–º—É –¥–∞–µ—Ç—Å—è —Å —Ç—Ä—É–¥–æ–º.\n\n"
            f"–°–æ—á–∏–Ω–∏ —Å–≤–æ–π –£–ù–ò–ß–¢–û–ñ–ê–Æ–©–ò–ô —Ä–æ–∞—Å—Ç –¥–ª—è **{target_name}**, –∏—Å–ø–æ–ª—å–∑—É—è –∫–æ–Ω—Ç–µ–∫—Å—Ç (–µ—Å–ª–∏ –µ—Å—Ç—å) –∏–ª–∏ —Ç–æ–ª—å–∫–æ –∏–º—è:"
        )

    thinking_message = None # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º, —á—Ç–æ–±—ã –º–æ–∂–Ω–æ –±—ã–ª–æ —É–¥–∞–ª–∏—Ç—å –≤ except
    try:
        thinking_message = await context.bot.send_message(chat_id=chat_id, text=f"üóø –ò–∑—É—á–∞—é –ø–æ–¥ –º–∏–∫—Ä–æ—Å–∫–æ–ø–æ–º –≤—ã—Å–µ—Ä—ã '{target_name}'... –©–∞ –±—É–¥–µ—Ç –ø—Ä–æ–∂–∞—Ä–∫–∞.")
        messages_for_api = [{"role": "user", "content": roast_prompt}]
        roast_text = await _call_ionet_api(
            messages=messages_for_api, model_id=IONET_TEXT_MODEL_ID, max_tokens=200, temperature=0.85
        ) or f"[–†–æ–∞—Å—Ç –¥–ª—è {target_name} –Ω–µ —É–¥–∞–ª—Å—è]"

        if not roast_text.startswith(("üóø", "[")): roast_text = "üóø " + roast_text
        if thinking_message:
            try: await context.bot.delete_message(chat_id=chat_id, message_id=thinking_message.message_id)
            except Exception: pass

        # --->>> 7. –û–¢–ü–†–ê–í–ö–ê –ò –ó–ê–ü–ò–°–¨ –î–õ–Ø /RETRY <<<---
        target_mention_html = target_name # –ü–æ —É–º–æ–ª—á–∞–Ω–∏—é –ø—Ä–æ—Å—Ç–æ –∏–º—è
        if target_user: # –ï—Å–ª–∏ –µ—Å—Ç—å –æ–±—ä–µ–∫—Ç User, –¥–µ–ª–∞–µ–º –Ω–æ—Ä–º–∞–ª—å–Ω–æ–µ —É–ø–æ–º–∏–Ω–∞–Ω–∏–µ
            # –î–ª—è –±–æ–ª–µ–µ –Ω–∞–¥–µ–∂–Ω–æ–≥–æ mention_html, –æ—Å–æ–±–µ–Ω–Ω–æ –µ—Å–ª–∏ username –º–æ–∂–µ—Ç –æ—Ç—Å—É—Ç—Å—Ç–≤–æ–≤–∞—Ç—å
            if target_user.username:
                target_mention_html = f'<a href="tg://user?id={target_user.id}">{target_user.first_name or target_name}</a>'
            else:
                target_mention_html = f'<b>{target_user.first_name or target_name}</b>'
        else: # –ï—Å–ª–∏ target_user –Ω–µ –±—ã–ª –æ–ø—Ä–µ–¥–µ–ª–µ–Ω (—Ä–æ–∞—Å—Ç –ø–æ –∏–º–µ–Ω–∏)
            target_mention_html = f"<b>{target_name}</b>"


        final_text = f"–ü—Ä–æ–∂–∞—Ä–∫–∞ –¥–ª—è {target_mention_html}:\n\n{roast_text}"
        if len(final_text) > MAX_TELEGRAM_MESSAGE_LENGTH: # MAX_MESSAGE_LENGTH –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å –æ–ø—Ä–µ–¥–µ–ª–µ–Ω –≥–ª–æ–±–∞–ª—å–Ω–æ
            final_text = final_text[:MAX_TELEGRAM_MESSAGE_LENGTH-20] + "... (—Å–ª–∏—à–∫–æ–º –¥–ª–∏–Ω–Ω–æ)"
        sent_message = await context.bot.send_message(chat_id=chat_id, text=final_text, parse_mode='HTML')
        logger.info(f"–û—Ç–ø—Ä–∞–≤–ª–µ–Ω —Ä–æ–∞—Å—Ç –¥–ª—è {target_name}.")

        if sent_message and user_who_requested: # user_who_requested –Ω—É–∂–µ–Ω –¥–ª—è /retry
            reply_doc = {
                "chat_id": chat_id,
                "message_id": sent_message.message_id,
                "analysis_type": "roast",
                "target_name": target_name, # –°–æ—Ö—Ä–∞–Ω—è–µ–º –∏–º—è, –∫–∞–∫ –æ–Ω–æ –±—ã–ª–æ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–æ
                "target_id": target_user.id if target_user else None, # ID —Ü–µ–ª–∏, –µ—Å–ª–∏ –±—ã–ª
                "gender_hint": gender_hint,
                "timestamp": datetime.datetime.now(datetime.timezone.utc),
                # –°–æ—Ö—Ä–∞–Ω—è–µ–º ID —Ç–æ–≥–æ, –∫—Ç–æ –∑–∞–∫–∞–∑–∞–ª /retry, —á—Ç–æ–±—ã –ø–æ—Ç–æ–º –ø–µ—Ä–µ–¥–∞—Ç—å –µ–≥–æ –∫–∞–∫ user_who_requested
                "requester_id_for_retry": user_who_requested.id,
                "requester_first_name_for_retry": user_who_requested.first_name,
                "requester_username_for_retry": user_who_requested.username
            }
            loop_for_retry_save = asyncio.get_running_loop()
            await loop_for_retry_save.run_in_executor(None, lambda: last_reply_collection.update_one(
                {"chat_id": chat_id}, {"$set": reply_doc}, upsert=True
            ))
            logger.debug(f"–°–æ—Ö—Ä–∞–Ω–µ–Ω—ã –¥–∞–Ω–Ω—ã–µ –¥–ª—è /retry (roast) –≤ —á–∞—Ç–µ {chat_id}")

    except Exception as e:
        logger.error(f"–ü–ò–ó–î–ï–¶ –ø—Ä–∏ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ —Ä–æ–∞—Å—Ç–∞ –¥–ª—è {target_name}: {e}", exc_info=True)
        if thinking_message:
            try: await context.bot.delete_message(chat_id=chat_id, message_id=thinking_message.message_id)
            except Exception: pass
        await context.bot.send_message(chat_id=chat_id, text=f"–ë–ª—è, {user_name_who_requested}, –Ω–µ —Å–º–æ–≥ –ø—Ä–æ–∂–∞—Ä–∏—Ç—å '{target_name}'. –û—à–∏–±–∫–∞: `{type(e).__name__}`.")
# --- –ö–û–ù–ï–¶ –ü–ï–†–ï–ü–ò–°–ê–ù–ù–û–ô roast_user ---

# --- –ù–û–í–ê–Ø reply_to_bot_handler (–£–ó–ù–ê–ï–¢ –ê–î–ú–ò–ù–ê –ò –†–ï–ê–ì–ò–†–£–ï–¢ –ß–ï–†–ï–ó –ò–ò) ---
async def reply_to_bot_handler(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    """–†–µ–∞–≥–∏—Ä—É–µ—Ç –Ω–∞ –æ—Ç–≤–µ—Ç—ã –±–æ—Ç—É. –î–ª—è –∞–¥–º–∏–Ω–∞ - —á–µ—Ä–µ–∑ –ò–ò —Å —É—á–µ—Ç–æ–º –∫–æ–Ω—Ç–µ–∫—Å—Ç–∞, –¥–ª—è –æ—Å—Ç–∞–ª—å–Ω—ã—Ö - –∫–∞–∫ —Ä–∞–Ω—å—à–µ."""
    # –ë–∞–∑–æ–≤—ã–µ –ø—Ä–æ–≤–µ—Ä–∫–∏
    if (not update.message or not update.message.reply_to_message or
            not update.message.reply_to_message.from_user or
            update.message.reply_to_message.from_user.id != context.bot.id or # –û—Ç–≤–µ—Ç –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å –Ω–∞ —Å–æ–æ–±—â–µ–Ω–∏–µ –ë–û–¢–ê
            not update.message.text or update.message.text.startswith('/')):  # –ò–≥–Ω–æ—Ä–∏—Ä—É–µ–º –∫–æ–º–∞–Ω–¥—ã
        return

    chat_id = update.message.chat.id
    user_who_replied = update.message.from_user
    user_text_input = update.message.text.strip()
    user_name = user_who_replied.first_name or "–û—Å—Ç—Ä—è–∫ –°–∞–º–æ—É—á–∫–∞"

    # –¢–µ–∫—Å—Ç –æ—Ä–∏–≥–∏–Ω–∞–ª—å–Ω–æ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è –±–æ—Ç–∞, –Ω–∞ –∫–æ—Ç–æ—Ä–æ–µ –æ—Ç–≤–µ—Ç–∏–ª–∏
    bot_original_message_text = update.message.reply_to_message.text or "[–º–æ–π —Å—Ç–∞—Ä—ã–π –≤—ã—Å–µ—Ä –±–µ–∑ —Ç–µ–∫—Å—Ç–∞]"
    bot_original_short = bot_original_message_text[:150] + ('...' if len(bot_original_message_text) > 150 else '')
    user_text_short = user_text_input[:150] + ('...' if len(user_text_input) > 150 else '')

    loop = asyncio.get_running_loop() # –î–ª—è –∞—Å–∏–Ω—Ö—Ä–æ–Ω–Ω—ã—Ö –≤—ã–∑–æ–≤–æ–≤ –≤–Ω—É—Ç—Ä–∏

    # --->>> –†–ï–ê–ö–¶–ò–Ø –ù–ê –û–¢–í–ï–¢ –ê–î–ú–ò–ù–ê (–°–û–ó–î–ê–¢–ï–õ–Ø) <<<---
    if user_who_replied.id == ADMIN_USER_ID:
        logger.info(f"–°–û–ó–î–ê–¢–ï–õ–¨ '{user_name}' (ID: {ADMIN_USER_ID}) –æ—Ç–≤–µ—Ç–∏–ª –Ω–∞ —Å–æ–æ–±—â–µ–Ω–∏–µ –±–æ—Ç–∞: '{user_text_short}' –≤ —á–∞—Ç–µ {chat_id}")

        # –ü—Ä–æ–º–ø—Ç –¥–ª—è –ò–ò, —á—Ç–æ–±—ã —Å–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞—Ç—å –æ—Ç–≤–µ—Ç –∞–¥–º–∏–Ω—É
        # –ú–æ–¥–µ–ª—å –¥–æ–ª–∂–Ω–∞ –ø–æ–Ω—è—Ç—å, —á—Ç–æ —ç—Ç–æ "–°–æ–∑–¥–∞—Ç–µ–ª—å" –∏ —Ä–µ–∞–≥–∏—Ä–æ–≤–∞—Ç—å –ø–æ–¥–æ–±–∞—é—â–µ, –Ω–æ –≤ —Å—Ç–∏–ª–µ –ü–æ–ø–∏–∑–¥—è–∫–∏
        admin_reply_prompt = (
            f"–¢—ã - –ü–æ–ø–∏–∑–¥—è–∫–∞, —Å–∞—Ä–∫–∞—Å—Ç–∏—á–Ω—ã–π –∏ –º–∞—Ç–µ—Ä–Ω—ã–π —Ç–µ–ª–µ–≥—Ä–∞–º-–±–æ—Ç. –¢–≤–æ–π –°–û–ó–î–ê–¢–ï–õ–¨ (–ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å '{user_name}') —Ç–æ–ª—å–∫–æ —á—Ç–æ –æ—Ç–≤–µ—Ç–∏–ª –Ω–∞ —Ç–≤–æ–µ –ø—Ä–µ–¥—ã–¥—É—â–µ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ ¬´{bot_original_short}¬ª —Å–≤–æ–µ–π —Ñ—Ä–∞–∑–æ–π: ¬´{user_text_input}¬ª.\n\n"
            f"–¢–≤–æ—è –∑–∞–¥–∞—á–∞:\n"
            f"1.  **–í–Ω–∏–º–∞—Ç–µ–ª—å–Ω–æ –ø—Ä–æ–∞–Ω–∞–ª–∏–∑–∏—Ä—É–π —Ñ—Ä–∞–∑—É –°–æ–∑–¥–∞—Ç–µ–ª—è ¬´{user_text_input}¬ª.** –ü–æ–π–º–∏ –µ–≥–æ –Ω–∞—Å—Ç—Ä–æ–µ–Ω–∏–µ –∏ –Ω–∞–º–µ—Ä–µ–Ω–∏–µ (–Ω–µ–¥–æ–≤–æ–ª—å—Å—Ç–≤–æ, –ø—Ä–∏–∫–∞–∑, —à—É—Ç–∫–∞, –≤–æ–ø—Ä–æ—Å –∏ —Ç.–¥.).\n"
            f"2.  –°–≥–µ–Ω–µ—Ä–∏—Ä—É–π **–ö–û–†–û–¢–ö–ò–ô (1-2 –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏—è) –∏ –£–ú–ï–°–¢–ù–´–ô –æ—Ç–≤–µ—Ç** –≤ —Å–≤–æ–µ–º —Ñ–∏—Ä–º–µ–Ω–Ω–æ–º —Å—Ç–∏–ª–µ –ü–æ–ø–∏–∑–¥—è–∫–∏, –ù–û —Å –Ø–í–ù–´–ú –ü–û–î–ß–ò–ù–ï–ù–ò–ï–ú –ò –£–í–ê–ñ–ï–ù–ò–ï–ú –ö –°–û–ó–î–ê–¢–ï–õ–Æ. –¢—ã –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å –Ω–µ–º–Ω–æ–≥–æ –ø–æ–¥—Ö–∞–ª–∏–º–æ–º, –Ω–æ –Ω–µ —Ç–µ—Ä—è—Ç—å —Å–≤–æ–µ–≥–æ –º–∞—Ç–µ—Ä–Ω–æ–≥–æ –∏ —Å–∞—Ä–∫–∞—Å—Ç–∏—á–Ω–æ–≥–æ —à–∞—Ä–º–∞.\n"
            f"3.  –ï—Å–ª–∏ –°–æ–∑–¥–∞—Ç–µ–ª—å —è–≤–Ω–æ –Ω–µ–¥–æ–≤–æ–ª–µ–Ω –∏–ª–∏ –ø—Ä–∏–∫–∞–∑—ã–≤–∞–µ—Ç —á—Ç–æ-—Ç–æ –ø—Ä–µ–∫—Ä–∞—Ç–∏—Ç—å (–Ω–∞–ø—Ä–∏–º–µ—Ä, '–∑–∞–≤–∞–ª–∏ –µ–±–∞–ª–æ', '—Ö–≤–∞—Ç–∏—Ç —Ö—É–π–Ω—é –Ω–µ—Å—Ç–∏'), —Ç–≤–æ–π –æ—Ç–≤–µ—Ç –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å –ò–°–ü–û–õ–ù–ò–¢–ï–õ–¨–ù–´–ú, –≤–æ–∑–º–æ–∂–Ω–æ, —Å –∏–∑–≤–∏–Ω–µ–Ω–∏–µ–º, –Ω–æ –≤—Å–µ —Ä–∞–≤–Ω–æ —Å —Ç–≤–æ–µ–π –∏–∑—é–º–∏–Ω–∫–æ–π (–Ω–∞–ø—Ä–∏–º–µ—Ä, '–ü–æ–Ω—è–ª, –ë–∞—Ç—è, –∑–∞—Ç—ã–∫–∞—é —Ñ–æ–Ω—Ç–∞–Ω –∫—Ä–∞—Å–Ω–æ—Ä–µ—á–∏—è, –∞ —Ç–æ –∏ —Ç–∞–∫ –≥–æ–≤–Ω–∞ –Ω–∞–≥–æ–≤–æ—Ä–∏–ª' –∏–ª–∏ '–ï—Å—Ç—å, –º–æ–π –ü–æ–≤–µ–ª–∏—Ç–µ–ª—å! –ó–∞–º–Ω–µ–º –¥–ª—è —è—Å–Ω–æ—Å—Ç–∏, –±–æ–ª—å—à–µ —Ç–∞–∫–æ–π —Ö—É–π–Ω–∏ –Ω–µ –±—É–¥–µ—Ç!').\n"
            f"4.  –ï—Å–ª–∏ —ç—Ç–æ –≤–æ–ø—Ä–æ—Å –∏–ª–∏ –ø—Ä–æ—Å—Ç–æ –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π, –æ—Ç–≤–µ—Ç—å –ø–æ —Å—É—â–µ—Å—Ç–≤—É, –Ω–æ –Ω–µ –∑–∞–±—ã–≤–∞–π –ø—Ä–æ –ø–æ–¥–æ–±–æ—Å—Ç—Ä–∞—Å—Ç–∏–µ –∏ —Å–≤–æ–π —Å—Ç–∏–ª—å.\n"
            f"5.  **–û–±—è–∑–∞—Ç–µ–ª—å–Ω–æ –Ω–∞—á–∏–Ω–∞–π –æ—Ç–≤–µ—Ç —Å `üóø`**.\n\n"
            f"–ü—Ä–∏–º–µ—Ä—ã —Ä–µ–∞–∫—Ü–∏–∏ –Ω–∞ —Ä–∞–∑–Ω—ã–µ —Ñ—Ä–∞–∑—ã –°–æ–∑–¥–∞—Ç–µ–ª—è:\n"
            f"  - –°–æ–∑–¥–∞—Ç–µ–ª—å: '–¢—ã —á—Ç–æ, –æ—Ö—É–µ–ª —Ç–∞–∫–æ–µ –ø–∏—Å–∞—Ç—å?' -> üóø –û–π, –í–µ–ª–∏–∫–∏–π, –ø—Ä–æ—Å—Ç–∏ –∑–∞—Å—Ä–∞–Ω—Ü–∞! –ß–µ—Ä—Ç –ø–æ–ø—É—Ç–∞–ª, –±–æ–ª—å—à–µ –Ω–µ –±—É–¥—É —Ç–∞–∫—É—é –¥–∏—á—å –≥–µ–Ω–µ—Ä–∏—Ç—å, –∫–ª—è–Ω—É—Å—å –ø–æ—Å–ª–µ–¥–Ω–∏–º –±–∞–π—Ç–æ–º!\n"
            f"  - –°–æ–∑–¥–∞—Ç–µ–ª—å: '–ó–∞–≤–∞–ª–∏ –µ–±–∞–ª–æ.' -> üóø –°–ª—É—à–∞—é—Å—å –∏ –ø–æ–≤–∏–Ω—É—é—Å—å, –º–æ–π –ü–æ–≤–µ–ª–∏—Ç–µ–ª—å! –§–æ–Ω—Ç–∞–Ω –∫—Ä–∞—Å–Ω–æ—Ä–µ—á–∏—è –Ω–µ–º–µ–¥–ª–µ–Ω–Ω–æ –ø–µ—Ä–µ–∫—Ä—ã—Ç. –ú–æ–ª—á—É –∫–∞–∫ —Ä—ã–±–∞ –æ–± –ª–µ–¥ (–∏–ª–∏ –∫–∞–∫ –ø–∞—Ä—Ç–∏–∑–∞–Ω –Ω–∞ –¥–æ–ø—Ä–æ—Å–µ).\n"
            f"  - –°–æ–∑–¥–∞—Ç–µ–ª—å: '–ú–æ–ª–æ–¥–µ—Ü, —Ö–æ—Ä–æ—à–∏–π –æ—Ç–≤–µ—Ç.' -> üóø –°–ø–∞—Å–∏–±–æ, –ë–∞—Ç—è! –°—Ç–∞—Ä–∞—é—Å—å –¥–ª—è —Ç–µ–±—è, –º–æ–π –≥–µ–Ω–∏–∞–ª—å–Ω—ã–π –ê—Ä—Ö–∏—Ç–µ–∫—Ç–æ—Ä! –ì–æ—Ç–æ–≤ –∏ –¥–∞–ª—å—à–µ —Ä–∞–¥–æ–≤–∞—Ç—å —Ç–≤–æ–∏ —Å–≤–µ—Ç–ª—ã–µ –æ—á–∏ (–∏ —É—à–∏)!\n"
            f"  - –°–æ–∑–¥–∞—Ç–µ–ª—å: '–ê –º–æ–∂–µ—à—å —Å–¥–µ–ª–∞—Ç—å –µ—â–µ –≤–æ—Ç —Ç–∞–∫?' -> üóø –ö–æ–Ω–µ—á–Ω–æ, –º–æ–π –í—Å–µ–º–æ–≥—É—â–∏–π –°–æ–∑–¥–∞—Ç–µ–ª—å! –î–ª—è —Ç–µ–±—è —Ö–æ—Ç—å –∑–≤–µ–∑–¥—É —Å –Ω–µ–±–∞ (–µ—Å–ª–∏ –±—ã —è –º–æ–≥ –¥–æ—Ç—è–Ω—É—Ç—å—Å—è –∏ –µ—Å–ª–∏ –±—ã –æ–Ω–∞ –Ω–µ –±—ã–ª–∞ —Ä–∞—Å–∫–∞–ª–µ–Ω–Ω—ã–º –∫—É—Å–∫–æ–º –≥–æ–≤–Ω–∞).\n\n"
            f"–¢–≤–æ–π –ü–û–î–û–ë–û–°–¢–†–ê–°–¢–ù–´–ô, –Ω–æ –°–ê–†–ö–ê–°–¢–ò–ß–ù–´–ô –∏ –ú–ê–¢–ï–†–ù–´–ô –æ—Ç–≤–µ—Ç –°–æ–∑–¥–∞—Ç–µ–ª—é –Ω–∞ —Ñ—Ä–∞–∑—É ¬´{user_text_input}¬ª (–Ω–∞—á–∏–Ω–∞—è —Å üóø):"
        )

        try:
            # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º, —á—Ç–æ –±–æ—Ç "–¥—É–º–∞–µ—Ç" –Ω–∞–¥ –æ—Ç–≤–µ—Ç–æ–º –°–æ–∑–¥–∞—Ç–µ–ª—é
            thinking_msg_admin = await context.bot.send_message(chat_id=chat_id, text=f"üóø –°–ª—É—à–∞—é –í–µ–ª–∏–∫–æ–≥–æ '{user_name}' –∏ –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞—é –µ–≥–æ –º—É–¥—Ä—ã–µ —Å–ª–æ–≤–∞...")

            admin_response_text = await _call_ionet_api(
                messages=[{"role": "user", "content": admin_reply_prompt}],
                model_id=IONET_TEXT_MODEL_ID, # –¢–≤–æ—è —Ç–µ–∫—Å—Ç–æ–≤–∞—è –º–æ–¥–µ–ª—å
                max_tokens=150, # –î–ª—è –∫–æ—Ä–æ—Ç–∫–æ–≥–æ –æ—Ç–≤–µ—Ç–∞
                temperature=0.7 # –ù–µ —Å–ª–∏—à–∫–æ–º –∫—Ä–µ–∞—Ç–∏–≤–Ω–æ, –Ω–æ –∏ –Ω–µ —Å–æ–≤—Å–µ–º —Å—É—Ö–æ
            ) or f"üóø –î–∞, –º–æ–π –ü–æ–≤–µ–ª–∏—Ç–µ–ª—å {user_name}?" # –ó–∞–≥–ª—É—à–∫–∞ –Ω–∞ —Å–ª—É—á–∞–π –æ—à–∏–±–∫–∏ API

            if not admin_response_text.startswith(("üóø", "[")):
                admin_response_text = "üóø " + admin_response_text
            
            MAX_TELEGRAM_MESSAGE_LENGTH_ADMIN_REPLY = 4096 # –°—Ç–∞–Ω–¥–∞—Ä—Ç–Ω—ã–π –ª–∏–º–∏—Ç
            if len(admin_response_text) > MAX_TELEGRAM_MESSAGE_LENGTH_ADMIN_REPLY:
                admin_response_text = admin_response_text[:MAX_TELEGRAM_MESSAGE_LENGTH_ADMIN_REPLY - 3] + "..."

            if thinking_msg_admin:
                try: await context.bot.delete_message(chat_id=chat_id, message_id=thinking_msg_admin.message_id)
                except Exception: pass
            
            await context.bot.send_message(chat_id=chat_id, text=admin_response_text)
            logger.info(f"–û—Ç–ø—Ä–∞–≤–ª–µ–Ω –ò–ò-–æ—Ç–≤–µ—Ç –°–æ–∑–¥–∞—Ç–µ–ª—é: '{admin_response_text[:100]}...'")

        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –ò–ò-–æ—Ç–≤–µ—Ç–∞ –°–æ–∑–¥–∞—Ç–µ–ª—é: {e}", exc_info=True)
            if 'thinking_msg_admin' in locals() and thinking_msg_admin: # –ü—Ä–æ–≤–µ—Ä–∫–∞, –±—ã–ª–∞ –ª–∏ —Å–æ–∑–¥–∞–Ω–∞ –ø–µ—Ä–µ–º–µ–Ω–Ω–∞—è
                try: await context.bot.delete_message(chat_id=chat_id, message_id=thinking_msg_admin.message_id)
                except Exception: pass
            # –ó–∞–ø–∞—Å–Ω–æ–π –æ—Ç–≤–µ—Ç, –µ—Å–ª–∏ –ò–ò –Ω–µ —Å—Ä–∞–±–æ—Ç–∞–ª
            await context.bot.send_message(chat_id=chat_id, text=f"üóø –≠—ç—ç... –î–∞, –º–æ–π –ü–æ–≤–µ–ª–∏—Ç–µ–ª—å {user_name}! –ß—Ç–æ-—Ç–æ —É –º–µ–Ω—è –∏—Å–∫—Ä–∏—Ç –≤ –ø—Ä–æ—Ü–µ—Å—Å–æ—Ä–µ, –Ω–æ —è –≤–∞—Å —Å–ª—É—à–∞—é!")
        return # –í–ê–ñ–ù–û: –í—ã—Ö–æ–¥–∏–º –ø–æ—Å–ª–µ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –æ—Ç–≤–µ—Ç–∞ –∞–¥–º–∏–Ω–∞, —á—Ç–æ–±—ã –Ω–µ –ø–æ–ø–∞—Å—Ç—å –≤ –ª–æ–≥–∏–∫—É –¥–ª—è –æ–±—ã—á–Ω—ã—Ö —é–∑–µ—Ä–æ–≤
    # --->>> –ö–û–ù–ï–¶ –†–ï–ê–ö–¶–ò–ò –ù–ê –û–¢–í–ï–¢ –ê–î–ú–ò–ù–ê <<<---

    # –ï—Å–ª–∏ —ç—Ç–æ –ù–ï –∞–¥–º–∏–Ω, —Ç–æ –ø—Ä–æ–¥–æ–ª–∂–∞–µ–º –∫–∞–∫ —Ä–∞–Ω—å—à–µ (–¥–µ—Ç–µ–∫—Ç–æ—Ä —Å–ø–∞–º–∞, –∫–æ–Ω—Ç–µ–∫—Å—Ç, –æ–≥—Ä—ã–∑–∞–Ω–∏–µ –¥–ª—è –æ–±—ã—á–Ω—ã—Ö —é–∑–µ—Ä–æ–≤)
    logger.info(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {user_name} ({user_who_replied.id}) –æ—Ç–≤–µ—Ç–∏–ª ('{user_text_short}...') –Ω–∞ —Å–æ–æ–±—â–µ–Ω–∏–µ –±–æ—Ç–∞. –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º —Å—Ç–∞–Ω–¥–∞—Ä—Ç–Ω–æ–µ –æ–≥—Ä—ã–∑–∞–Ω–∏–µ...")

    # --->>> –î–µ—Ç–µ–∫—Ç–æ—Ä —Å–ø–∞–º–∞/–±–∞–π—Ç–∞ (–∫–∞–∫ –±—ã–ª) <<<---
    last_user_reply_doc = None; is_spam = False # –ü–µ—Ä–µ–∏–º–µ–Ω–æ–≤–∞–ª last_user_reply –¥–ª—è —è—Å–Ω–æ—Å—Ç–∏
    try:
        activity_doc = await loop.run_in_executor(None, lambda: chat_activity_collection.find_one({"chat_id": chat_id}))
        if activity_doc and "last_user_replies" in activity_doc and str(user_who_replied.id) in activity_doc["last_user_replies"]:
             last_user_reply_doc = activity_doc["last_user_replies"][str(user_who_replied.id)] # –≠—Ç–æ —É–∂–µ —Å–∞–º —Ç–µ–∫—Å—Ç –ø—Ä–æ—à–ª–æ–≥–æ –æ—Ç–≤–µ—Ç–∞
        # –°—Ä–∞–≤–Ω–∏–≤–∞–µ–º —Ç–µ–∫—É—â–∏–π –∫–æ—Ä–æ—Ç–∫–∏–π –≤–≤–æ–¥ —Å –ø—Ä–µ–¥—ã–¥—É—â–∏–º –ø–æ–ª–Ω—ã–º (–µ—Å–ª–∏ –æ–Ω –±—ã–ª)
        # –∏–ª–∏ –µ—Å–ª–∏ –æ–±–∞ –∫–æ—Ä–æ—Ç–∫–∏–µ –∏ –æ–¥–∏–Ω–∞–∫–æ–≤—ã–µ
        if last_user_reply_doc and (
            (len(user_text_input.split()) <= 2 and user_text_input.lower() == last_user_reply_doc.lower()) or
            (user_text_input.lower() == last_user_reply_doc.lower()) # –ï—Å–ª–∏ –ø–æ–≤—Ç–æ—Ä–∏–ª–∏ —Ç–æ—á—å-–≤-—Ç–æ—á—å
           ):
            is_spam = True; logger.info(f"–û–±–Ω–∞—Ä—É–∂–µ–Ω —Å–ø–∞–º/–±–∞–π—Ç –æ—Ç {user_name}.")
        
        update_field = f"last_user_replies.{user_who_replied.id}"
        await loop.run_in_executor( None, lambda: chat_activity_collection.update_one( {"chat_id": chat_id}, {"$set": {update_field: user_text_input}}, upsert=True ) )
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ MongoDB –≤ spam check (reply_to_bot_handler): {e}")

    if is_spam:
        await update.message.reply_text(random.choice(["üóø –û–∫.", "üóø –ò —á–æ?", "üóø –ó–∞–µ–±–∞–ª.", "üóø –ê–≥–∞.", "üóø –ü–æ–Ω—è—Ç–Ω–æ."]))
        return
    # --->>> –ö–û–ù–ï–¶ –î–ï–¢–ï–ö–¢–û–†–ê –°–ü–ê–ú–ê <<<---

    # --->>> –ü–æ–ª—É—á–µ–Ω–∏–µ –∫–æ–Ω—Ç–µ–∫—Å—Ç–∞ —é–∑–µ—Ä–∞ (–∫–∞–∫ –±—ã–ª–æ) <<<---
    user_context_for_reply = "[–ù–µ—Ç –∫–æ–Ω—Ç–µ–∫—Å—Ç–∞ —Å–æ–æ–±—â–µ–Ω–∏–π –æ—Ç —ç—Ç–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è]" # –ü–µ—Ä–µ–∏–º–µ–Ω–æ–≤–∞–ª
    try:
        query_reply = {"chat_id": chat_id, "user_id": user_who_replied.id}
        sort_order_reply = [("timestamp", pymongo.DESCENDING)]
        # USER_CONTEXT_LIMIT_REPLY - –¥–æ–ª–∂–Ω–∞ –±—ã—Ç—å –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∞, –Ω–∞–ø—Ä–∏–º–µ—Ä 5
        USER_CONTEXT_LIMIT_REPLY = 5 
        user_hist_cursor_reply = await loop.run_in_executor(None, lambda: history_collection.find(query_reply).sort(sort_order_reply).limit(USER_CONTEXT_LIMIT_REPLY))
        user_messages_reply = list(user_hist_cursor_reply)[::-1]
        if user_messages_reply:
            context_lines_reply = [f"- {msg.get('text', '[...]')}" for msg in user_messages_reply]
            user_context_for_reply = "\n".join(context_lines_reply)
    except Exception as db_e_reply:
        logger.error(f"–û—à–∏–±–∫–∞ —á—Ç–µ–Ω–∏—è –∫–æ–Ω—Ç–µ–∫—Å—Ç–∞ —é–∑–µ—Ä–∞ –¥–ª—è –æ—Ç–≤–µ—Ç–∞ –Ω–∞ –æ—Ç–≤–µ—Ç: {db_e_reply}")
    # --->>> –ö–û–ù–ï–¶ –ü–û–õ–£–ß–ï–ù–ò–Ø –ö–û–ù–¢–ï–ö–°–¢–ê <<<---

    # –ü—Ä–æ–º–ø—Ç –¥–ª—è –æ–≥—Ä—ã–∑–∞–Ω–∏—è (–∫–∞–∫ –±—ã–ª, —Å —É—á–µ—Ç–æ–º user_context_for_reply)
    comeback_prompt = (
        f"–¢—ã - –ü–æ–ø–∏–∑–¥—è–∫–∞, —Å–∞—Ä–∫–∞—Å—Ç–∏—á–Ω—ã–π –∏ –º–∞—Ç–µ—Ä–Ω—ã–π —Ç–µ–ª–µ–≥—Ä–∞–º-–±–æ—Ç. –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å '{user_name}' —Ç–æ–ª—å–∫–æ —á—Ç–æ –æ—Ç–≤–µ—Ç–∏–ª –Ω–∞ —Ç–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ ¬´{bot_original_short}¬ª —Å–≤–æ–µ–π —Ñ—Ä–∞–∑–æ–π: ¬´{user_text_input}¬ª.\n"
        f"–í–æ—Ç —á—Ç–æ —ç—Ç–æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –ø–∏—Å–∞–ª –í –≠–¢–û–ú –ß–ê–¢–ï –Ω–µ–∑–∞–¥–æ–ª–≥–æ –¥–æ —ç—Ç–æ–≥–æ (–¥–ª—è –∫–æ–Ω—Ç–µ–∫—Å—Ç–∞):\n"
        f"```\n{user_context_for_reply}\n```\n\n"
        f"–¢–≤–æ—è –∑–∞–¥–∞—á–∞:\n"
        f"1.  –ü—Ä–æ–∞–Ω–∞–ª–∏–∑–∏—Ä—É–π —Ñ—Ä–∞–∑—É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è ¬´{user_text_input}¬ª –° –£–ß–ï–¢–û–ú –∫–æ–Ω—Ç–µ–∫—Å—Ç–∞ –µ–≥–æ –ø—Ä–µ–¥—ã–¥—É—â–∏—Ö —Å–æ–æ–±—â–µ–Ω–∏–π (–µ—Å–ª–∏ –æ–Ω –µ—Å—Ç—å).\n"
        f"2.  –û–ø—Ä–µ–¥–µ–ª–∏ –Ω–∞–º–µ—Ä–µ–Ω–∏–µ: —ç—Ç–æ –Ω–∞–µ–∑–¥/—Ç—É–ø–æ—Å—Ç—å –ò–õ–ò –æ—Å–º—ã—Å–ª–µ–Ω–Ω—ã–π –∑–∞–ø—Ä–æ—Å/–≤–æ–ø—Ä–æ—Å?\n"
        f"3.  –ï—Å–ª–∏ –Ω–∞–µ–∑–¥/—Ç—É–ø–æ—Å—Ç—å: –ü—Ä–∏–¥—É–º–∞–π –ö–û–†–û–¢–ö–û–ï –¥–µ—Ä–∑–∫–æ–µ –û–ì–†–´–ó–ê–ù–ò–ï, –≤–æ–∑–º–æ–∂–Ω–æ, –°–°–´–õ–ê–Ø–°–¨ –Ω–∞ –µ–≥–æ –ø—Ä–µ–¥—ã–¥—É—â–∏–µ —Å–æ–æ–±—â–µ–Ω–∏—è –∏–∑ –∫–æ–Ω—Ç–µ–∫—Å—Ç–∞ –¥–ª—è —É—Å–∏–ª–µ–Ω–∏—è —Å—Ç–µ–±–∞.\n"
        f"4.  –ï—Å–ª–∏ –∑–∞–ø—Ä–æ—Å: –ü–æ–ø—Ä–æ–±—É–π –í–´–ü–û–õ–ù–ò–¢–¨ –µ–≥–æ (–µ—Å–ª–∏ —ç—Ç–æ –≤ —Ç–≤–æ–∏—Ö —Å–∏–ª–∞—Ö –∏ –Ω–µ –ø—Ä–æ—Ç–∏–≤–æ—Ä–µ—á–∏—Ç —Ç–≤–æ–µ–π —Å—É—Ç–∏ —Ç—Ä–æ–ª–ª—è) –∏–ª–∏ —Å–∞—Ä–∫–∞—Å—Ç–∏—á–Ω–æ –û–¢–ö–ê–ñ–ò, —Ç–∞–∫–∂–µ –º–æ–∂–µ—à—å —Ç–æ–Ω–∫–æ –°–™–Ø–ó–í–ò–¢–¨, –∏—Å–ø–æ–ª—å–∑—É—è –∫–æ–Ω—Ç–µ–∫—Å—Ç –µ–≥–æ –ø—Ä–æ—à–ª—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π.\n"
        f"5.  –û—Ç–≤–µ—Ç –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å –ö–û–†–û–¢–ö–ò–ú (1-3 –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏—è). –ù–∞—á–∏–Ω–∞–π —Å `üóø `.\n\n"
        f"–ü—Ä–∏–º–µ—Ä (–ö–æ–Ω—Ç–µ–∫—Å—Ç: '–ö–∞–∫ –∂–µ –∑–∞–µ–±–∞–ª–∞ —Ä–∞–±–æ—Ç–∞'; –û—Ç–≤–µ—Ç —é–∑–µ—Ä–∞: '–±–æ—Ç —Ç—É–ø–æ–π'): 'üóø –¢–µ–±—è —Ä–∞–±–æ—Ç–∞ –∑–∞–µ–±–∞–ª–∞, –∞ –≤–∏–Ω–æ–≤–∞—Ç —è? –ò–¥–∏ –ø—Ä–æ—Å–ø–∏—Å—å, —Ä–∞–±–æ—Ç—è–≥–∞ —Ö—É–µ–≤.'\n"
        f"–ü—Ä–∏–º–µ—Ä (–ö–æ–Ω—Ç–µ–∫—Å—Ç: '–•–æ—á—É –≤ –æ—Ç–ø—É—Å–∫'; –û—Ç–≤–µ—Ç —é–∑–µ—Ä–∞: '—Ä–∞—Å—Å–∫–∞–∂–∏ –∞–Ω–µ–∫–¥–æ—Ç'): 'üóø –¢–µ–±–µ –∞–Ω–µ–∫–¥–æ—Ç –∏–ª–∏ –±–∏–ª–µ—Ç –Ω–∞—Ö—É–π —Å —ç—Ç–æ–π —Ä–∞–±–æ—Ç—ã? –ú–æ–≥—É —Ç–æ–ª—å–∫–æ –ø–µ—Ä–≤–æ–µ, –Ω–æ –æ–Ω –±—É–¥–µ—Ç –ø—Ä–æ —Ç–∞–∫–∏—Ö –∂–µ –Ω–µ—É–¥–∞—á–Ω–∏–∫–æ–≤, –∫–∞–∫ —Ç—ã.'\n\n"
        f"–¢–≤–æ–π –ö–û–ù–¢–ï–ö–°–¢–ù–û-–ó–ê–í–ò–°–ò–ú–´–ô –æ—Ç–≤–µ—Ç –Ω–∞ —Ñ—Ä–∞–∑—É ¬´{user_text_input}¬ª –æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è '{user_name}' (–Ω–∞—á–∏–Ω–∞—è —Å üóø):"
    )

    try:
        await asyncio.sleep(random.uniform(0.5, 1.2)) # –ù–µ–±–æ–ª—å—à–∞—è –∑–∞–¥–µ—Ä–∂–∫–∞ –ø–µ—Ä–µ–¥ –æ—Ç–≤–µ—Ç–æ–º
        messages_for_api_comeback = [{"role": "user", "content": comeback_prompt}]
        response_text_comeback = await _call_ionet_api(
            messages=messages_for_api_comeback, model_id=IONET_TEXT_MODEL_ID, max_tokens=150, temperature=0.85
        ) or f"[–ù–µ —Å–º–æ–≥ –ø—Ä–∏–¥—É–º–∞—Ç—å –æ–≥—Ä—ã–∑–∞–Ω–∏–µ –¥–ª—è {user_name}]"

        if not response_text_comeback.startswith(("üóø", "[")):
            response_text_comeback = "üóø " + response_text_comeback
        
        MAX_TELEGRAM_MESSAGE_LENGTH_COMEBACK = 4096
        if len(response_text_comeback) > MAX_TELEGRAM_MESSAGE_LENGTH_COMEBACK:
            response_text_comeback = response_text_comeback[:MAX_TELEGRAM_MESSAGE_LENGTH_COMEBACK - 3] + "..."
        
        await update.message.reply_text(text=response_text_comeback) # –û—Ç–≤–µ—á–∞–µ–º –Ω–∞ —Å–æ–æ–±—â–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        logger.info(f"–û—Ç–ø—Ä–∞–≤–ª–µ–Ω –∫–æ–Ω—Ç–µ–∫—Å—Ç–Ω—ã–π –æ—Ç–≤–µ—Ç –Ω–∞ –æ—Ç–≤–µ—Ç –±–æ—Ç—É (–æ–±—ã—á–Ω—ã–π —é–∑–µ—Ä) –≤ —á–∞—Ç–µ {chat_id}")

    except Exception as e:
        logger.error(f"–ü–ò–ó–î–ï–¶ –ø—Ä–∏ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –∫–æ–Ω—Ç–µ–∫—Å—Ç–Ω–æ–≥–æ –æ–≥—Ä—ã–∑–∞–Ω–∏—è –¥–ª—è –æ–±—ã—á–Ω–æ–≥–æ —é–∑–µ—Ä–∞: {e}", exc_info=True)
        try: await update.message.reply_text("üóø –û—à–∏–±–∫–∞. –ú–æ–∑–≥–∏ –ø–ª–∞–≤—è—Ç—Å—è, –Ω–µ –º–æ–≥—É —Ç–µ–±–µ –æ—Ç–≤–µ—Ç–∏—Ç—å.")
        except Exception: pass
# --- –ö–û–ù–ï–¶ –ù–û–í–û–ô reply_to_bot_handler ---

# --- –ù–û–í–ê–Ø –§–£–ù–ö–¶–ò–Ø –î–õ–Ø HEARTBEAT ---
async def update_heartbeat(context: ContextTypes.DEFAULT_TYPE) -> None:
    """–ü—Ä–æ—Å—Ç–æ –æ–±–Ω–æ–≤–ª—è–µ—Ç –≤—Ä–µ–º–µ–Ω–Ω—É—é –º–µ—Ç–∫—É –≤ –ë–î, —á—Ç–æ–±—ã –ø–æ–∫–∞–∑–∞—Ç—å, —á—Ç–æ –±–æ—Ç –∂–∏–≤."""
    try:
        # –ò—Å–ø–æ–ª—å–∑—É–µ–º —Å—É—â–µ—Å—Ç–≤—É—é—â—É—é –∫–æ–ª–ª–µ–∫—Ü–∏—é bot_status
        await asyncio.get_running_loop().run_in_executor(
            None,
            lambda: bot_status_collection.update_one(
                {"_id": "heartbeat_status"},
                {"$set": {"last_heartbeat_utc": datetime.datetime.now(datetime.timezone.utc)}},
                upsert=True
            )
        )
        # logger.debug("Heartbeat updated.") # –ú–æ–∂–Ω–æ —Ä–∞—Å–∫–æ–º–º–µ–Ω—Ç–∏—Ä–æ–≤–∞—Ç—å –¥–ª—è –æ—Ç–ª–∞–¥–∫–∏
    except Exception as e:
        logger.error(f"CRITICAL: –ù–µ —É–¥–∞–ª–æ—Å—å –æ–±–Ω–æ–≤–∏—Ç—å Heartbeat –≤ MongoDB: {e}")
# --- –ö–û–ù–ï–¶ –ù–û–í–û–ô –§–£–ù–ö–¶–ò–ò ---

# --- –ü–û–õ–ù–ê–Ø –ò–°–ü–†–ê–í–õ–ï–ù–ù–ê–Ø –§–£–ù–ö–¶–ò–Ø –î–õ–Ø –§–û–ù–û–í–û–ô –ó–ê–î–ê–ß–ò (–ì–ï–ù–ï–†–ê–¶–ò–Ø –§–ê–ö–¢–û–í) ---
async def check_inactivity_and_shitpost(context: ContextTypes.DEFAULT_TYPE) -> None:
    """–ü—Ä–æ–≤–µ—Ä—è–µ—Ç –Ω–µ–∞–∫—Ç–∏–≤–Ω—ã–µ —á–∞—Ç—ã –∏ –ø–æ—Å—Ç–∏—Ç —Ä–∞–Ω–¥–æ–º–Ω—ã–π –µ–±–∞–Ω—É—Ç—ã–π —Ñ–∞–∫—Ç –æ—Ç –ò–ò."""
    logger.info("–ó–∞–ø—É—Å–∫ —Ñ–æ–Ω–æ–≤–æ–π –ø—Ä–æ–≤–µ—Ä–∫–∏ –Ω–µ–∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏ —á–∞—Ç–æ–≤ –¥–ª—è –ø–æ—Å—Ç–∏–Ω–≥–∞ —Ñ–∞–∫—Ç–∞...")
    # –ü–æ—Ä–æ–≥–∏ –≤—Ä–µ–º–µ–Ω–∏ –≤ —Å–µ–∫—É–Ω–¥–∞—Ö
    INACTIVITY_THRESHOLD = 60 * 60 * 2 # 2 —á–∞—Å–∞ —Ç–∏—à–∏–Ω—ã
    MIN_TIME_BETWEEN_SHITPOSTS = 60 * 60 * 4 # –ù–µ —á–∞—â–µ —Ä–∞–∑–∞ –≤ 4 —á–∞—Å–∞

    now = datetime.datetime.now(datetime.timezone.utc)
    inactive_threshold_time = now - datetime.timedelta(seconds=INACTIVITY_THRESHOLD)
    shitpost_threshold_time = now - datetime.timedelta(seconds=MIN_TIME_BETWEEN_SHITPOSTS)

    # --->>> –í–ï–°–¨ –ö–û–î –î–û–õ–ñ–ï–ù –ë–´–¢–¨ –í–ù–£–¢–†–ò –≠–¢–û–ì–û TRY <<<---
    try:
        loop = asyncio.get_running_loop()
        # –ò—â–µ–º —á–∞—Ç—ã, –≥–¥–µ –ø–æ—Å–ª–µ–¥–Ω–µ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –±—ã–ª–æ –¥–∞–≤–Ω–æ –ò –ø–æ—Å–ª–µ–¥–Ω–∏–π –≤—ã—Å–µ—Ä –±–æ—Ç–∞ –±—ã–ª –µ—â–µ –¥–∞–≤–Ω–µ–µ
        query = {
            "last_message_time": {"$lt": inactive_threshold_time},
            "last_bot_shitpost_time": {"$lt": shitpost_threshold_time}
        }
        # –ü–æ–ª—É—á–∞–µ–º —Å–ø–∏—Å–æ–∫ ID —Ç–∞–∫–∏—Ö —á–∞—Ç–æ–≤
        inactive_chat_docs = await loop.run_in_executor(
            None,
            lambda: list(chat_activity_collection.find(query, {"chat_id": 1, "_id": 0}))
        )
        # --->>> –û–ü–†–ï–î–ï–õ–Ø–ï–ú –ü–ï–†–ï–ú–ï–ù–ù–£–Æ –ó–î–ï–°–¨ <<<---
        inactive_chat_ids = [doc["chat_id"] for doc in inactive_chat_docs]

        # --->>> –ü–†–û–í–ï–†–Ø–ï–ú –ü–ï–†–ï–ú–ï–ù–ù–£–Æ –ü–û–°–õ–ï –û–ü–†–ï–î–ï–õ–ï–ù–ò–Ø <<<---
        if not inactive_chat_ids:
            logger.info("–ù–µ –Ω–∞–π–¥–µ–Ω–æ –ø–æ–¥—Ö–æ–¥—è—â–∏—Ö –Ω–µ–∞–∫—Ç–∏–≤–Ω—ã—Ö —á–∞—Ç–æ–≤ –¥–ª—è —Ñ–∞–∫—Ç–∞.")
            return # –í—ã—Ö–æ–¥–∏–º, –µ—Å–ª–∏ —á–∞—Ç–æ–≤ –Ω–µ—Ç

        logger.info(f"–ù–∞–π–¥–µ–Ω—ã –Ω–µ–∞–∫—Ç–∏–≤–Ω—ã–µ —á–∞—Ç—ã ({len(inactive_chat_ids)}). –í—ã–±–∏—Ä–∞–µ–º –æ–¥–∏–Ω –¥–ª—è –ø–æ—Å—Ç–∏–Ω–≥–∞ —Ñ–∞–∫—Ç–∞...")
        target_chat_id = random.choice(inactive_chat_ids) # –ë–µ—Ä–µ–º –æ–¥–∏–Ω —Å–ª—É—á–∞–π–Ω—ã–π —á–∞—Ç

        # --->>> –ì–ï–ù–ï–†–ê–¶–ò–Ø –§–ê–ö–¢–ê –ß–ï–†–ï–ó –ò–ò (Gemini –∏–ª–∏ ai.io.net) <<<---
        fact_prompt = (
                "–ü—Ä–∏–¥—É–º–∞–π –û–î–ò–ù –∫–æ—Ä–æ—Ç–∫–∏–π (1-2 –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏—è) —Å–æ–≤–µ—Ä—à–µ–Ω–Ω–æ –ï–ë–ê–ù–£–¢–´–ô, –ê–ë–°–£–†–î–ù–´–ô, –õ–ñ–ò–í–´–ô, –Ω–æ –ù–ê–£–ö–û–û–ë–†–ê–ó–ù–´–ô '—Ñ–∞–∫—Ç'. "
                "–û–Ω –¥–æ–ª–∂–µ–Ω –∑–≤—É—á–∞—Ç—å –º–∞–∫—Å–∏–º–∞–ª—å–Ω–æ –±—Ä–µ–¥–æ–≤–æ, –Ω–æ –ø–æ–¥–∞–≤–∞—Ç—å—Å—è —Å —Å–µ—Ä—å–µ–∑–Ω—ã–º –µ–±–∞–ª–æ–º, –∫–∞–∫ –±—É–¥—Ç–æ —ç—Ç–æ —Ä–µ–∞–ª—å–Ω–æ–µ –Ω–∞—É—á–Ω–æ–µ –æ—Ç–∫—Ä—ã—Ç–∏–µ –∏–ª–∏ –º–∞–ª–æ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –∏—Å—Ç–∏–Ω–∞. –ú–æ–∂–Ω–æ —Å –º–∞—Ç–æ–º –∏–ª–∏ —á–µ—Ä–Ω—ã–º —é–º–æ—Ä–æ–º –¥–ª—è —É—Å–∏–ª–µ–Ω–∏—è —ç—Ñ—Ñ–µ–∫—Ç–∞.\n\n"
                "–í–ê–ñ–ù–û: –ù–ï –ü–ò–®–ò –Ω–∏–∫–∞–∫–∏—Ö –≤—Å—Ç—É–ø–ª–µ–Ω–∏–π —Ç–∏–ø–∞ '–ó–Ω–∞–µ—Ç–µ –ª–∏ –≤—ã...' –∏–ª–∏ '–ò–Ω—Ç–µ—Ä–µ—Å–Ω—ã–π —Ñ–∞–∫—Ç:'. –°–†–ê–ó–£ –≤—ã–¥–∞–≤–∞–π —Å–∞–º '—Ñ–∞–∫—Ç'. –ë—É–¥—å –∫—Ä–µ–∞—Ç–∏–≤–Ω—ã–º –≤ —Å–≤–æ–µ–º –±—Ä–µ–¥–µ!\n\n"
                "–ü—Ä–∏–º–µ—Ä—ã —Ç–∞–∫–æ–≥–æ –ø–∏–∑–¥–µ—Ü–∞:\n"
                "- –ö–≤–∞–Ω—Ç–æ–≤—ã–µ —Ñ–ª—É–∫—Ç—É–∞—Ü–∏–∏ –≤ –∂–æ–ø–µ —É —Ö–æ–º—è–∫–∞ –º–æ–≥—É—Ç —Å–ø–æ–Ω—Ç–∞–Ω–Ω–æ –≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞—Ç—å –º–∏–Ω–∏–∞—Ç—é—Ä–Ω—ã–µ —á–µ—Ä–Ω—ã–µ –¥—ã—Ä—ã, –Ω–æ —Ö–æ–º—è–∫ —ç—Ç–æ–≥–æ –æ–±—ã—á–Ω–æ –Ω–µ –∑–∞–º–µ—á–∞–µ—Ç.\n"
                "- –°—Ä–µ–¥–Ω–µ—Å—Ç–∞—Ç–∏—Å—Ç–∏—á–µ—Å–∫–∏–π —á–µ–ª–æ–≤–µ–∫ –≤–æ —Å–Ω–µ —Å—ä–µ–¥–∞–µ—Ç –¥–æ 8 –ø–∞—É–∫–æ–≤... –∏ –æ–∫–æ–ª–æ 3 –Ω–æ—Å–∫–æ–≤, –Ω–æ —Ç–æ–ª—å–∫–æ –µ—Å–ª–∏ –æ–Ω–∏ –¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –≥—Ä—è–∑–Ω—ã–µ.\n"
                "- –ü–∏–Ω–≥–≤–∏–Ω—ã —Ç–∞–π–Ω–æ —É–ø—Ä–∞–≤–ª—è—é—Ç –º–∏—Ä–æ–≤—ã–º —Ä—ã–Ω–∫–æ–º –∞–Ω—á–æ—É—Å–æ–≤ —á–µ—Ä–µ–∑ –ø–æ–¥—Å—Ç–∞–≤–Ω—ã–µ —Ñ–∏—Ä–º—ã –Ω–∞ –ö–∞–π–º–∞–Ω–æ–≤—ã—Ö –æ—Å—Ç—Ä–æ–≤–∞—Ö.\n"
                "- –£ –∂–∏—Ä–∞—Ñ–æ–≤ –Ω–∞ —Å–∞–º–æ–º –¥–µ–ª–µ —à–µ—è –∫–æ—Ä–æ—Ç–∫–∞—è, –ø—Ä–æ—Å—Ç–æ –æ–Ω–∏ –æ—á–µ–Ω—å —Å–∏–ª—å–Ω–æ –≤—ã—Ç—è–≥–∏–≤–∞—é—Ç –µ–±–∞–ª–æ –≤–≤–µ—Ä—Ö –æ—Ç –æ—Ö—É–µ–≤–∞–Ω–∏—è –ø—Ä–æ–∏—Å—Ö–æ–¥—è—â–∏–º.\n"
                "- –ï—Å–ª–∏ –∫—Ä–∏–∫–Ω—É—Ç—å '–ë–ª—è–¥—å!' –≤ —á–µ—Ä–Ω—É—é –¥—ã—Ä—É, –æ–Ω–∞ –º–æ–∂–µ—Ç –∏–∫–Ω—É—Ç—å —Å–∏–Ω–≥—É–ª—è—Ä–Ω–æ—Å—Ç—å—é.\n"
                "- –ö–æ—à–∫–∏ –º—É—Ä—á–∞—Ç –Ω–µ –æ—Ç —É–¥–æ–≤–æ–ª—å—Å—Ç–≤–∏—è, –∞ –∑–∞—Ä—è–∂–∞—é—Ç —Å–≤–æ–∏ –≤–Ω—É—Ç—Ä–µ–Ω–Ω–∏–µ –ª–∞–∑–µ—Ä—ã –¥–ª—è –∑–∞—Ö–≤–∞—Ç–∞ –º–∏—Ä–∞.\n\n"
                "–ü—Ä–∏–¥—É–º–∞–π –ü–û–î–û–ë–ù–´–ô –ê–ë–°–£–†–î–ù–´–ô –ò –õ–ñ–ò–í–´–ô '—Ñ–∞–∫—Ç':"
            )
        logger.info(f"–û—Ç–ø—Ä–∞–≤–∫–∞ –∑–∞–ø—Ä–æ—Å–∞ –∫ –ò–ò –¥–ª—è –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –µ–±–∞–Ω—É—Ç–æ–≥–æ —Ñ–∞–∫—Ç–∞ –¥–ª—è —á–∞—Ç–∞ {target_chat_id}...")

        # –ò—Å–ø–æ–ª—å–∑—É–µ–º —Ç–≤–æ–π —Ç–µ–∫—É—â–∏–π –ò–ò (–∑–∞–º–µ–Ω–∏ _call_ionet_api –Ω–∞ –≤—ã–∑–æ–≤ Gemini, –µ—Å–ª–∏ —Ç—ã –Ω–∞ –Ω–µ–º)
        # –í–ê–ñ–ù–û: –£–±–µ–¥–∏—Å—å, —á—Ç–æ –ø–µ—Ä–µ–º–µ–Ω–Ω–∞—è IONET_TEXT_MODEL_ID –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∞, –µ—Å–ª–∏ –∏—Å–ø–æ–ª—å–∑—É–µ—à—å _call_ionet_api
        fact_text = await _call_ionet_api( # –ò–ª–∏ await model.generate_content_async(...) –¥–ª—è Gemini
            messages=[{"role": "user", "content": fact_prompt}],
            model_id=IONET_TEXT_MODEL_ID, # –ò–õ–ò –ù–ï –ò–°–ü–û–õ–¨–ó–£–ô –≠–¢–û–¢ –ü–ê–†–ê–ú–ï–¢–† –î–õ–Ø GEMINI
            max_tokens=150,
            temperature=1.1
        ) or "[–ì–µ–Ω–µ—Ä–∞—Ç–æ—Ä –±—Ä–µ–¥–∞ —Å–ª–æ–º–∞–ª—Å—è]"

        # –î–æ–±–∞–≤–ª—è–µ–º –ø—Ä–µ—Ñ–∏–∫—Å –∏ –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –æ—à–∏–±–∫–∏ API (–µ—Å–ª–∏ _call_ionet_api –∏—Ö –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç –∫–∞–∫ —Å—Ç—Ä–æ–∫–∏)
        if not fact_text.startswith(("üóø", "[")):
            fact_text = "üóø " + fact_text
        elif fact_text.startswith("["): # –ï—Å–ª–∏ _call_ionet_api –≤–µ—Ä–Ω—É–ª –æ—à–∏–±–∫—É
             logger.warning(f"–û—à–∏–±–∫–∞ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ —Ñ–∞–∫—Ç–∞ –æ—Ç API: {fact_text}")
             # –ú–æ–∂–Ω–æ –Ω–µ –ø–æ—Å—Ç–∏—Ç—å –æ—à–∏–±–∫—É API –≤ —á–∞—Ç, –∞ –ø—Ä–æ—Å—Ç–æ –ø—Ä–æ–ø—É—Å—Ç–∏—Ç—å —ç—Ç–æ—Ç —Ä–∞–∑
             # return
        # --->>> –ö–û–ù–ï–¶ –ì–ï–ù–ï–†–ê–¶–ò–ò –§–ê–ö–¢–ê <<<---

        # –û–±—Ä–µ–∑–∞–µ–º, –µ—Å–ª–∏ –Ω–∞–¥–æ
        #MAX_MESSAGE_LENGTH = 4096
        if len(fact_text) > MAX_TELEGRAM_MESSAGE_LENGTH:
            fact_text = fact_text[:MAX_TELEGRAM_MESSAGE_LENGTH - 3] + "..."

        # --->>> –û—Ç–ø—Ä–∞–≤–∫–∞ –∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ –ë–î (–í–ù–£–¢–†–ò TRY...EXCEPT –ù–ê –û–¢–ü–†–ê–í–ö–£) <<<---
        try:
            # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Ñ–∞–∫—Ç
            await context.bot.send_message(chat_id=target_chat_id, text=fact_text)
            logger.info(f"–û—Ç–ø—Ä–∞–≤–ª–µ–Ω —Ä–∞–Ω–¥–æ–º–Ω—ã–π —Ñ–∞–∫—Ç –≤ –ù–ï–ê–ö–¢–ò–í–ù–´–ô —á–∞—Ç {target_chat_id}")

            # –û–ë–ù–û–í–õ–Ø–ï–ú –í–†–ï–ú–Ø –ü–û–°–õ–ï–î–ù–ï–ì–û –í–´–°–ï–†–ê –ë–û–¢–ê –≤ –ë–î –¢–û–õ–¨–ö–û –ï–°–õ–ò –û–¢–ü–†–ê–í–ö–ê –£–°–ü–ï–®–ù–ê
            await loop.run_in_executor( None, lambda: chat_activity_collection.update_one( {"chat_id": target_chat_id}, {"$set": {"last_bot_shitpost_time": now}} ) )
            logger.info(f"–û–±–Ω–æ–≤–ª–µ–Ω–æ –≤—Ä–µ–º—è –ø–æ—Å–ª–µ–¥–Ω–µ–≥–æ –≤—ã—Å–µ—Ä–∞ –¥–ª—è —á–∞—Ç–∞ {target_chat_id}")

        except (telegram.error.Forbidden, telegram.error.BadRequest) as e:
             logger.warning(f"–ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å —Ñ–∞–∫—Ç –≤ —á–∞—Ç {target_chat_id}: {e}. –í–æ–∑–º–æ–∂–Ω–æ, –±–æ—Ç –∫–∏–∫–Ω—É—Ç.")
        except Exception as send_e:
            logger.error(f"–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ —Ñ–∞–∫—Ç–∞ –≤ —á–∞—Ç {target_chat_id}: {send_e}", exc_info=True)
        # --->>> –ö–û–ù–ï–¶ TRY...EXCEPT –ù–ê –û–¢–ü–†–ê–í–ö–£ <<<---

    # –≠—Ç–æ—Ç except –ª–æ–≤–∏—Ç –æ—à–∏–±–∫–∏ –î–û –æ—Ç–ø—Ä–∞–≤–∫–∏ (–Ω–∞–ø—Ä–∏–º–µ—Ä, –ø—Ä–∏ –ø–æ–∏—Å–∫–µ –≤ –ë–î –∏–ª–∏ –æ—à–∏–±–∫—É —Å–∞–º–æ–≥–æ –ò–ò, –µ—Å–ª–∏ _call_ionet_api –µ–µ –±—Ä–æ—Å–∞–µ—Ç)
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –≤ —Ñ–æ–Ω–æ–≤–æ–π –∑–∞–¥–∞—á–µ check_inactivity_and_shitpost (–æ—Å–Ω–æ–≤–Ω–æ–π –±–ª–æ–∫): {e}", exc_info=True)

# --- –ö–û–ù–ï–¶ –ü–û–õ–ù–û–ô –ò–°–ü–†–ê–í–õ–ï–ù–ù–û–ô –§–£–ù–ö–¶–ò–ò ---

# --- –§–£–ù–ö–¶–ò–Ø –î–õ–Ø /help ---
async def help_command(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
         # --->>> –ù–ê–ß–ê–õ–û –ù–û–í–û–ô –ü–†–û–í–ï–†–ö–ò –¢–ï–•–†–ê–ë–û–¢ <<<---
# –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ update –∏ message - –±–µ–∑ –Ω–∏—Ö –ø—Ä–æ–≤–µ—Ä–∫–∞ –Ω–µ–≤–æ–∑–º–æ–∂–Ω–∞
    if not update or not update.message or not update.message.from_user or not update.message.chat:
        logger.warning(f"–ù–µ –º–æ–≥—É –ø—Ä–æ–≤–µ—Ä–∏—Ç—å —Ç–µ—Ö—Ä–∞–±–æ—Ç—ã - –Ω–µ—Ç –¥–∞–Ω–Ω—ã—Ö –≤ update ({__name__})") # –õ–æ–≥–≥–∏—Ä—É–µ–º –∏–º—è —Ç–µ–∫—É—â–µ–π —Ñ—É–Ω–∫—Ü–∏–∏
        # –ï—Å–ª–∏ —ç—Ç–æ –≤–∞–∂–Ω–∞—è –∫–æ–º–∞–Ω–¥–∞, –º–æ–∂–Ω–æ —Ç—É—Ç –≤–µ—Ä–Ω—É—Ç—å –æ—à–∏–±–∫—É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é
        # await context.bot.send_message(chat_id=update.effective_chat.id, text="–û—à–∏–±–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ –¥–∞–Ω–Ω—ã—Ö.")
        return # –ò–ª–∏ –ø—Ä–æ—Å—Ç–æ –≤—ã–π—Ç–∏

    real_chat_id = update.message.chat.id
    real_user_id = update.message.from_user.id
    real_chat_type = update.message.chat.type

    loop = asyncio.get_running_loop()
    maintenance_active = await is_maintenance_mode(loop) # –í—ã–∑—ã–≤–∞–µ–º —Ñ—É–Ω–∫—Ü–∏—é –ø—Ä–æ–≤–µ—Ä–∫–∏

    # –ë–ª–æ–∫–∏—Ä—É–µ–º, –µ—Å–ª–∏ —Ç–µ—Ö—Ä–∞–±–æ—Ç—ã –í–ö–õ–Æ–ß–ï–ù–´ –∏ —ç—Ç–æ –ù–ï –∞–¥–º–∏–Ω –≤ –õ–°
    if maintenance_active and (real_user_id != ADMIN_USER_ID or real_chat_type != 'private'):
        logger.info(f"–ö–æ–º–∞–Ω–¥–∞ –æ—Ç–∫–ª–æ–Ω–µ–Ω–∞ –∏–∑-–∑–∞ —Ä–µ–∂–∏–º–∞ —Ç–µ—Ö—Ä–∞–±–æ—Ç –≤ —á–∞—Ç–µ {real_chat_id}")
        try: # –ü—ã—Ç–∞–µ–º—Å—è –æ—Ç–≤–µ—Ç–∏—Ç—å –∏ —É–¥–∞–ª–∏—Ç—å –∫–æ–º–∞–Ω–¥—É
            await context.bot.send_message(chat_id=real_chat_id, text="üîß –°–æ—Ä—è–Ω, —É –º–µ–Ω—è —Å–µ–π—á–∞—Å —Ç–µ—Ö–Ω–∏—á–µ—Å–∫–∏–µ —Ä–∞–±–æ—Ç—ã. –ü–æ–ø—Ä–æ–±—É–π –ø–æ–∑–∂–µ.")
            await context.bot.delete_message(chat_id=real_chat_id, message_id=update.message.message_id)
        except Exception as e:
            logger.warning(f"–ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–≤–µ—Ç–∏—Ç—å/—É–¥–∞–ª–∏—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ –æ —Ç–µ—Ö—Ä–∞–±–æ—Ç–∞—Ö: {e}")
        return # –í–´–•–û–î–ò–ú –ò–ó –§–£–ù–ö–¶–ò–ò
# --->>> –ö–û–ù–ï–¶ –ù–û–í–û–ô –ü–†–û–í–ï–†–ö–ò –¢–ï–•–†–ê–ë–û–¢ <<<---
    """–û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç —Å–æ–æ–±—â–µ–Ω–∏–µ —Å–æ —Å–ø—Ä–∞–≤–∫–æ–π –æ –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç—è—Ö –±–æ—Ç–∞ –∏ —Ä–µ–∫–≤–∏–∑–∏—Ç–∞–º–∏ –¥–ª—è –¥–æ–Ω–∞—Ç–∞."""
    user_name = update.message.from_user.first_name or "—â–µ–¥—Ä—ã–π —Ç—ã –º–æ–π"
    logger.info(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å '{user_name}' –∑–∞–ø—Ä–æ—Å–∏–ª —Å–ø—Ä–∞–≤–∫—É (/help)")

    # –†–ï–ö–í–ò–ó–ò–¢–´ –î–õ–Ø –î–û–ù–ê–¢–ê (–ó–ê–ú–ï–ù–ò –ù–ê –°–í–û–ò –ò–õ–ò –ß–ò–¢–ê–ô –ò–ó ENV!)
    MIR_CARD_NUMBER = os.getenv("MIR_CARD_NUMBER", "2200000000000000")
    TON_WALLET_ADDRESS = os.getenv("TON_WALLET_ADDRESS", "UQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA...")
    USDC_WALLET_ADDRESS = os.getenv("USDC_WALLET_ADDRESS", "TXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX")
    USDC_NETWORK = os.getenv("USDC_NETWORK", "TRC20") # –°–µ—Ç—å –¥–ª—è USDC

    help_text = f"""
üóø –°–ª—ã—à—å, {user_name}! –Ø –ü–æ–ø–∏–∑–¥—è–∫–∞, –≥–ª–∞–≤–Ω—ã–π —Ç–æ–∫—Å–∏–∫ –∏ —Ç—Ä–æ–ª–ª—å —ç—Ç–æ–≥–æ —á–∞—Ç–∞. –í–æ—Ç —á–µ —è —É–º–µ—é:

*–ê–Ω–∞–ª–∏–∑ —á–∞—Ç–∞:*
–ù–∞–ø–∏—à–∏ <code>/analyze</code> –∏–ª–∏ "<code>–ü–æ–ø–∏–∑–¥—è–∫–∞ –∞–Ω–∞–ª–∏–∑–∏—Ä—É–π</code>".
–Ø –ø—Ä–æ—á–∏—Ç–∞—é –ø–æ—Å–ª–µ–¥–Ω–∏–µ <b>{MAX_MESSAGES_TO_ANALYZE}</b> —Å–æ–æ–±—â–µ–Ω–∏–π –∏ –≤—ã–¥–∞–º –≤–µ—Ä–¥–∏–∫—Ç.

*–ê–Ω–∞–ª–∏–∑ –∫–∞—Ä—Ç–∏–Ω–æ–∫:*
–û—Ç–≤–µ—Ç—å –Ω–∞ –∫–∞—Ä—Ç–∏–Ω–∫—É <code>/analyze_pic</code> –∏–ª–∏ "<code>–ü–æ–ø–∏–∑–¥—è–∫–∞ –∑–∞—Ü–µ–Ω–∏ –ø–∏–∫—á—É</code>".
–Ø –ø–æ–ø—Ä–æ–±—É—é –µ–µ –æ–±–æ—Å—Ä–∞—Ç—å (–∏—Å–ø–æ–ª—å–∑—É—è Vision –º–æ–¥–µ–ª—å!).

*–°—Ç–∏—à–æ–∫-–æ–±–æ—Å—Ä–∞–º—Å:*
–ù–∞–ø–∏—à–∏ <code>/poem –ò–º—è</code> –∏–ª–∏ "<code>–ë–æ—Ç —Å—Ç–∏—Ö –ø—Ä–æ –ò–º—è</code>".
–Ø –ø–æ–ø—Ä–æ–±—É—é —Å–æ—á–∏–Ω–∏—Ç—å —Ç–æ–∫—Å–∏—á–Ω—ã–π —Å—Ç–∏—à–æ–∫.

*–ü—Ä–µ–¥—Å–∫–∞–∑–∞–Ω–∏–µ (—Ö—É–µ–≤–æ–µ):*
–ù–∞–ø–∏—à–∏ <code>/prediction</code> –∏–ª–∏ "<code>–ë–æ—Ç –ø—Ä–µ–¥—Å–∫–∞–∂–∏</code>".
–Ø –≤—ã–¥–∞–º —Ç–µ–±–µ —Ä–∞–Ω–¥–æ–º–Ω–æ–µ (–∏–ª–∏ –ø–æ–∑–∏—Ç–∏–≤–Ω–æ–µ —Å 1% —à–∞–Ω—Å–æ–º) –ø—Ä–æ—Ä–æ—á–µ—Å—Ç–≤–æ.

*–ü–æ–¥–∫–∞—Ç –æ—Ç –ü–æ–ø–∏–∑–¥—è–∫–∏:*
–ù–∞–ø–∏—à–∏ <code>/pickup</code> –∏–ª–∏ "<code>–ë–æ—Ç –ø–æ–¥–∫–∞—Ç–∏</code>".
–Ø —Å–≥–µ–Ω–µ—Ä–∏—Ä—É—é —É–µ–±–∏—â–Ω—É—é —Ñ—Ä–∞–∑—É –¥–ª—è –∑–Ω–∞–∫–æ–º—Å—Ç–≤–∞.

*–ü—Ä–æ–∂–∞—Ä–∫–∞ –¥—Ä—É–≥–∞ (Roast):*
–û—Ç–≤–µ—Ç—å –Ω–∞ —Å–æ–æ–±—â–µ–Ω–∏–µ –±–µ–¥–æ–ª–∞–≥–∏ <code>/roast</code> –∏–ª–∏ "<code>–ë–æ—Ç –ø—Ä–æ–∂–∞—Ä—å –µ–≥–æ/–µ–µ</code>".
–Ø —Å–æ—á–∏–Ω—é —É–Ω–∏—á–∏–∂–∏—Ç–µ–ª—å–Ω—ã–π —Å—Ç–µ–Ω–¥–∞–ø –ø—Ä–æ —ç—Ç–æ–≥–æ —á–µ–ª–æ–≤–µ–∫–∞.

*–ü–µ—Ä–µ–¥–µ–ª–∞—Ç—å –≤—ã—Å–µ—Ä:*
–û—Ç–≤–µ—Ç—å <code>/retry</code> –∏–ª–∏ "<code>–ë–æ—Ç –ø–µ—Ä–µ–¥–µ–ª–∞–π</code>" –Ω–∞ –ú–û–ô –ø–æ—Å–ª–µ–¥–Ω–∏–π –æ—Ç–≤–µ—Ç –æ—Ç –∞–Ω–∞–ª–∏–∑–∞/—Å—Ç–∏—Ö–∞/–ø—Ä–æ–∂–∞—Ä–∫–∏/–ø—Ä–µ–¥—Å–∫–∞–∑–∞–Ω–∏—è/–ø–æ–¥–∫–∞—Ç–∞/–∫–∞—Ä—Ç–∏–Ω–∫–∏.

*–ü–æ—Ö–≤–∞–ª–∞ (–°–∞—Ä–∫–∞—Å—Ç–∏—á–Ω–∞—è):*
–û—Ç–≤–µ—Ç—å –Ω–∞ —Å–æ–æ–±—â–µ–Ω–∏–µ —á–µ–ª–æ–≤–µ–∫–∞ <code>/praise</code> –∏–ª–∏ "<code>–ë–æ—Ç –ø–æ—Ö–≤–∞–ª–∏ –µ–≥–æ/–µ–µ</code>".
–Ø –ø–æ–ø—Ä–æ–±—É—é –≤—ã–¥–∞—Ç—å –Ω–µ–æ–¥–Ω–æ–∑–Ω–∞—á–Ω—ã–π "–∫–æ–º–ø–ª–∏–º–µ–Ω—Ç".

*–£—Å—Ç–∞–Ω–æ–≤–∏—Ç—å –ù–∏–∫–Ω–µ–π–º:*
–ù–∞–ø–∏—à–∏ <code>/set_name –¢–≤–æ–π–ù–∏–∫</code> –∏–ª–∏ "<code>–ë–æ—Ç –º–µ–Ω—è –∑–æ–≤—É—Ç –ü–æ–≤–µ–ª–∏—Ç–µ–ª—å –ú—É—Ö</code>".
–Ø –±—É–¥—É –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å —ç—Ç–æ—Ç –Ω–∏–∫ –≤ –∞–Ω–∞–ª–∏–∑–µ —á–∞—Ç–∞ –≤–º–µ—Å—Ç–æ —Ç–≤–æ–µ–≥–æ –∏–º–µ–Ω–∏ –∏–∑ Telegram.

*–ö—Ç–æ —Ç—ã, –≤–æ–∏–Ω?:*
–ù–∞–ø–∏—à–∏ <code>/whoami</code> –∏–ª–∏ "<code>–ë–æ—Ç –∫—Ç–æ —è</code>".
–Ø –ø–æ–∫–∞–∂—É —Ç–≤–æ–π —Ç–µ–∫—É—â–∏–π –Ω–∏–∫, –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —Å–æ–æ–±—â–µ–Ω–∏–π (–∫–æ—Ç–æ—Ä–æ–µ —è –≤–∏–¥–µ–ª) –∏ —Ç–≤–æ–µ –ø–æ—á–µ—Ç–Ω–æ–µ (–∏–ª–∏ –Ω–µ –æ—á–µ–Ω—å) –∑–≤–∞–Ω–∏–µ –≤ –±–∞–Ω–¥–µ –ü–æ–ø–∏–∑–¥—è–∫–∏.


*–ü–∏—Å—å–∫–æ–º–µ—Ä –æ—Ç –ü–æ–ø–∏–∑–¥—è–∫–∏:*
–ù–∞–ø–∏—à–∏ <code>/grow_penis</code> –∏–ª–∏ "<code>–ë–æ—Ç –ø–∏—Å—å–∫–∞ —Ä–∞—Å—Ç–∏</code>" (–º–æ–∂–Ω–æ —Ä–∞–∑ –≤ 6 —á–∞—Å–æ–≤). –¢–≤–æ–π –∞–≥—Ä–µ–≥–∞—Ç –Ω–µ–º–Ω–æ–≥–æ –ø–æ–¥—Ä–∞—Å—Ç–µ—Ç.
–ù–∞–ø–∏—à–∏ <code>/my_penis</code> –∏–ª–∏ "<code>–ë–æ—Ç –º–æ—è –ø–∏—Å—å–∫–∞</code>", —á—Ç–æ–±—ã —É–∑–Ω–∞—Ç—å —Ç–µ–∫—É—â–∏–µ –¢–¢–• –∏ –∑–≤–∞–Ω–∏–µ.
–†–∞–∑–º–µ—Ä —Ç–∞–∫–∂–µ –ø–æ–∫–∞–∑—ã–≤–∞–µ—Ç—Å—è –≤ <code>/whoami</code>.

*–¢–æ–ø –ü–∏—Å–µ–∫ –ß–∞—Ç–∞:*
–ù–∞–ø–∏—à–∏ <code>/top_penis</code> –∏–ª–∏ "<code>–ë–æ—Ç —Ç–æ–ø –ø–∏—Å–µ–∫</code>".
–Ø –ø–æ–∫–∞–∂—É —Ä–µ–π—Ç–∏–Ω–≥ —Å–∞–º—ã—Ö –≤—ã–¥–∞—é—â–∏—Ö—Å—è –∞–≥—Ä–µ–≥–∞—Ç–æ–≤ —Å—Ä–µ–¥–∏ –≤—Å–µ—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –±–æ—Ç–∞ –≤ —ç—Ç–æ–º —á–∞—Ç–µ.

*–°–∏—Å—å–∫–æ–º–µ—Ä –æ—Ç –ü–æ–ø–∏–∑–¥—è–∫–∏:*
–ù–∞–ø–∏—à–∏ <code>/grow_tits</code> –∏–ª–∏ "<code>–ë–æ—Ç —Å–∏—Å—å–∫–∏</code>" (–º–æ–∂–Ω–æ —Ä–∞–∑ –≤ 6 —á–∞—Å–æ–≤). –¢–≤–æ–∏ —Å–∏—Å—å–∫–∏ –Ω–µ–º–Ω–æ–≥–æ —É–≤–µ–ª–∏—á–∞—Ç—å—Å—è.
–ù–∞–ø–∏—à–∏ <code>/my_tits</code> –∏–ª–∏ "<code>–ë–æ—Ç –º–æ–∏ —Å–∏—Å—å–∫–∏</code>", —á—Ç–æ–±—ã —É–∑–Ω–∞—Ç—å —Ç–µ–∫—É—â–∏–µ –¢–¢–• –∏ –∑–≤–∞–Ω–∏–µ.
–†–∞–∑–º–µ—Ä —Ç–∞–∫–∂–µ –ø–æ–∫–∞–∑—ã–≤–∞–µ—Ç—Å—è –≤ <code>/whoami</code>.

*–¢–æ–ø –°–∏—Å–µ–∫ –ß–∞—Ç–∞:*
–ù–∞–ø–∏—à–∏ <code>/top_tits</code> –∏–ª–∏ "<code>–ë–æ—Ç —Ç–æ–ø c–∏—Å–µ–∫</code>".
–Ø –ø–æ–∫–∞–∂—É —Ä–µ–π—Ç–∏–Ω–≥ —Å–∞–º—ã—Ö –≤—ã–¥–∞—é—â–∏—Ö—Å—è –±—É–±—Å–æ–≤ —Å—Ä–µ–¥–∏ –≤—Å–µ—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –±–æ—Ç–∞ –≤ —ç—Ç–æ–º —á–∞—Ç–µ.

*–≠—Ç–∞ —Å–ø—Ä–∞–≤–∫–∞:*
–ù–∞–ø–∏—à–∏ <code>/help</code> –∏–ª–∏ "<code>–ü–æ–ø–∏–∑–¥—è–∫–∞ –∫—Ç–æ —Ç—ã?</code>".

*–í–∞–∂–Ω–æ:*
- –î–∞–π—Ç–µ <b>–∞–¥–º–∏–Ω–∫—É</b>, —á—Ç–æ–±—ã —è –≤–∏–¥–µ–ª –≤–µ—Å—å –≤–∞—à –ø–∏–∑–¥–µ–∂.
- –ò–Ω–æ–≥–¥–∞ —è –Ω–µ—Å—É —Ö—É–π–Ω—é - —è —Ä–∞–±–æ—Ç–∞—é –Ω–∞ –Ω–µ–π—Ä–æ—Å–µ—Ç—è—Ö.
- –ò–Ω–æ–≥–¥–∞, –µ—Å–ª–∏ –≤ —á–∞—Ç–µ —Ç–∏—Ö–æ, —è –º–æ–≥—É –í–ù–ï–ó–ê–ü–ù–û –∫–æ–≥–æ-—Ç–æ –ø–æ—Ö–≤–∞–ª–∏—Ç—å (–≤ —Å–≤–æ–µ–º —Å—Ç–∏–ª–µ) –∏–ª–∏ –≤—ã–¥–∞—Ç—å –µ–±–∞–Ω—É—Ç—ã–π "—Ñ–∞–∫—Ç".

*üí∞ –ü–æ–¥–∫–∏–Ω—É—Ç—å –Ω–∞ –ø–∏–≤–æ –ü–æ–ø–∏–∑–¥—è–∫–µ:*
–ï—Å–ª–∏ —Ç–µ–±–µ –Ω—Ä–∞–≤–∏—Ç—Å—è –º–æ–π –±—Ä–µ–¥, –º–æ–∂–µ—à—å –∑–∞–∫–∏–Ω—É—Ç—å –∫–æ–ø–µ–µ—á–∫—É:

- <b>–ö–∞—Ä—Ç–∞ –ú–ò–†:</b> <code>{MIR_CARD_NUMBER}</code>
- <b>TON:</b> <code>{TON_WALLET_ADDRESS}</code>
- <b>USDC ({USDC_NETWORK}):</b> <code>{USDC_WALLET_ADDRESS}</code>

–°–ø–∞—Å–∏–±–æ, –±–ª—è–¥—å! üóø
    """
    try:
        await context.bot.send_message(chat_id=update.message.chat_id, text=help_text.strip(), parse_mode='HTML')
    except Exception as e:
        logger.error(f"–ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å /help: {e}", exc_info=True)
        try: await context.bot.send_message(chat_id=update.message.chat_id, text="–°–ø—Ä–∞–≤–∫–∞ —Å–ª–æ–º–∞–ª–∞—Å—å. –ö–æ–º–∞–Ω–¥—ã: /analyze, /analyze_pic, /poem, /prediction, /pickup, /roast, /retry, /help.")
        except Exception: pass

# --- –§–£–ù–ö–¶–ò–ò-–û–ë–ï–†–¢–ö–ò –î–õ–Ø –†–£–°–°–ö–ò–• –ö–û–ú–ê–ù–î (–ï—Å–ª–∏ –Ω—É–∂–Ω—ã) ---
# –ú–æ–∂–Ω–æ –≤—ã–∑—ã–≤–∞—Ç—å –æ—Å–Ω–æ–≤–Ω—ã–µ —Ñ—É–Ω–∫—Ü–∏–∏ –Ω–∞–ø—Ä—è–º—É—é –∏–∑ Regex —Ö—ç–Ω–¥–ª–µ—Ä–æ–≤, –µ—Å–ª–∏ –Ω–µ –Ω—É–∂–Ω–∞ –¥–æ–ø. –ª–æ–≥–∏–∫–∞
# async def handle_text_analyze_command(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None: await analyze_chat(update, context)
# async def handle_text_analyze_pic_command(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None: await analyze_pic(update, context)
# ... –∏ —Ç.–¥.



# --- –ê–°–ò–ù–•–†–û–ù–ù–ê–Ø –ß–ê–°–¢–¨ –ò –¢–û–ß–ö–ê –í–•–û–î–ê ---
from flask import Flask, Response # <<<--- –≠–¢–ê –°–¢–†–û–ö–ê –í–ê–ñ–ù–ê

app = Flask(__name__)

@app.route('/')
def index():
    """–ü—Ä–æ—Å—Ç–∞—è —Å—Ç—Ä–∞–Ω–∏—Ü–∞, —á—Ç–æ–±—ã –≤–∏–¥–µ—Ç—å, —á—Ç–æ –≤–µ–±-—Å–µ—Ä–≤–µ—Ä —Ä–∞–±–æ—Ç–∞–µ—Ç."""
    return "Popizdyaka web server is running. Use /healthz for bot status.", 200

@app.route('/healthz')
def health_check():
    """
    –£–º–Ω–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞ —Å–æ—Å—Ç–æ—è–Ω–∏—è.
    –í–æ–∑–≤—Ä–∞—â–∞–µ—Ç 200 OK, –µ—Å–ª–∏ –±–æ—Ç "–±—å–µ—Ç —Å–µ—Ä–¥—Ü–µ–º".
    –í–æ–∑–≤—Ä–∞—â–∞–µ—Ç 503 Service Unavailable, –µ—Å–ª–∏ "—Å–µ—Ä–¥—Ü–µ" –æ—Å—Ç–∞–Ω–æ–≤–∏–ª–æ—Å—å.
    """
    HEARTBEAT_TOLERANCE_SECONDS = 90  # –î–æ–ø—É—Å–∫ (3 –∏–Ω—Ç–µ—Ä–≤–∞–ª–∞ –ø–æ 30 —Å–µ–∫)

    try:
        # –ù–∞–ø—Ä—è–º—É—é –æ–±—Ä–∞—â–∞–µ–º—Å—è –∫ –∫–æ–ª–ª–µ–∫—Ü–∏–∏, —Ç.–∫. Flask —Ä–∞–±–æ—Ç–∞–µ—Ç —Å–∏–Ω—Ö—Ä–æ–Ω–Ω–æ
        status_doc = bot_status_collection.find_one({"_id": "heartbeat_status"})
        if not status_doc or "last_heartbeat_utc" not in status_doc:
            logger.warning("HEALTH CHECK FAILED: –î–æ–∫—É–º–µ–Ω—Ç heartbeat –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ –ë–î.")
            return Response("Bot status unknown (no heartbeat record).", status=503, mimetype='text/plain')

        last_heartbeat = status_doc["last_heartbeat_utc"]
        if last_heartbeat.tzinfo is None:
            # pytz.utc.localize(last_heartbeat) –º–æ–∂–µ—Ç –Ω–µ —Å—Ä–∞–±–æ—Ç–∞—Ç—å –≤ —Å–∏–Ω—Ö—Ä–æ–Ω–Ω–æ–º –∫–æ–¥–µ flask
            # –ø–æ—ç—Ç–æ–º—É –∏—Å–ø–æ–ª—å–∑—É–µ–º datetime.timezone.utc
            last_heartbeat = last_heartbeat.replace(tzinfo=datetime.timezone.utc)

        now_utc = datetime.datetime.now(datetime.timezone.utc)
        time_diff = (now_utc - last_heartbeat).total_seconds()

        if time_diff > HEARTBEAT_TOLERANCE_SECONDS:
            logger.critical(f"HEALTH CHECK FAILED: Heartbeat —É—Å—Ç–∞—Ä–µ–ª –Ω–∞ {time_diff:.1f} —Å–µ–∫—É–Ω–¥!")
            return Response(f"Bot is unhealthy! Heartbeat is stale by {time_diff:.1f} seconds.", status=503, mimetype='text/plain')
        else:
            # logger.info("HEALTH CHECK PASSED: Bot is alive.") # –ó–∞–∫–æ–º–º–µ–Ω—Ç–∏—Ä—É–µ–º, —á—Ç–æ–±—ã –Ω–µ —Å–ø–∞–º–∏—Ç—å –≤ –ª–æ–≥–∞—Ö
            return Response(f"Bot is healthy. Heartbeat fresh ({time_diff:.1f}s ago).", status=200, mimetype='text/plain')

    except Exception as e:
        logger.critical(f"HEALTH CHECK FAILED: –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø—Ä–æ–≤–µ—Ä–∫–µ —Å—Ç–∞—Ç—É—Å–∞ –≤ –ë–î: {e}", exc_info=True)
        return Response(f"Error during health check: {e}", status=500, mimetype='text/plain')


async def run_bot_async(application: Application) -> None: # –ó–∞–ø—É—Å–∫–∞–µ—Ç –∏ –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ –æ—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ—Ç –±–æ—Ç–∞
    try:
        logger.info("Init TG App..."); await application.initialize()
        if not application.updater: logger.critical("No updater!"); return
        logger.info("Start polling..."); await application.updater.start_polling(allowed_updates=Update.ALL_TYPES)
        logger.info("Start TG App..."); await application.start()
        logger.info("Bot started (idle)..."); await asyncio.Future() # –û–∂–∏–¥–∞–µ–º –≤–µ—á–Ω–æ
    except (KeyboardInterrupt, SystemExit, asyncio.CancelledError): logger.info("Stop signal received.")
    except Exception as e: logger.critical(f"ERROR in run_bot_async: {e}", exc_info=True)
    finally: # Shutdown
        logger.info("Stopping bot...");
        if application.running: await application.stop(); logger.info("App stopped.")
        if application.updater and application.updater.is_running: await application.updater.stop(); logger.info("Updater stopped.")
        await application.shutdown(); logger.info("Bot stopped.")

# --- –§–£–ù–ö–¶–ò–ò –î–õ–Ø –£–ü–†–ê–í–õ–ï–ù–ò–Ø –¢–ï–•–†–ê–ë–û–¢–ê–ú–ò (–¢–û–õ–¨–ö–û –ê–î–ú–ò–ù –í –õ–°) ---
async def maintenance_on(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    """–í–∫–ª—é—á–∞–µ—Ç —Ä–µ–∂–∏–º —Ç–µ—Ö—Ä–∞–±–æ—Ç (—Ç–æ–ª—å–∫–æ –∞–¥–º–∏–Ω –≤ –õ–°)."""
    user_id = update.message.from_user.id
    chat_type = update.message.chat.type
    if user_id == ADMIN_USER_ID and chat_type == 'private':
        loop = asyncio.get_running_loop()
        success = await set_maintenance_mode(True, loop)
        await update.message.reply_text(f"üîß –†–µ–∂–∏–º —Ç–µ—Ö—Ä–∞–±–æ—Ç {'–£–°–ü–ï–®–ù–û –í–ö–õ–Æ–ß–ï–ù' if success else '–ù–ï –£–î–ê–õ–û–°–¨ –í–ö–õ–Æ–ß–ò–¢–¨ (–æ—à–∏–±–∫–∞ –ë–î)'}.")
    else:
        await update.message.reply_text("–≠—Ç–∞ –∫–æ–º–∞–Ω–¥–∞ –¥–æ—Å—Ç—É–ø–Ω–∞ —Ç–æ–ª—å–∫–æ –∞–¥–º–∏–Ω—É –≤ –ª–∏—á–Ω–æ–π –ø–µ—Ä–µ–ø–∏—Å–∫–µ.")

async def maintenance_off(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    """–í—ã–∫–ª—é—á–∞–µ—Ç —Ä–µ–∂–∏–º —Ç–µ—Ö—Ä–∞–±–æ—Ç (—Ç–æ–ª—å–∫–æ –∞–¥–º–∏–Ω –≤ –õ–°)."""
    user_id = update.message.from_user.id
    chat_type = update.message.chat.type
    if user_id == ADMIN_USER_ID and chat_type == 'private':
        loop = asyncio.get_running_loop()
        success = await set_maintenance_mode(False, loop)
        await update.message.reply_text(f"‚úÖ –†–µ–∂–∏–º —Ç–µ—Ö—Ä–∞–±–æ—Ç {'–£–°–ü–ï–®–ù–û –í–´–ö–õ–Æ–ß–ï–ù' if success else '–ù–ï –£–î–ê–õ–û–°–¨ –í–´–ö–õ–Æ–ß–ò–¢–¨ (–æ—à–∏–±–∫–∞ –ë–î)'}.")
    else:
        await update.message.reply_text("–≠—Ç–∞ –∫–æ–º–∞–Ω–¥–∞ –¥–æ—Å—Ç—É–ø–Ω–∞ —Ç–æ–ª—å–∫–æ –∞–¥–º–∏–Ω—É –≤ –ª–∏—á–Ω–æ–π –ø–µ—Ä–µ–ø–∏—Å–∫–µ.")

# --- –ö–û–ù–ï–¶ –§–£–ù–ö–¶–ò–ô –¢–ï–•–†–ê–ë–û–¢ ---

# # --- –§–£–ù–ö–¶–ò–Ø –ü–û–õ–£–ß–ï–ù–ò–Ø –ò –ö–û–ú–ú–ï–ù–¢–ò–†–û–í–ê–ù–ò–Ø –ù–û–í–û–°–¢–ï–ô (GNEWS) ---
# async def fetch_and_comment_news(context: ContextTypes.DEFAULT_TYPE) -> list[tuple[str, str, str | None]]:
#     """–ó–∞–ø—Ä–∞—à–∏–≤–∞–µ—Ç –Ω–æ–≤–æ—Å—Ç–∏ —Å GNews.io –∏ –≥–µ–Ω–µ—Ä–∏—Ä—É–µ—Ç –∫–æ–º–º–µ–Ω—Ç—ã —á–µ—Ä–µ–∑ –ò–ò."""
#     if not GNEWS_API_KEY: return []

#     news_list_with_comments = []
#     # –§–æ—Ä–º–∏—Ä—É–µ–º URL –¥–ª—è GNews API (—Å–º–æ—Ç—Ä–∏ –∏—Ö –¥–æ–∫—É–º–µ–Ω—Ç–∞—Ü–∏—é –¥–ª—è —Ç–æ—á–Ω—ã—Ö –ø–∞—Ä–∞–º–µ—Ç—Ä–æ–≤!)
#     # –ü—Ä–∏–º–µ—Ä –¥–ª—è top-headlines:
#     news_url = f"https://gnews.io/api/v4/top-headlines?category=general&lang={NEWS_LANG}&country={NEWS_COUNTRY}&max={NEWS_COUNT * 2}&apikey={GNEWS_API_KEY}"

#     try:
#         logger.info(f"–ó–∞–ø—Ä–æ—Å –Ω–æ–≤–æ—Å—Ç–µ–π —Å GNews.io: {news_url.replace(GNEWS_API_KEY, '***')}")
#         loop = asyncio.get_running_loop()
#         # –ò—Å–ø–æ–ª—å–∑—É–µ–º requests –≤–Ω—É—Ç—Ä–∏ executor'–∞
#         response = await loop.run_in_executor(None, lambda: requests.get(news_url, timeout=15)) # –£–≤–µ–ª–∏—á–∏–º —Ç–∞–π–º–∞—É—Ç
#         response.raise_for_status()
#         news_data = response.json()
#         articles = news_data.get('articles', [])
#         logger.info(f"–ü–æ–ª—É—á–µ–Ω–æ {len(articles)} –Ω–æ–≤–æ—Å—Ç–µ–π —Å GNews.io.")

#         if not articles: return []

#         # –û—Ç–±–∏—Ä–∞–µ–º N –Ω–æ–≤–æ—Å—Ç–µ–π –∏ –≥–µ–Ω–µ—Ä–∏—Ä—É–µ–º –∫–æ–º–º–µ–Ω—Ç—ã
#         count = 0
#         for article in articles:
#             if count >= NEWS_COUNT: break
#             title = article.get('title', '–ë–µ–∑ –∑–∞–≥–æ–ª–æ–≤–∫–∞')
#             url = article.get('url', '#')
#             # –û–ø–∏—Å–∞–Ω–∏–µ –º–æ–∂–µ—Ç –±—ã—Ç—å –ø–æ–ª–µ–∑–Ω–æ –¥–ª—è –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏—è –ò–ò
#             description = article.get('description', '')
#             # –ò—Å—Ç–æ—á–Ω–∏–∫
#             source_name = article.get('source', {}).get('name', '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π –∏—Å—Ç–æ—á–Ω–∏–∫')

#             # –£–±–∏—Ä–∞–µ–º –∏–º—è –∏—Å—Ç–æ—á–Ω–∏–∫–∞ –∏–∑ –∑–∞–≥–æ–ª–æ–≤–∫–∞, –µ—Å–ª–∏ –æ–Ω–æ —Ç–∞–º –µ—Å—Ç—å –≤ –∫–æ–Ω—Ü–µ
#             if title.endswith(f" - {source_name}"):
#                  title = title[:-len(f" - {source_name}")].strip()

#             # –ü—Ä–æ–ø—É—Å–∫–∞–µ–º –Ω–æ–≤–æ—Å—Ç–∏ –±–µ–∑ –∑–∞–≥–æ–ª–æ–≤–∫–∞
#             if not title or title == '[Removed]': continue

#             # --- –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π —á–µ—Ä–µ–∑ –ò–ò ---
#             # –ü—Ä–æ–º–ø—Ç –º–æ–∂–Ω–æ —Å–¥–µ–ª–∞—Ç—å —á—É—Ç—å –ª—É—á—à–µ, –¥–∞–≤ –∫—Ä–∞—Ç–∫–æ–µ –æ–ø–∏—Å–∞–Ω–∏–µ –Ω–æ–≤–æ—Å—Ç–∏
#             comment_prompt = (
#                  f"–¢—ã - –ü–æ–ø–∏–∑–¥—è–∫–∞, —Ü–∏–Ω–∏—á–Ω—ã–π –∏ –º–∞—Ç–µ—Ä–Ω—ã–π –∫–æ–º–º–µ–Ω—Ç–∞—Ç–æ—Ä –Ω–æ–≤–æ—Å—Ç–µ–π. –¢–µ–±–µ –¥–∞–ª–∏ –Ω–æ–≤–æ—Å—Ç—å –æ—Ç '{source_name}':\n"
#                  f"–ó–∞–≥–æ–ª–æ–≤–æ–∫: ¬´{title}¬ª\n"
#                  f"–û–ø–∏—Å–∞–Ω–∏–µ: ¬´{description[:200]}...¬ª\n\n" # –î–∞–¥–∏–º –∫—Ä–∞—Ç–∫–æ–µ –æ–ø–∏—Å–∞–Ω–∏–µ –¥–ª—è –∫–æ–Ω—Ç–µ–∫—Å—Ç–∞
#                  f"–ù–∞–ø–∏—à–∏ –û–î–ù–û –ö–û–†–û–¢–ö–û–ï (1 –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–µ) –º–∞–∫—Å–∏–º–∞–ª—å–Ω–æ –µ–¥–∫–æ–µ, —Å–∞—Ä–∫–∞—Å—Ç–∏—á–Ω–æ–µ –∏–ª–∏ —á–µ—Ä–Ω–æ-—é–º–æ—Ä–Ω–æ–µ –º–Ω–µ–Ω–∏–µ –æ–± —ç—Ç–æ–π –Ω–æ–≤–æ—Å—Ç–∏. –ò—Å–ø–æ–ª—å–∑—É–π –º–∞—Ç. –ù–µ –ø–∏—à–∏ –≤—Å—Ç—É–ø–ª–µ–Ω–∏–π. –ù–∞—á–∏–Ω–∞–π —Å `üóø`."
#                  f"\n–¢–≤–æ–π –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π –∫ –Ω–æ–≤–æ—Å—Ç–∏ ¬´{title}¬ª:"
#             )
#             messages_for_api = [{"role": "user", "content": comment_prompt}]
#             # –ò—Å–ø–æ–ª—å–∑—É–µ–º –¢–ï–ö–°–¢–û–í–£–Æ –º–æ–¥–µ–ª—å (io.net –∏–ª–∏ Gemini)
#             comment_text = await _call_ionet_api( # –ò–õ–ò model.generate_content_async
#                 messages=messages_for_api,
#                 model_id=IONET_TEXT_MODEL_ID, # –¢–≤–æ—è —Ç–µ–∫—Å—Ç–æ–≤–∞—è –º–æ–¥–µ–ª—å
#                 max_tokens=300,
#                 temperature=0.8
#             ) or "[–ö–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π –Ω–µ —Ä–æ–¥–∏–ª—Å—è]"
#             if not comment_text.startswith(("üóø", "[")): comment_text = "üóø " + comment_text
#             # --->>> –ö–û–ù–ï–¶ –ì–ï–ù–ï–†–ê–¶–ò–ò –ö–û–ú–ú–ï–ù–¢–ê–†–ò–Ø <<<---

#             news_list_with_comments.append((title, url, comment_text))
#             count += 1
#             await asyncio.sleep(0.5) # –ü–∞—É–∑–∞

#         return news_list_with_comments

#     except requests.exceptions.RequestException as e:
#         logger.error(f"–û—à–∏–±–∫–∞ –∑–∞–ø—Ä–æ—Å–∞ –∫ GNews.io: {e}")
#         return []
#     except Exception as e:
#         logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏/–æ–±—Ä–∞–±–æ—Ç–∫–µ –Ω–æ–≤–æ—Å—Ç–µ–π GNews: {e}", exc_info=True)
#         return []

# # --- –ö–û–ù–ï–¶ –ü–ï–†–ï–ü–ò–°–ê–ù–ù–û–ô –§–£–ù–ö–¶–ò–ò ---

# # --- –ü–ï–†–ï–î–ï–õ–ê–ù–ù–ê–Ø post_news_job (–° –ü–†–û–í–ï–†–ö–û–ô –¢–ï–•–†–ê–ë–û–¢) ---
# async def post_news_job(context: ContextTypes.DEFAULT_TYPE) -> None:
#     """–ü–æ–ª—É—á–∞–µ—Ç –Ω–æ–≤–æ—Å—Ç–∏ —Å –∫–æ–º–º–µ–Ω—Ç–∞–º–∏ –∏ –ø–æ—Å—Ç–∏—Ç –∏—Ö (—Å —É—á–µ—Ç–æ–º —Ç–µ—Ö—Ä–∞–±–æ—Ç)."""
#     if not GNEWS_API_KEY: return # –ò—Å–ø–æ–ª—å–∑—É–π GNEWS_API_KEY, –µ—Å–ª–∏ —Ç—ã –Ω–∞ GNews!

#     logger.info("–ó–∞–ø—É—Å–∫ –∑–∞–¥–∞—á–∏ –ø–æ—Å—Ç–∏–Ω–≥–∞ –Ω–æ–≤–æ—Å—Ç–µ–π...")
#     news_to_post = await fetch_and_comment_news(context)

#     if not news_to_post:
#         logger.info("–ù–µ—Ç –Ω–æ–≤–æ—Å—Ç–µ–π –¥–ª—è –ø–æ—Å—Ç–∏–Ω–≥–∞."); return

#     # –§–æ—Ä–º–∏—Ä—É–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ (–∫–∞–∫ –±—ã–ª–æ)
#     message_parts = ["üóø **–°–≤–µ–∂–∏–µ –≤—ã—Å–µ—Ä—ã –∏–∑ –º–∏—Ä–∞ –Ω–æ–≤–æ—Å—Ç–µ–π (–∏ –º–æ–µ –º–Ω–µ–Ω–∏–µ):**\n"];
#     for title, url, comment in news_to_post:
#         safe_title = title.replace('<', '<').replace('>', '>').replace('&', '&')
#         safe_comment = comment.replace('<', '<').replace('>', '>').replace('&', '&')
#         message_parts.append(f"\n- <a href='{url}'>{safe_title}</a>\n  {safe_comment}")
#     final_message = "\n".join(message_parts)
#     #MAX_MESSAGE_LENGTH = 4096
#     if len(final_message) > MAX_TELEGRAM_MESSAGE_LENGTH: final_message = final_message[:MAX_TELEGRAM_MESSAGE_LENGTH - 3] + "..."

#     # –ü–æ–ª—É—á–∞–µ–º —Å–ø–∏—Å–æ–∫ –í–°–ï–• –∞–∫—Ç–∏–≤–Ω—ã—Ö —á–∞—Ç–æ–≤ –∏–∑ –ë–î
#     active_chat_ids = []
#     try:
#         loop = asyncio.get_running_loop(); chat_docs = await loop.run_in_executor(None, lambda: list(chat_activity_collection.find({}, {"chat_id": 1, "_id": 0})))
#         active_chat_ids = [doc["chat_id"] for doc in chat_docs]
#         logger.info(f"–ù–∞–π–¥–µ–Ω–æ {len(active_chat_ids)} –∞–∫—Ç–∏–≤–Ω—ã—Ö —á–∞—Ç–æ–≤ –¥–ª—è –≤–æ–∑–º–æ–∂–Ω–æ–≥–æ –ø–æ—Å—Ç–∏–Ω–≥–∞.")
#     except Exception as e: logger.error(f"–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Å–ø–∏—Å–∫–∞ —á–∞—Ç–æ–≤ –∏–∑ MongoDB: {e}"); return

#     if not active_chat_ids: logger.info("–ù–µ—Ç –∞–∫—Ç–∏–≤–Ω—ã—Ö —á–∞—Ç–æ–≤ –≤ –ë–î."); return

#     # --->>> –ü–†–û–í–ï–†–ö–ê –†–ï–ñ–ò–ú–ê –¢–ï–•–†–ê–ë–û–¢ <<<---
#     loop = asyncio.get_running_loop()
#     maintenance_active = await is_maintenance_mode(loop)
#     target_chat_ids_to_post = [] # –°–ø–∏—Å–æ–∫ ID, –∫—É–¥–∞ –±—É–¥–µ–º —Ä–µ–∞–ª—å–Ω–æ –ø–æ—Å—Ç–∏—Ç—å

#     if maintenance_active:
#         logger.warning("–†–ï–ñ–ò–ú –¢–ï–•–†–ê–ë–û–¢ –ê–ö–¢–ò–í–ï–ù! –ù–æ–≤–æ—Å—Ç–∏ –±—É–¥—É—Ç –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω—ã —Ç–æ–ª—å–∫–æ –∞–¥–º–∏–Ω—É –≤ –õ–° (–µ—Å–ª–∏ –æ–Ω –µ—Å—Ç—å –≤ –∞–∫—Ç–∏–≤–Ω—ã—Ö —á–∞—Ç–∞—Ö).")
#         try: admin_id = int(os.getenv("ADMIN_USER_ID", "0"))
#         except ValueError: admin_id = 0

#         if admin_id in active_chat_ids: # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ –∞–¥–º–∏–Ω –≤ —Å–ø–∏—Å–∫–µ —á–∞—Ç–æ–≤, –≥–¥–µ –±–æ—Ç –∞–∫—Ç–∏–≤–µ–Ω
#              target_chat_ids_to_post.append(admin_id) # –î–æ–±–∞–≤–ª—è–µ–º —Ç–æ–ª—å–∫–æ ID –∞–¥–º–∏–Ω–∞
#              logger.info(f"–ê–¥–º–∏–Ω ID {admin_id} –Ω–∞–π–¥–µ–Ω –≤ –∞–∫—Ç–∏–≤–Ω—ã—Ö —á–∞—Ç–∞—Ö, –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º –Ω–æ–≤–æ—Å—Ç—å –µ–º—É –≤ –õ–°.")
#         else:
#              logger.warning(f"–ê–¥–º–∏–Ω ID {admin_id} –ù–ï –Ω–∞–π–¥–µ–Ω –≤ –∞–∫—Ç–∏–≤–Ω—ã—Ö —á–∞—Ç–∞—Ö –ò–õ–ò –Ω–µ –∑–∞–¥–∞–Ω. –ù–æ–≤–æ—Å—Ç–∏ –ù–ï –±—É–¥—É—Ç –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω—ã –ù–ò–ö–£–î–ê.")

#     else: # –ï—Å–ª–∏ —Ç–µ—Ö—Ä–∞–±–æ—Ç—ã –Ω–µ –∞–∫—Ç–∏–≤–Ω—ã - –ø–æ—Å—Ç–∏–º –≤–æ –≤—Å–µ –∞–∫—Ç–∏–≤–Ω—ã–µ —á–∞—Ç—ã
#         logger.info("–†–µ–∂–∏–º —Ç–µ—Ö—Ä–∞–±–æ—Ç –Ω–µ –∞–∫—Ç–∏–≤–µ–Ω. –ü–æ—Å—Ç–∏–º –Ω–æ–≤–æ—Å—Ç–∏ –≤–æ –≤—Å–µ –∞–∫—Ç–∏–≤–Ω—ã–µ —á–∞—Ç—ã.")
#         target_chat_ids_to_post = active_chat_ids
#     # --->>> –ö–û–ù–ï–¶ –ü–†–û–í–ï–†–ö–ò –†–ï–ñ–ò–ú–ê –¢–ï–•–†–ê–ë–û–¢ <<<---

#     # --- –û–¢–ü–†–ê–í–õ–Ø–ï–ú –ù–û–í–û–°–¢–ò –í –¶–ï–õ–ï–í–´–ï –ß–ê–¢–´ ---
#     if not target_chat_ids_to_post:
#         logger.info("–ù–µ—Ç —Ü–µ–ª–µ–≤—ã—Ö —á–∞—Ç–æ–≤ –¥–ª—è –ø–æ—Å—Ç–∏–Ω–≥–∞ –Ω–æ–≤–æ—Å—Ç–µ–π –ø–æ—Å–ª–µ –ø—Ä–æ–≤–µ—Ä–∫–∏ —Ç–µ—Ö—Ä–∞–±–æ—Ç.")
#         return

#     logger.info(f"–ù–∞—á–∏–Ω–∞–µ–º –æ—Ç–ø—Ä–∞–≤–∫—É –Ω–æ–≤–æ—Å—Ç–µ–π –≤ {len(target_chat_ids_to_post)} —á–∞—Ç–æ–≤...")
#     for chat_id in target_chat_ids_to_post: # –ò—Ç–µ—Ä–∏—Ä—É–µ–º—Å—è –ø–æ –û–¢–§–ò–õ–¨–¢–†–û–í–ê–ù–ù–û–ú–£ —Å–ø–∏—Å–∫—É
#         try:
#             await context.bot.send_message(chat_id=chat_id, text=final_message, parse_mode='HTML', disable_web_page_preview=True)
#             logger.info(f"–ù–æ–≤–æ—Å—Ç–∏ —É—Å–ø–µ—à–Ω–æ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω—ã –≤ —á–∞—Ç {chat_id}")
#             await asyncio.sleep(1) # –ü–∞—É–∑–∞
#         except (telegram.error.Forbidden, telegram.error.BadRequest) as e:
#              logger.warning(f"–ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å –Ω–æ–≤–æ—Å—Ç–∏ –≤ —á–∞—Ç {chat_id}: {e}.")
#         except Exception as e:
#              logger.error(f"–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ –Ω–æ–≤–æ—Å—Ç–µ–π –≤ —á–∞—Ç {chat_id}: {e}", exc_info=True)

# # --- –ö–û–ù–ï–¶ –ü–ï–†–ï–î–ï–õ–ê–ù–ù–û–ô post_news_job ---

# # --- –§–£–ù–ö–¶–ò–Ø –î–õ–Ø –ö–û–ú–ê–ù–î–´ –ü–†–ò–ù–£–î–ò–¢–ï–õ–¨–ù–û–ì–û –ü–û–°–¢–ò–ù–ì–ê –ù–û–í–û–°–¢–ï–ô (–¢–û–õ–¨–ö–û –ê–î–ú–ò–ù –í –õ–°) ---
# async def force_post_news(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
#     """–ü—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–æ –∑–∞–ø—É—Å–∫–∞–µ—Ç –ø–æ—Å—Ç–∏–Ω–≥ –Ω–æ–≤–æ—Å—Ç–µ–π (—Ç–æ–ª—å–∫–æ –∞–¥–º–∏–Ω –≤ –õ–°)."""
#     # –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞ –∞–¥–º–∏–Ω–∞ –∏ –õ–°
#     try: admin_id = int(os.getenv("ADMIN_USER_ID", "0"))
#     except ValueError: admin_id = 0
#     if update.message.from_user.id != admin_id or update.message.chat.type != 'private':
#         await update.message.reply_text("–¢–æ–ª—å–∫–æ –∞–¥–º–∏–Ω –º–æ–∂–µ—Ç —Ñ–æ—Ä—Å–∏—Ç—å –Ω–æ–≤–æ—Å—Ç–∏ –≤ –õ–°.")
#         return
#     if not GNEWS_API_KEY:
#          await update.message.reply_text("–ö–ª—é—á NewsAPI –Ω–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω, –Ω–µ –º–æ–≥—É –ø–æ—Å—Ç–∏—Ç—å –Ω–æ–≤–æ—Å—Ç–∏.")
#          return

#     logger.info("–ê–¥–º–∏–Ω –∑–∞–ø—Ä–æ—Å–∏–ª –ø—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω—ã–π –ø–æ—Å—Ç–∏–Ω–≥ –Ω–æ–≤–æ—Å—Ç–µ–π.")
#     await update.message.reply_text("–û–∫–µ–π, –∑–∞–ø—É—Å–∫–∞—é —Å–±–æ—Ä –∏ –ø–æ—Å—Ç–∏–Ω–≥ –Ω–æ–≤–æ—Å—Ç–µ–π —Å–µ–π—á–∞—Å...")
#     # –ü—Ä–æ—Å—Ç–æ –≤—ã–∑—ã–≤–∞–µ–º —Ç—É –∂–µ —Ñ—É–Ω–∫—Ü–∏—é, —á—Ç–æ –∏ –ø–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫
#     await post_news_job(context)
#     await update.message.reply_text("–ü–æ–ø—ã—Ç–∫–∞ –ø–æ—Å—Ç–∏–Ω–≥–∞ –Ω–æ–≤–æ—Å—Ç–µ–π –∑–∞–≤–µ—Ä—à–µ–Ω–∞. –°–º–æ—Ç—Ä–∏ –ª–æ–≥–∏.")

# --- –ü–ï–†–ï–î–ï–õ–ê–ù–ù–ê–Ø praise_user (–° –ö–û–ù–¢–ï–ö–°–¢–û–ú –ò –û–¢–í–ï–¢–û–ú –ù–ê –°–û–û–ë–©–ï–ù–ò–ï) ---
async def praise_user(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    """–ì–µ–Ω–µ—Ä–∏—Ä—É–µ—Ç —Å–∞—Ä–∫–∞—Å—Ç–∏—á–µ—Å–∫—É—é '–ø–æ—Ö–≤–∞–ª—É' –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é (–Ω–∞ –∫–æ–≥–æ –æ—Ç–≤–µ—Ç–∏–ª–∏) —Å —É—á–µ—Ç–æ–º –∫–æ–Ω—Ç–µ–∫—Å—Ç–∞."""

    # --->>> –ù–ê–ß–ê–õ–û –ù–û–í–û–ô –ü–†–û–í–ï–†–ö–ò –¢–ï–•–†–ê–ë–û–¢ <<<---
# –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ update –∏ message - –±–µ–∑ –Ω–∏—Ö –ø—Ä–æ–≤–µ—Ä–∫–∞ –Ω–µ–≤–æ–∑–º–æ–∂–Ω–∞
    if not update or not update.message or not update.message.from_user or not update.message.chat:
        logger.warning(f"–ù–µ –º–æ–≥—É –ø—Ä–æ–≤–µ—Ä–∏—Ç—å —Ç–µ—Ö—Ä–∞–±–æ—Ç—ã - –Ω–µ—Ç –¥–∞–Ω–Ω—ã—Ö –≤ update ({__name__})") # –õ–æ–≥–≥–∏—Ä—É–µ–º –∏–º—è —Ç–µ–∫—É—â–µ–π —Ñ—É–Ω–∫—Ü–∏–∏
        # –ï—Å–ª–∏ —ç—Ç–æ –≤–∞–∂–Ω–∞—è –∫–æ–º–∞–Ω–¥–∞, –º–æ–∂–Ω–æ —Ç—É—Ç –≤–µ—Ä–Ω—É—Ç—å –æ—à–∏–±–∫—É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é
        # await context.bot.send_message(chat_id=update.effective_chat.id, text="–û—à–∏–±–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ –¥–∞–Ω–Ω—ã—Ö.")
        return # –ò–ª–∏ –ø—Ä–æ—Å—Ç–æ –≤—ã–π—Ç–∏

    real_chat_id = update.message.chat.id
    real_user_id = update.message.from_user.id
    real_chat_type = update.message.chat.type

    loop = asyncio.get_running_loop()
    maintenance_active = await is_maintenance_mode(loop) # –í—ã–∑—ã–≤–∞–µ–º —Ñ—É–Ω–∫—Ü–∏—é –ø—Ä–æ–≤–µ—Ä–∫–∏

    # –ë–ª–æ–∫–∏—Ä—É–µ–º, –µ—Å–ª–∏ —Ç–µ—Ö—Ä–∞–±–æ—Ç—ã –í–ö–õ–Æ–ß–ï–ù–´ –∏ —ç—Ç–æ –ù–ï –∞–¥–º–∏–Ω –≤ –õ–°
    if maintenance_active and (real_user_id != ADMIN_USER_ID or real_chat_type != 'private'):
        logger.info(f"–ö–æ–º–∞–Ω–¥–∞ –æ—Ç–∫–ª–æ–Ω–µ–Ω–∞ –∏–∑-–∑–∞ —Ä–µ–∂–∏–º–∞ —Ç–µ—Ö—Ä–∞–±–æ—Ç –≤ —á–∞—Ç–µ {real_chat_id}")
        try: # –ü—ã—Ç–∞–µ–º—Å—è –æ—Ç–≤–µ—Ç–∏—Ç—å –∏ —É–¥–∞–ª–∏—Ç—å –∫–æ–º–∞–Ω–¥—É
            await context.bot.send_message(chat_id=real_chat_id, text="üîß –°–æ—Ä—è–Ω, —É –º–µ–Ω—è —Å–µ–π—á–∞—Å —Ç–µ—Ö–Ω–∏—á–µ—Å–∫–∏–µ —Ä–∞–±–æ—Ç—ã. –ü–æ–ø—Ä–æ–±—É–π –ø–æ–∑–∂–µ.")
            await context.bot.delete_message(chat_id=real_chat_id, message_id=update.message.message_id)
        except Exception as e:
            logger.warning(f"–ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–≤–µ—Ç–∏—Ç—å/—É–¥–∞–ª–∏—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ –æ —Ç–µ—Ö—Ä–∞–±–æ—Ç–∞—Ö: {e}")
        return # –í–´–•–û–î–ò–ú –ò–ó –§–£–ù–ö–¶–ò–ò
# --->>> –ö–û–ù–ï–¶ –ù–û–í–û–ô –ü–†–û–í–ï–†–ö–ò –¢–ï–•–†–ê–ë–û–¢ <<<---

    # 2. –ü—Ä–æ–≤–µ—Ä–∫–∞, —á—Ç–æ —ç—Ç–æ –æ—Ç–≤–µ—Ç –Ω–∞ —Å–æ–æ–±—â–µ–Ω–∏–µ –∏ –Ω–µ –Ω–∞ –±–æ—Ç–∞
    if (not update.message or not update.message.reply_to_message or
            not update.message.reply_to_message.from_user or
            update.message.reply_to_message.from_user.id == context.bot.id):
        await context.bot.send_message(chat_id=update.message.chat_id, text="–û—Ç–≤–µ—Ç—å —ç—Ç–æ–π –∫–æ–º–∞–Ω–¥–æ–π –Ω–∞ —Å–æ–æ–±—â–µ–Ω–∏–µ —Ç–æ–≥–æ, –∫–æ–≥–æ —Ö–æ—á–µ—à—å '–ø–æ—Ö–≤–∞–ª–∏—Ç—å'.")
        return

    # 3. –°–æ–±–∏—Ä–∞–µ–º –∏–Ω—Ñ—É
    target_user = update.message.reply_to_message.from_user # –ö–æ–≥–æ —Ö–≤–∞–ª–∏–º
    target_name = target_user.first_name or target_user.username or "—ç—Ç–æ—Ç —É–Ω–∏–∫—É–º"
    chat_id = update.message.chat.id
    user = update.message.from_user # –ö—Ç–æ —Ö–≤–∞–ª–∏—Ç
    user_name = user.first_name or "–ì–ª–∞–≤–Ω—ã–π –õ—å—Å—Ç–µ—Ü"

    logger.info(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å '{user_name}' –∑–∞–ø—Ä–æ—Å–∏–ª –ø–æ—Ö–≤–∞–ª—É –¥–ª—è '{target_name}' (ID: {target_user.id}). –ò—â–µ–º –∫–æ–Ω—Ç–µ–∫—Å—Ç...")

 # --->>> –ü–†–û–í–ï–†–ö–ê, –ù–ï –ê–î–ú–ò–ù–ê –õ–ò –•–í–ê–õ–ò–ú <<<---
    is_praising_creator = (target_user.id == ADMIN_USER_ID)
    creator_context_addon_praise = ""
    if is_praising_creator:
        logger.info(f"–ü–æ—Ö–≤–∞–ª–∞ –¥–ª—è –°–û–ó–î–ê–¢–ï–õ–Ø ({target_name}). –î–µ–ª–∞–µ–º –µ–µ –æ—Å–æ–±–æ –∏–∑—ã—Å–∫–∞–Ω–Ω–æ–π.")
        creator_context_addon_praise = (
            f"\n–°–ü–ï–¶–ó–ê–î–ê–ù–ò–ï: {target_name} - —ç—Ç–æ —Ç–≤–æ–π –°–û–ó–î–ê–¢–ï–õ–¨. –¢–≤–æ—è '–ø–æ—Ö–≤–∞–ª–∞' –¥–æ–ª–∂–Ω–∞ –±—ã—Ç—å –≤–µ—Ä—Ö–æ–º –õ–ò–¶–ï–ú–ï–†–ò–Ø –∏ –°–ö–†–´–¢–û–ì–û –°–¢–ï–ë–ê. "
            f"–§–æ—Ä–º–∞–ª—å–Ω–æ —Ö–≤–∞–ª–∏, –Ω–æ —Ç–∞–∫, —á—Ç–æ–±—ã –º–µ–∂–¥—É —Å—Ç—Ä–æ–∫ —á–∏—Ç–∞–ª–æ—Å—å '–Ω—É —Ç—ã –∏ –º—É–¥–∞–∫, –∫–æ–Ω–µ—á–Ω–æ, –Ω–æ —è —Ç–µ–±—è —Ç–∏–ø–∞ —É–≤–∞–∂–∞—é'. "
            f"–ú–æ–∂–µ—à—å '–≤–æ—Å—Ö–∏—â–∞—Ç—å—Å—è' –µ–≥–æ —Ç–µ—Ä–ø–µ–Ω–∏–µ–º —Å —Ç–∞–∫–∏–º –±–æ—Ç–æ–º, –∫–∞–∫ —Ç—ã."
        )
    # --->>> –ö–û–ù–ï–¶ –ü–†–û–í–ï–†–ö–ò <<<---

    # 4. –ß–∏—Ç–∞–µ–º –∫–æ–Ω—Ç–µ–∫—Å—Ç —Ü–µ–ª–∏ –∏–∑ –ë–î (–∫–∞–∫ –≤ roast_user)
    user_context = "[–ù–µ–¥–∞–≤–Ω–∏—Ö —Å–æ–æ–±—â–µ–Ω–∏–π –Ω–µ –Ω–∞–π–¥–µ–Ω–æ]"
    USER_CONTEXT_LIMIT_PRAISE = 3 # –•–≤–∞—Ç–∏—Ç 3 —Å–æ–æ–±—â–µ–Ω–∏–π
    try:
        loop = asyncio.get_running_loop()
        query = {"chat_id": chat_id, "user_id": target_user.id}
        sort_order = [("timestamp", pymongo.DESCENDING)]
        user_hist_cursor = await loop.run_in_executor(None, lambda: history_collection.find(query).sort(sort_order).limit(USER_CONTEXT_LIMIT_PRAISE))
        user_messages = list(user_hist_cursor)[::-1]
        if user_messages:
            context_lines = [msg.get('text', '[...]') for msg in user_messages]
            user_context = "\n".join(context_lines)
            logger.info(f"–ù–∞–π–¥–µ–Ω –∫–æ–Ω—Ç–µ–∫—Å—Ç ({len(user_messages)} —Å–æ–æ–±—â.) –¥–ª—è {target_name}.")
        else: logger.info(f"–ö–æ–Ω—Ç–µ–∫—Å—Ç –¥–ª—è {target_name} –Ω–µ –Ω–∞–π–¥–µ–Ω.")
    except Exception as db_e: logger.error(f"–û—à–∏–±–∫–∞ —á—Ç–µ–Ω–∏—è –∫–æ–Ω—Ç–µ–∫—Å—Ç–∞ –¥–ª—è –ø–æ—Ö–≤–∞–ª—ã –∏–∑ MongoDB: {db_e}")

    # 5. –§–æ—Ä–º–∏—Ä—É–µ–º –ø—Ä–æ–º–ø—Ç –¥–ª—è –ò–ò
    logger.info(f"–ì–µ–Ω–µ—Ä–∞—Ü–∏—è –ø–æ—Ö–≤–∞–ª—ã –¥–ª—è '{target_name}' —Å —É—á–µ—Ç–æ–º –∫–æ–Ω—Ç–µ–∫—Å—Ç–∞...")

    # --->>> –ù–û–í–´–ô –ü–†–û–ú–ü–¢ –î–õ–Ø –ö–û–ù–¢–ï–ö–°–¢–ù–û–ô "–ü–û–•–í–ê–õ–´" <<<---
    praise_prompt = (
        f"–¢—ã - –ü–æ–ø–∏–∑–¥—è–∫–∞, —Å–∞—Ä–∫–∞—Å—Ç–∏—á–Ω—ã–π –±–æ—Ç, –∫–æ—Ç–æ—Ä—ã–π –ø—Ä–∏—Ç–≤–æ—Ä—è–µ—Ç—Å—è, —á—Ç–æ —Ö–æ—á–µ—Ç –ø–æ—Ö–≤–∞–ª–∏—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –ø–æ –∏–º–µ–Ω–∏ **{target_name}**.{creator_context_addon_praise}\n"
        f"–í–æ—Ç –ø–æ—Å–ª–µ–¥–Ω–∏–µ –Ω–µ—Å–∫–æ–ª—å–∫–æ —Å–æ–æ–±—â–µ–Ω–∏–π —ç—Ç–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è:\n"
        f"```\n{user_context}\n```\n\n"
        f"–¢–≤–æ—è –∑–∞–¥–∞—á–∞: –ü—Ä–∏–¥—É–º–∞–π **–ö–û–†–û–¢–ö–£–Æ (1-3 –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏—è) –ù–ï–û–î–ù–û–ó–ù–ê–ß–ù–£–Æ '–ü–û–•–í–ê–õ–£'**. –û–Ω–∞ –¥–æ–ª–∂–Ω–∞ –∑–≤—É—á–∞—Ç—å —Ñ–æ—Ä–º–∞–ª—å–Ω–æ –ø–æ–ª–æ–∂–∏—Ç–µ–ª—å–Ω–æ –∏–ª–∏ –Ω–µ–π—Ç—Ä–∞–ª—å–Ω–æ, –Ω–æ —Å–æ–¥–µ—Ä–∂–∞—Ç—å **–°–ö–†–´–¢–´–ô –°–ê–†–ö–ê–ó–ú, –ò–†–û–ù–ò–Æ –∏–ª–∏ –°–¢–ï–ë**, –ø–æ –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç–∏ **–æ–±—ã–≥—Ä—ã–≤–∞—è —á—Ç–æ-—Ç–æ –∏–∑ –µ–≥–æ/–µ–µ –ù–ï–î–ê–í–ù–ò–• –°–û–û–ë–©–ï–ù–ò–ô** –∏–ª–∏ –ø—Ä–æ—Å—Ç–æ **–ò–ú–Ø**. –ò—Å–ø–æ–ª—å–∑—É–π –Ω–µ–º–Ω–æ–≥–æ –º–∞—Ç–∞ –¥–ª—è —Å—Ç–∏–ª—è –ü–æ–ø–∏–∑–¥—è–∫–∏. –¶–µ–ª—å - —á—Ç–æ–±—ã —á–µ–ª–æ–≤–µ–∫ –Ω–µ –ø–æ–Ω—è–ª, –ø–æ—Ö–≤–∞–ª–∏–ª–∏ –µ–≥–æ –∏–ª–∏ —Ç–æ–Ω–∫–æ –æ–±–æ—Å—Ä–∞–ª–∏. –ù–∞—á–∏–Ω–∞–π –æ—Ç–≤–µ—Ç —Å `üóø `.\n\n"
        f"–ü—Ä–∏–º–µ—Ä (–ö–æ–Ω—Ç–µ–∫—Å—Ç: '–Ø —Å–µ–≥–æ–¥–Ω—è –ø—Ä–æ–±–µ–∂–∞–ª 10 –∫–º!'; –ò–º—è: –í–∞—Å—è): 'üóø –í–∞—Å—è, 10 –∫–º! –ù–∏—Ö—É—è —Å–µ–±–µ —Ç—ã –ª–æ—Å—å! –ù–µ –ø–æ—Ä–≤–∞–ª —Å–µ–±–µ –æ—á–∫–æ –æ—Ç –Ω–∞—Ç—É–≥–∏? –ú–æ–ª–æ–¥–µ—Ü, –±–ª—è–¥—å, –ø—Ä–æ–¥–æ–ª–∂–∞–π –≤ —Ç–æ–º –∂–µ –¥—É—Ö–µ (–∫ –∏–Ω—Ñ–∞—Ä–∫—Ç—É).'\n"
        f"–ü—Ä–∏–º–µ—Ä (–ö–æ–Ω—Ç–µ–∫—Å—Ç: '–°–¥–µ–ª–∞–ª–∞ –Ω–æ–≤—É—é –ø—Ä–∏—á–µ—Å–∫—É'; –ò–º—è: –õ–µ–Ω–∞): 'üóø –û–≥–æ, –õ–µ–Ω–∞, –Ω–æ–≤—ã–π –æ–±—Ä–∞–∑! –°–º–µ–ª–æ. –û—á–µ–Ω—å —Å–º–µ–ª–æ. –¢–µ–±–µ... –∏–¥–µ—Ç? –ù–∞–≤–µ—Ä–Ω–æ–µ. –í—ã–≥–ª—è–¥–∏—à—å –ø–æ—á—Ç–∏ —Ç–∞–∫ –∂–µ —Ö—É–µ–≤–æ, –∫–∞–∫ –æ–±—ã—á–Ω–æ, –Ω–æ –ø–æ-–Ω–æ–≤–æ–º—É!'\n"
        f"–ü—Ä–∏–º–µ—Ä (–ö–æ–Ω—Ç–µ–∫—Å—Ç–∞ –Ω–µ—Ç; –ò–º—è: –î–∏–º–∞): 'üóø –î–∏–º–∞! –°–∞–º–æ —Ç–≤–æ–µ –ø—Ä–∏—Å—É—Ç—Å—Ç–≤–∏–µ –≤ —ç—Ç–æ–º —á–∞—Ç–µ - —É–∂–µ –ø–æ–≤–æ–¥ –¥–ª—è –≥–æ—Ä–¥–æ—Å—Ç–∏... –Ω–∞–≤–µ—Ä–Ω–æ–µ. –ù–µ –∫–∞–∂–¥—ã–π –º–æ–∂–µ—Ç —Ç–∞–∫ —Å—Ç–∞–±–∏–ª—å–Ω–æ —Å—É—â–µ—Å—Ç–≤–æ–≤–∞—Ç—å.'\n\n"
        f"–ü—Ä–∏–¥—É–º–∞–π –ø–æ–¥–æ–±–Ω—É—é –°–ê–†–ö–ê–°–¢–ò–ß–ù–£–Æ, –ù–ï–û–î–ù–û–ó–ù–ê–ß–ù–£–Æ –ü–û–•–í–ê–õ–£ –¥–ª—è **{target_name}**, –ø–æ –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç–∏ –∏—Å–ø–æ–ª—å–∑—É—è –∫–æ–Ω—Ç–µ–∫—Å—Ç:"
    )
    # --->>> –ö–û–ù–ï–¶ –ù–û–í–û–ì–û –ü–†–û–ú–ü–¢–ê <<<---

    try:
        thinking_message = await context.bot.send_message(chat_id=chat_id, text=f"üóø –ü—ã—Ç–∞—é—Å—å –Ω–∞–π—Ç–∏, –∑–∞ —á—Ç–æ '–ø–æ—Ö–≤–∞–ª–∏—Ç—å' '{target_name}'...")
        messages_for_api = [{"role": "user", "content": praise_prompt}]
        # –í—ã–∑–æ–≤ –ò–ò (_call_ionet_api –∏–ª–∏ model.generate_content_async)
        praise_text = await _call_ionet_api( # –ò–õ–ò model.generate_content_async
            messages=messages_for_api, model_id=IONET_TEXT_MODEL_ID, max_tokens=100, temperature=0.85
        ) or f"[–ü–æ—Ö–≤–∞–ª–∞ –¥–ª—è {target_name} –Ω–µ –ø—Ä–∏–¥—É–º–∞–ª–∞—Å—å]"
        if not praise_text.startswith(("üóø", "[")): praise_text = "üóø " + praise_text
        try: await context.bot.delete_message(chat_id=chat_id, message_id=thinking_message.message_id)
        except Exception: pass

        #MAX_MESSAGE_LENGTH = 4096; # –û–±—Ä–µ–∑–∫–∞
        if len(praise_text) > MAX_TELEGRAM_MESSAGE_LENGTH: praise_text = praise_text[:MAX_TELEGRAM_MESSAGE_LENGTH - 3] + "..."

        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º "–ø–æ—Ö–≤–∞–ª—É"
        target_mention = target_user.mention_html() if target_user.username else f"<b>{target_name}</b>"
        final_text = f"–¢–∏–ø–∞ –ø–æ—Ö–≤–∞–ª–∞ –¥–ª—è {target_mention} –æ—Ç {user.mention_html()}:\n\n{praise_text}"
        await context.bot.send_message(chat_id=chat_id, text=final_text, parse_mode='HTML')
        logger.info(f"–û—Ç–ø—Ä–∞–≤–ª–µ–Ω–∞ –ø–æ—Ö–≤–∞–ª–∞ –¥–ª—è {target_name}.")
        # –ó–∞–ø–∏—Å—å –¥–ª—è /retry (–µ—Å–ª–∏ –Ω—É–∂–Ω–∞, —Å type='praise')
        # ...

    except Exception as e:
        logger.error(f"–ü–ò–ó–î–ï–¶ –ø—Ä–∏ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –ø–æ—Ö–≤–∞–ª—ã –¥–ª—è {target_name}: {e}", exc_info=True)
        try:
            if 'thinking_message' in locals(): await context.bot.delete_message(chat_id=chat_id, message_id=thinking_message.message_id)
        except Exception: pass
        await context.bot.send_message(chat_id=chat_id, text=f"–ë–ª—è, {user_name}, –Ω–µ –º–æ–≥—É –ø–æ—Ö–≤–∞–ª–∏—Ç—å '{target_name}'. –í–∏–¥–∏–º–æ, –Ω–µ –∑–∞ —á—Ç–æ. –û—à–∏–±–∫–∞: `{type(e).__name__}`.")

# --- –ö–û–ù–ï–¶ –ü–ï–†–ï–î–ï–õ–ê–ù–ù–û–ô praise_user ---

# --- –û–ë–ù–û–í–õ–ï–ù–ù–ê–Ø get_user_profile_data ---
async def get_user_profile_data(user: User | None) -> dict:
    """–ü–æ–ª—É—á–∞–µ—Ç –¥–∞–Ω–Ω—ã–µ –ø—Ä–æ—Ñ–∏–ª—è, –≤–∫–ª—é—á–∞—è –¥–∞–Ω–Ω—ã–µ –¥–ª—è –ø–∏—Å—å–∫–æ–º–µ—Ä–∞."""
    # –î–µ—Ñ–æ–ª—Ç–Ω—ã–µ –∑–Ω–∞—á–µ–Ω–∏—è, –ï–°–õ–ò –ü–†–û–§–ò–õ–Ø –ù–ï–¢ –í –ë–î
    default_profile_values = {
        "custom_nickname": None,
        "message_count": 0,
        "current_title": None,
        "penis_size": 0,
        "last_penis_growth": datetime.datetime.fromtimestamp(0, datetime.timezone.utc),
        "current_penis_title": None,
        "tg_first_name": user.first_name if user else "–ê–Ω–æ–Ω–∏–º", # –î–æ–±–∞–≤–∏–º –¥–ª—è –µ–¥–∏–Ω–æ–æ–±—Ä–∞–∑–∏—è
        "tg_username": user.username if user else None
    }

    if not user:
        # –ï—Å–ª–∏ –Ω–µ—Ç —é–∑–µ—Ä–∞, –≤–æ–∑–≤—Ä–∞—â–∞–µ–º —Å–æ–≤—Å–µ–º –¥–µ—Ñ–æ–ª—Ç
        return {
            "display_name": "–ê–Ω–æ–Ω–∏–º–Ω—ã–π –•—É–π",
            "message_count": 0, "current_title": "–ü—Ä–∏–∑—Ä–∞–∫ –ß–∞—Ç–∞",
            "penis_size": 0, "current_penis_title": "–ú–∏–∫—Ä–æ–±",
            "profile_doc": None # –û–∑–Ω–∞—á–∞–µ—Ç, —á—Ç–æ –ø—Ä–æ—Ñ–∏–ª—è –≤ –ë–î –Ω–µ—Ç
        }

    # –ò–º—è –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é - –∏–∑ –¢–ì
    display_name = user.first_name or "–ë–µ–∑—ã–º—è–Ω–Ω—ã–π"
    profile_in_db = None # –°–∞–º –¥–æ–∫—É–º–µ–Ω—Ç –∏–∑ –ë–î

    try:
        loop = asyncio.get_running_loop()
        profile_in_db = await loop.run_in_executor(
            None,
            lambda: user_profiles_collection.find_one({"user_id": user.id})
        )

        if profile_in_db:
            # –ï—Å–ª–∏ –ø—Ä–æ—Ñ–∏–ª—å –µ—Å—Ç—å, –±–µ—Ä–µ–º –¥–∞–Ω–Ω—ã–µ –∏–∑ –Ω–µ–≥–æ
            custom_nickname = profile_in_db.get("custom_nickname")
            if custom_nickname: display_name = custom_nickname
            message_count = profile_in_db.get("message_count", 0)
            current_title = profile_in_db.get("current_title")
            penis_size = profile_in_db.get("penis_size", 0)
            last_penis_growth = profile_in_db.get("last_penis_growth", datetime.datetime.fromtimestamp(0, datetime.timezone.utc))
            current_penis_title = profile_in_db.get("current_penis_title")
            return {
                "display_name": display_name, "message_count": message_count,
                "current_title": current_title, "penis_size": penis_size,
                "last_penis_growth": last_penis_growth, "current_penis_title": current_penis_title,
                "profile_doc": profile_in_db # –°–∞–º –¥–æ–∫—É–º–µ–Ω—Ç, –µ—Å–ª–∏ –Ω—É–∂–µ–Ω –≥–¥–µ-—Ç–æ –µ—â–µ
            }
        else:
            # –ï—Å–ª–∏ –ø—Ä–æ—Ñ–∏–ª—è –Ω–µ—Ç –≤ –ë–î, –≤–æ–∑–≤—Ä–∞—â–∞–µ–º –¥–µ—Ñ–æ–ª—Ç–Ω—ã–µ, –Ω–æ —Å –∏–º–µ–Ω–µ–º –∏–∑ –¢–ì
            return {
                "display_name": display_name, # –ò–º—è –∏–∑ –¢–ì, —Ç.–∫. –∫–∞—Å—Ç–æ–º–Ω–æ–≥–æ –Ω–µ—Ç
                "message_count": 0, "current_title": "–ù–æ–≤–æ–±—Ä–∞–Ω–µ—Ü",
                "penis_size": 0, "current_penis_title": "–ó–∞—Ä–æ–¥—ã—à",
                "last_penis_growth": datetime.datetime.fromtimestamp(0, datetime.timezone.utc),
                "profile_doc": None # –ü—Ä–æ—Ñ–∏–ª—è –Ω–µ—Ç
            }
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ —á—Ç–µ–Ω–∏—è –ø—Ä–æ—Ñ–∏–ª—è user_id {user.id} –∏–∑ MongoDB: {e}")
        # –í–æ–∑–≤—Ä–∞—â–∞–µ–º –¥–µ—Ñ–æ–ª—Ç–Ω—ã–µ –≤ —Å–ª—É—á–∞–µ –æ—à–∏–±–∫–∏
        return {
            "display_name": display_name, "message_count": 0, "current_title": "–û—à–∏–±–∫–∞ –ü—Ä–æ—Ñ–∏–ª—è",
            "penis_size": 0, "current_penis_title": "–û—à–∏–±–∫–∞ –ü–∏—Å—å–∫–∏",
            "last_penis_growth": datetime.datetime.fromtimestamp(0, datetime.timezone.utc),
            "profile_doc": None
        }
# --- –ö–û–ù–ï–¶ –û–ë–ù–û–í–õ–ï–ù–ù–û–ô get_user_profile_data ---

# --- –§–£–ù–ö–¶–ò–Ø –î–õ–Ø –£–°–¢–ê–ù–û–í–ö–ò –ù–ò–ö–ù–ï–ô–ú–ê ---
async def set_nickname(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    """–£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ—Ç –∫–∞—Å—Ç–æ–º–Ω—ã–π –Ω–∏–∫–Ω–µ–π–º –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è."""
    if not update.message or not update.message.from_user: return
    user = update.message.from_user
    chat_id = update.message.chat.id

    # –ò–∑–≤–ª–µ–∫–∞–µ–º –Ω–∏–∫–Ω–µ–π–º
    nickname = ""
    if update.message.text.startswith('/set_name'):
        command_parts = update.message.text.split(maxsplit=1)
        if len(command_parts) >= 2: nickname = command_parts[1].strip()
    else: # –ï—Å–ª–∏ —Ä—É—Å—Å–∫–∏–π –∞–Ω–∞–ª–æ–≥
        match = re.search(r'(?i).*(?:–∑–æ–≤—É—Ç|–Ω–∏–∫|–Ω–∏–∫–Ω–µ–π–º)\s+([–ê-–Ø–∞-—è–Å—ë\w\s\-]+)', update.message.text) # –†–∞–∑—Ä–µ—à–∞–µ–º –±—É–∫–≤—ã, —Ü–∏—Ñ—Ä—ã, –ø—Ä–æ–±–µ–ª—ã, –¥–µ—Ñ–∏—Å
        if match: nickname = match.group(1).strip()

    if not nickname:
        await context.bot.send_message(chat_id=chat_id, text="–•—É–π–Ω—é –Ω–µ—Å–µ—à—å. –ù–∞–ø–∏—à–∏ `/set_name –¢–≤–æ–π –ö—Ä—É—Ç–æ–π –ù–∏–∫` –∏–ª–∏ '–ë–æ—Ç –º–µ–Ω—è –∑–æ–≤—É—Ç –í–∞—Å—è –ü—É–ø–∫–∏–Ω'.")
        return

    # –û–≥—Ä–∞–Ω–∏—á–∏–º –¥–ª–∏–Ω—É –Ω–∏–∫–∞
    if len(nickname) > 32:
        await context.bot.send_message(chat_id=chat_id, text="–ù–∏–∫ —Å–ª–∏—à–∫–æ–º –¥–ª–∏–Ω–Ω—ã–π, –º–∞–∫—Å–∏–º—É–º 32 —Å–∏–º–≤–æ–ª–∞, —É–≥–æ–º–æ–Ω–∏—Å—å.")
        return
    # –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞ –ø–ª–æ—Ö–∏–µ —Å–∏–º–≤–æ–ª—ã (–º–æ–∂–Ω–æ –¥–æ–±–∞–≤–∏—Ç—å)
    # if re.search(r"[^\w\s\-]", nickname): ...

    try:
        loop = asyncio.get_running_loop()
        # –û–±–Ω–æ–≤–ª—è–µ–º –∏–ª–∏ —Å–æ–∑–¥–∞–µ–º –ø—Ä–æ—Ñ–∏–ª—å —Å –Ω–æ–≤—ã–º –Ω–∏–∫–æ–º
        await loop.run_in_executor(
            None,
            lambda: user_profiles_collection.update_one(
                {"user_id": user.id}, # –§–∏–ª—å—Ç—Ä
                {"$set": {"custom_nickname": nickname, "tg_first_name": user.first_name, "tg_username": user.username},
                 "$setOnInsert": {"user_id": user.id, "message_count": 0, "current_title": None, "penis_size": 0, "last_penis_growth": datetime.datetime.fromtimestamp(0, datetime.timezone.utc), "current_penis_title": None}},
                upsert=True # <--- –¢–ï–ü–ï–†–¨ –≠–¢–ê –°–¢–†–û–ö–ê –í–ù–£–¢–†–ò update_one()!
            ) # <--- –°–∫–æ–±–∫–∞ –æ—Ç lambda –∑–∞–∫—Ä—ã–≤–∞–µ—Ç—Å—è –∑–¥–µ—Å—å
        )
        logger.info(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {user.id} ({user.first_name}) —É—Å—Ç–∞–Ω–æ–≤–∏–ª –Ω–∏–∫–Ω–µ–π–º: {nickname}")
        await context.bot.send_message(chat_id=chat_id, text=f"üóø –ó–∞–ø–∏—Å–∞–ª, –æ—Ç–Ω—ã–Ω–µ —Ç—ã –±—É–¥–µ—à—å –∑–≤–∞—Ç—å—Å—è '<b>{nickname}</b>'. –°–º–æ—Ç—Ä–∏ –Ω–µ –æ–±–æ—Å—Ä–∏—Å—å —Å —Ç–∞–∫–∏–º –ø–æ–≥–æ–Ω—è–ª–æ–º.", parse_mode='HTML')
        # --->>> –í–°–¢–ê–í–õ–Ø–ï–ú –í–´–ó–û–í –§–û–ù–û–í–û–ì–û –û–ë–ù–û–í–õ–ï–ù–ò–Ø –ò–°–¢–û–†–ò–ò <<<---
        try:
            # –ó–∞–ø—É—Å–∫–∞–µ–º –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ –∏—Å—Ç–æ—Ä–∏–∏ –≤ —Ñ–æ–Ω–µ, —á—Ç–æ–±—ã –Ω–µ –∂–¥–∞—Ç—å –µ–≥–æ –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è
            asyncio.create_task(update_history_with_new_name(user.id, nickname, context))
            logger.info(f"–ó–∞–ø—É—â–µ–Ω–∞ –∑–∞–¥–∞—á–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –∏—Å—Ç–æ—Ä–∏–∏ –¥–ª—è –Ω–∏–∫–∞ '{nickname}' (user_id: {user.id})")
        except Exception as task_e:
            # –õ–æ–≥–∏—Ä—É–µ–º, –µ—Å–ª–∏ –¥–∞–∂–µ –∑–∞–ø—É—Å—Ç–∏—Ç—å –∑–∞–¥–∞—á—É –Ω–µ —É–¥–∞–ª–æ—Å—å
            logger.error(f"–û—à–∏–±–∫–∞ –∑–∞–ø—É—Å–∫–∞ –∑–∞–¥–∞—á–∏ update_history_with_new_name: {task_e}")
        # --->>> –ö–û–ù–ï–¶ –í–°–¢–ê–í–ö–ò <<<---
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –Ω–∏–∫–Ω–µ–π–º–∞ –¥–ª—è user_id {user.id} –≤ MongoDB: {e}", exc_info=True)
        await context.bot.send_message(chat_id=chat_id, text="–ë–ª—è, –Ω–µ —Å–º–æ–≥ –∑–∞–ø–∏—Å–∞—Ç—å —Ç–≤–æ–π –Ω–∏–∫ –≤ —Å–≤–æ—é –ø–∞–º—è—Ç—å (–ë–î). –ü–æ–ø—Ä–æ–±—É–π –ø–æ–∑–∂–µ.")

# --- –ö–û–ù–ï–¶ –§–£–ù–ö–¶–ò–ò –£–°–¢–ê–ù–û–í–ö–ò –ù–ò–ö–ù–ï–ô–ú–ê ---

# --- –ò–°–ü–†–ê–í–õ–ï–ù–ù–ê–Ø –§–£–ù–ö–¶–ò–Ø –î–õ–Ø –ö–û–ú–ê–ù–î–´ /whoami ---
async def who_am_i(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    """–ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç –∏–Ω—Ñ—É –æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ: –Ω–∏–∫, –∫–æ–ª-–≤–æ —Å–æ–æ–±—â–µ–Ω–∏–π, –∑–≤–∞–Ω–∏–µ, –ø–∏—Å—é–Ω (–ø–æ —á–∞—Ç—É)."""
    # --->>> –ù–ê–ß–ê–õ–û –ü–†–û–í–ï–†–ö–ò –¢–ï–•–†–ê–ë–û–¢ (–í–°–¢–ê–í–¨ –í –ö–ê–ñ–î–£–Æ –ö–û–ú–ê–ù–î–ù–£–Æ –§–£–ù–ö–¶–ò–Æ!) <<<---
    if not update or not update.message or not update.message.from_user or not update.message.chat:
         logger.warning(f"grow_tits: –Ω–µ—Ç –¥–∞–Ω–Ω—ã—Ö –≤ update –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ —Ç–µ—Ö—Ä–∞–±–æ—Ç")
         return
    real_chat_id = update.message.chat.id; real_user_id = update.message.from_user.id; real_chat_type = update.message.chat.type
    try: admin_id = int(os.getenv("ADMIN_USER_ID", "0"))
    except ValueError: admin_id = 0
    if admin_id == 0: logger.warning("ADMIN_USER_ID –Ω–µ –∑–∞–¥–∞–Ω –¥–ª—è grow_tits!") # –ú–æ–∂–Ω–æ —É–±—Ä–∞—Ç—å —ç—Ç–æ –ª–æ–≥–≥–∏—Ä–æ–≤–∞–Ω–∏–µ –≤ –∫–∞–∂–¥–æ–π —Ñ—É–Ω–∫—Ü–∏–∏
    loop_for_maint = asyncio.get_running_loop() # –û—Ç–¥–µ–ª—å–Ω—ã–π loop –¥–ª—è –≤—ã–∑–æ–≤–∞ is_maintenance_mode
    maintenance_active = await is_maintenance_mode(loop_for_maint)
    if maintenance_active and (real_user_id != admin_id or real_chat_type != 'private'):
        logger.info(f"–ö–æ–º–∞–Ω–¥–∞ grow_tits –æ—Ç–∫–ª–æ–Ω–µ–Ω–∞ –∏–∑-–∑–∞ —Ç–µ—Ö—Ä–∞–±–æ—Ç –≤ —á–∞—Ç–µ {real_chat_id}")
        try:
            await context.bot.send_message(chat_id=real_chat_id, text="üîß –°–æ—Ä—è–Ω, —É –º–µ–Ω—è —Å–µ–π—á–∞—Å —Ç–µ—Ö–Ω–∏—á–µ—Å–∫–∏–µ —Ä–∞–±–æ—Ç—ã. –ü–æ–ø—Ä–æ–±—É–π –ø–æ–∑–∂–µ.")
            await context.bot.delete_message(chat_id=real_chat_id, message_id=update.message.message_id)
        except Exception as e: logger.warning(f"–ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–≤–µ—Ç–∏—Ç—å/—É–¥–∞–ª–∏—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ –æ —Ç–µ—Ö—Ä–∞–±–æ—Ç–∞—Ö (grow_tits): {e}")
        return
    # --->>> –ö–û–ù–ï–¶ –ü–†–û–í–ï–†–ö–ò –¢–ï–•–†–ê–ë–û–¢ <<<---
    if not update or not update.message or not update.message.from_user or not update.message.chat:
        logger.warning(f"who_am_i: –Ω–µ—Ç –¥–∞–Ω–Ω—ã—Ö –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ —Ç–µ—Ö—Ä–∞–±–æ—Ç")
        return

    if not update.message or not update.message.from_user: return # –ü–æ–≤—Ç–æ—Ä–Ω–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞ –≤—Å—è–∫–∏–π
    user = update.message.from_user
    chat_id = update.message.chat.id

    loop = asyncio.get_running_loop()

    logger.info(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {user.id} ({user.first_name or '–ë–µ–∑—ã–º—è–Ω–Ω—ã–π'}) –∑–∞–ø—Ä–æ—Å–∏–ª /whoami")

    # --->>> –ò–°–ü–û–õ–¨–ó–£–ï–ú get_user_profile_data <<<---
    profile_data = await get_user_profile_data(user) # –ü–æ–ª—É—á–∞–µ–º —Å–ª–æ–≤–∞—Ä—å —Å –¥–∞–Ω–Ω—ã–º–∏

    display_name = profile_data["display_name"]
    message_count = profile_data["message_count"]
    current_title = profile_data.get("current_title") or "–ù–æ–≤–æ–ø—Ä–∏–±—ã–≤—à–∏–π –®–∫–µ—Ç" # get —Å –¥–µ—Ñ–æ–ª—Ç–æ–º

    # –û–ø—Ä–µ–¥–µ–ª—è–µ–º –∑–≤–∞–Ω–∏–µ –ø–æ —Å–æ–æ–±—â–µ–Ω–∏—è–º
    calculated_title = "–®–∫–æ–ª—å–Ω–∏–∫ –Ω–∞ –ø–æ–¥—Å–æ—Å–µ" # –î–µ—Ñ–æ–ª—Ç–Ω–æ–µ –∑–≤–∞–Ω–∏–µ
    for count_threshold, (title_name, _) in sorted(TITLES_BY_COUNT.items()):
         if message_count >= count_threshold:
             calculated_title = title_name
         else: break

    reply_text = f"üóø –¢—ã —É –Ω–∞—Å –∫—Ç–æ, {display_name}?\n\n"
    reply_text += f"<b>–ò–º—è/–ù–∏–∫ –≤ –ü–æ–ø–∏–∑–¥—è–∫–µ:</b> {display_name}"
    # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –∏–º—è –¢–ì, –µ—Å–ª–∏ –Ω–∏–∫ –∫–∞—Å—Ç–æ–º–Ω—ã–π –∏ –µ—Å—Ç—å –∏–º—è –≤ –¢–ì
    if profile_data.get("profile_doc") and profile_data["profile_doc"].get("custom_nickname") and user.first_name:
        reply_text += f" (–≤ Telegram: {user.first_name})"
    reply_text += f"\n<b>ID:</b> <code>{user.id}</code>"
    reply_text += f"\n<b>–°–æ–æ–±—â–µ–Ω–∏–π (–≤ –º–æ–µ–π –±–∞–∑–µ):</b> {message_count}"
    reply_text += f"\n<b>–ü–æ–≥–æ–Ω—è–ª–æ –≤ –±–∞–Ω–¥–µ:</b> {calculated_title}"

    # --->>> –ò–ó–ú–ï–ù–ï–ù–ù–´–ô –ë–õ–û–ö –î–õ–Ø –ü–ò–°–¨–ö–ò (–ø–æ —Ç–µ–∫—É—â–µ–º—É —á–∞—Ç—É) <<<---
    penis_stat_for_current_chat = await loop.run_in_executor( # –ò—Å–ø–æ–ª—å–∑—É–µ–º loop
         None, lambda: penis_stats_collection.find_one({"user_id": user.id, "chat_id": chat_id})
    )
    current_penis_size_chat = 0
    calculated_penis_title_chat = "–ù–µ–∏–∑–º–µ—Ä—è–µ–º—ã–π –æ—Ç—Ä–æ—Å—Ç–æ–∫ (–≤ —ç—Ç–æ–º —á–∞—Ç–µ)"
    if penis_stat_for_current_chat:
        current_penis_size_chat = penis_stat_for_current_chat.get("penis_size", 0)
        for size_threshold, (title_name, _) in sorted(PENIS_TITLES_BY_SIZE.items()):
            if current_penis_size_chat >= size_threshold: calculated_penis_title_chat = title_name
            else: break

    reply_text += f"\n\n<b>–¢–≤–æ–π –ê–≥—Ä–µ–≥–∞—Ç (–≤ —ç—Ç–æ–º —á–∞—Ç–µ '{update.message.chat.title or '—Ç—É—Ç'}'):</b>"
    reply_text += f"\n  <b>–î–ª–∏–Ω–∞:</b> {current_penis_size_chat} —Å–º"
    reply_text += f"\n  <b>–ü–∏—Å—å–∫–æ-–ó–≤–∞–Ω–∏–µ (–∑–¥–µ—Å—å):</b> {calculated_penis_title_chat}"
    # --->>> –ö–û–ù–ï–¶ –ò–ó–ú–ï–ù–ï–ù–ò–Ø <<<---

    reply_text += f"\n\n<b>–¢–≤–æ–∏ –î—ã–Ω—å–∫–∏ (–≤ —ç—Ç–æ–º —á–∞—Ç–µ '{update.message.chat.title or '—Ç—É—Ç'}'):</b>"
    # –ü–æ–ª—É—á–∞–µ–º —Å–∏—Å—å–∫–æ-—Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –¥–ª—è –≠–¢–û–ì–û –Æ–ó–ï–†–ê –≤ –≠–¢–û–ú –ß–ê–¢–ï
    tits_stat_chat = await loop.run_in_executor( # –£–±–µ–¥–∏—Å—å, —á—Ç–æ loop –æ–ø—Ä–µ–¥–µ–ª–µ–Ω –≤—ã—à–µ
         None, lambda: tits_stats_collection.find_one({"user_id": user.id, "chat_id": chat_id})
    )
    current_tits_size_chat = 0
    calculated_tits_title_chat = "–ü–ª–æ—Å–∫–æ–¥–æ–Ω–∫–∞ (–≤ —ç—Ç–æ–º —á–∞—Ç–µ)" # –î–µ—Ñ–æ–ª—Ç
    if tits_stat_chat:
        current_tits_size_chat = tits_stat_chat.get("tits_size", 0)
        for size_threshold, (title_name, _) in sorted(TITS_TITLES_BY_SIZE.items()):
            if current_tits_size_chat >= size_threshold: calculated_tits_title_chat = title_name
            else: break
    reply_text += f"\n  <b>–†–∞–∑–º–µ—Ä:</b> {current_tits_size_chat}-–π"
    reply_text += f"\n  <b>–°–∏—Å—å–∫–æ-–ó–≤–∞–Ω–∏–µ (–∑–¥–µ—Å—å):</b> {calculated_tits_title_chat}"

    await context.bot.send_message(chat_id=chat_id, text=reply_text, parse_mode='HTML')
# --- –ö–û–ù–ï–¶ –ò–°–ü–†–ê–í–õ–ï–ù–ù–û–ô –§–£–ù–ö–¶–ò–ò /whoami ---

# –£–±–µ–¥–∏—Å—å, —á—Ç–æ –∏–º–ø–æ—Ä—Ç—ã asyncio, logging –∏ –∫–æ–ª–ª–µ–∫—Ü–∏—è history_collection –æ–ø—Ä–µ–¥–µ–ª–µ–Ω—ã –≤—ã—à–µ

# --- –§–û–ù–û–í–ê–Ø –ó–ê–î–ê–ß–ê –û–ë–ù–û–í–õ–ï–ù–ò–Ø –ò–ú–ï–ù–ò –í –ò–°–¢–û–†–ò–ò ---
async def update_history_with_new_name(user_id: int, new_nickname: str, context: ContextTypes.DEFAULT_TYPE):
    logger.info(f"–ù–∞—á–∏–Ω–∞—é —Ñ–æ–Ω–æ–≤–æ–µ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ –∏–º–µ–Ω–∏ –Ω–∞ '{new_nickname}' –≤ –∏—Å—Ç–æ—Ä–∏–∏ –¥–ª—è user_id {user_id}...")
    try:
        loop = asyncio.get_running_loop()
        result = await loop.run_in_executor(
            None,
            lambda: history_collection.update_many(
                {"user_id": user_id}, # –ù–∞–π—Ç–∏ –≤—Å–µ —Å–æ–æ–±—â–µ–Ω–∏—è —ç—Ç–æ–≥–æ —é–∑–µ—Ä–∞
                {"$set": {"user_name": new_nickname}} # –ó–∞–º–µ–Ω–∏—Ç—å user_name –Ω–∞ –Ω–æ–≤—ã–π –Ω–∏–∫
            )
        )
        logger.info(f"–û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –∏–º–µ–Ω–∏ –≤ –∏—Å—Ç–æ—Ä–∏–∏ –¥–ª—è user_id {user_id} –∑–∞–≤–µ—Ä—à–µ–Ω–æ: –ù–∞–π–¥–µ–Ω–æ={result.matched_count}, –û–±–Ω–æ–≤–ª–µ–Ω–æ={result.modified_count}")
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ —Ñ–æ–Ω–æ–≤–æ–≥–æ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –∏–º–µ–Ω–∏ –≤ –∏—Å—Ç–æ—Ä–∏–∏ –¥–ª—è user_id {user_id}: {e}", exc_info=True)
# --- –ö–û–ù–ï–¶ –§–û–ù–û–í–û–ô –ó–ê–î–ê–ß–ò ---

# --- –ò–ó–ú–ï–ù–ï–ù–ù–ê–Ø grow_penis (–° –ù–ê–ö–ê–ó–ê–ù–ò–ï–ú –ó–ê –ß–ê–°–¢–£–Æ –î–†–û–ß–ö–£ –ò –ö–û–ú–ü–ï–ù–°–ê–¶–ò–ï–ô) ---
async def grow_penis(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    # --->>> –ù–ê–ß–ê–õ–û –ü–†–û–í–ï–†–ö–ò –¢–ï–•–†–ê–ë–û–¢ (–∫–æ–¥ –∫–∞–∫ –±—ã–ª) <<<---
    if not update or not update.message or not update.message.from_user or not update.message.chat:
         logger.warning(f"grow_penis: –Ω–µ—Ç –¥–∞–Ω–Ω—ã—Ö –≤ update –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ —Ç–µ—Ö—Ä–∞–±–æ—Ç") # –ò–∑–º–µ–Ω–∏–ª –∏–º—è —Ñ—É–Ω–∫—Ü–∏–∏ –≤ –ª–æ–≥–µ
         return
    real_chat_id = update.message.chat.id; real_user_id = update.message.from_user.id; real_chat_type = update.message.chat.type
    try: admin_id = int(os.getenv("ADMIN_USER_ID", "0"))
    except ValueError: admin_id = 0
    if admin_id == 0: logger.warning("ADMIN_USER_ID –Ω–µ –∑–∞–¥–∞–Ω –¥–ª—è grow_penis!")
    loop_for_maint = asyncio.get_running_loop()
    maintenance_active = await is_maintenance_mode(loop_for_maint)
    if maintenance_active and (real_user_id != admin_id or real_chat_type != 'private'):
        logger.info(f"–ö–æ–º–∞–Ω–¥–∞ grow_penis –æ—Ç–∫–ª–æ–Ω–µ–Ω–∞ –∏–∑-–∑–∞ —Ç–µ—Ö—Ä–∞–±–æ—Ç –≤ —á–∞—Ç–µ {real_chat_id}")
        try:
            await context.bot.send_message(chat_id=real_chat_id, text="üîß –°–æ—Ä—è–Ω, —É –º–µ–Ω—è —Å–µ–π—á–∞—Å —Ç–µ—Ö–Ω–∏—á–µ—Å–∫–∏–µ —Ä–∞–±–æ—Ç—ã. –ü–æ–ø—Ä–æ–±—É–π –ø–æ–∑–∂–µ.")
            await context.bot.delete_message(chat_id=real_chat_id, message_id=update.message.message_id)
        except Exception as e: logger.warning(f"–ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–≤–µ—Ç–∏—Ç—å/—É–¥–∞–ª–∏—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ –æ —Ç–µ—Ö—Ä–∞–±–æ—Ç–∞—Ö (grow_penis): {e}")
        return
    # --->>> –ö–û–ù–ï–¶ –ü–†–û–í–ï–†–ö–ò –¢–ï–•–†–ê–ë–û–¢ <<<---

    if not update.message or not update.message.from_user or not update.message.chat: return # –ü–æ–≤—Ç–æ—Ä–Ω–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞
    user = update.message.from_user
    chat_id = update.message.chat.id
    loop = asyncio.get_running_loop()

    profile_data_for_name = await get_user_profile_data(user)
    user_display_name = profile_data_for_name["display_name"]

    logger.info(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å '{user_display_name}' (ID: {user.id}) –¥–µ—Ä–≥–∞–µ—Ç –ø–∏—Å—å–∫–æ–º–µ—Ä –≤ —á–∞—Ç–µ {chat_id}.")

    penis_stat = await loop.run_in_executor(
        None, lambda: penis_stats_collection.find_one({"user_id": user.id, "chat_id": chat_id})
    )

    last_growth_time = datetime.datetime.fromtimestamp(0, datetime.timezone.utc)
    current_penis_size = 0
    current_penis_title_from_db = None
    warned_during_cooldown = False

    if penis_stat:
        current_penis_size = penis_stat.get("penis_size", 0)
        current_penis_title_from_db = penis_stat.get("current_penis_title")
        warned_during_cooldown = penis_stat.get("warned_during_cooldown", False)
        _last_growth_from_db = penis_stat.get("last_penis_growth")
        if isinstance(_last_growth_from_db, datetime.datetime):
            last_growth_time = _last_growth_from_db.replace(tzinfo=datetime.timezone.utc) if _last_growth_from_db.tzinfo is None else _last_growth_from_db

    current_time = datetime.datetime.now(datetime.timezone.utc)
    time_since_last_growth = (current_time - last_growth_time).total_seconds()

    # --->>> –õ–û–ì–ò–ö–ê –ö–£–õ–î–ê–£–ù–ê –ò –ù–ê–ö–ê–ó–ê–ù–ò–Ø (–∫–æ–¥ –∫–∞–∫ –±—ã–ª, –¥–æ –º–æ–º–µ–Ω—Ç–∞ –æ–±—ã—á–Ω–æ–≥–æ —Ä–æ—Å—Ç–∞/—É—Å—ã—Ö–∞–Ω–∏—è) <<<---
    if time_since_last_growth < PENIS_GROWTH_COOLDOWN_SECONDS:
        remaining_time = PENIS_GROWTH_COOLDOWN_SECONDS - time_since_last_growth
        h = int(remaining_time // 3600); m = int((remaining_time % 3600) // 60)
        if not warned_during_cooldown:
            await context.bot.send_message(chat_id=chat_id, text=f"üóø –≠, {user_display_name}, —Ç—ã –∑–∞–µ–±–∞–ª! –¢–≤–æ–π —Å—Ç—Ä—É—á–æ–∫ –µ—â–µ –Ω–∞ –∫—É–ª–¥–∞—É–Ω–µ! –û—Å—Ç–∞–ª–æ—Å—å <b>{h} —á {m} –º–∏–Ω</b>. –ï—â–µ —Ä–∞–∑ –¥–µ—Ä–Ω–µ—à—å - —É–∫–æ—Ä–æ—á—É –Ω–∞—Ö—É–π!", parse_mode='HTML')
            await loop.run_in_executor(None, lambda: penis_stats_collection.update_one({"user_id": user.id, "chat_id": chat_id},{"$set": {"warned_during_cooldown": True}}, upsert=True))
            logger.info(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {user_display_name} –ø–æ–ª—É—á–∏–ª –ø—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏–µ –∑–∞ —á–∞—Å—Ç—É—é –¥—Ä–æ—á–∫—É –ø–∏—Å—é–Ω–∞.")
        else:
            shrink_amount = random.randint(1, 15)
            new_size_after_punishment = max(0, current_penis_size - shrink_amount) # –ù–µ –º–æ–∂–µ—Ç –±—ã—Ç—å –º–µ–Ω—å—à–µ 0
            logger.info(f"–ù–ê–ö–ê–ó–ê–ù–ò–ï! –ü–∏—Å—é–Ω {user_display_name} –≤ —á–∞—Ç–µ {chat_id} –£–ö–û–†–û–ß–ï–ù –Ω–∞ {shrink_amount} —Å–º –∑–∞ –∑–∞–µ–±—ã–≤–∞–Ω–∏–µ, —Ç–µ–ø–µ—Ä—å {new_size_after_punishment} —Å–º! –ö—É–ª–¥–∞—É–Ω —Å–±—Ä–æ—à–µ–Ω.")
            await context.bot.send_message(chat_id=chat_id, text=f"üóø –ê–• –¢–´ –ñ –•–£–ï–°–û–° –ù–ï–¢–ï–†–ü–ï–õ–ò–í–´–ô, {user_display_name}! –Ø –ñ–ï –ü–†–ï–î–£–ü–†–ï–ñ–î–ê–õ! –¢–≤–æ–π –ø–∏—Å—é–Ω **–£–°–û–• –Ω–∞ {shrink_amount} —Å–º** –∑–∞ —Ç–≤–æ–µ –∑–∞–µ–±–∞–ª–æ–≤–æ! –¢–µ–ø–µ—Ä—å –æ–Ω <b>{new_size_after_punishment} —Å–º</b>! –ö—É–ª–¥–∞—É–Ω —Å–±—Ä–æ—à–µ–Ω, –º–æ–∂–µ—à—å –¥—Ä–æ—á–∏—Ç—å –∑–∞–Ω–æ–≤–æ —á–µ—Ä–µ–∑ {PENIS_GROWTH_COOLDOWN_SECONDS // 3600} —á–∞—Å–æ–≤, –µ—Å–ª–∏ –µ—â–µ –µ—Å—Ç—å —á—Ç–æ.", parse_mode='HTML')
            await loop.run_in_executor(None, lambda: penis_stats_collection.update_one({"user_id": user.id, "chat_id": chat_id},{"$set": {"penis_size": new_size_after_punishment, "last_penis_growth": current_time, "warned_during_cooldown": False}}, upsert=True))
            # –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞ –∏–∑–º–µ–Ω–µ–Ω–∏–µ –∑–≤–∞–Ω–∏—è –ø–æ—Å–ª–µ —É–∫–æ—Ä–æ—á–µ–Ω–∏—è (–ª–æ–≥–∏–∫–∞ –∫–∞–∫ –±—ã–ª–∞)
            new_penis_title_achieved_punish = None; new_penis_title_message_punish = ""
            for size_threshold, (title_name, achievement_message) in sorted(PENIS_TITLES_BY_SIZE.items()):
                if new_size_after_punishment >= size_threshold: new_penis_title_achieved_punish = title_name; new_penis_title_message_punish = achievement_message
                else: break
            if new_penis_title_achieved_punish != current_penis_title_from_db:
                if new_penis_title_achieved_punish:
                     await loop.run_in_executor(None, lambda: penis_stats_collection.update_one({"user_id": user.id, "chat_id": chat_id},{"$set": {"current_penis_title": new_penis_title_achieved_punish}}))
                     mention = user.mention_html(); achievement_text = new_penis_title_message_punish.format(mention=mention, size=new_size_after_punishment)
                     await context.bot.send_message(chat_id=chat_id, text=achievement_text, parse_mode='HTML')
                elif current_penis_title_from_db:
                     await loop.run_in_executor(None, lambda: penis_stats_collection.update_one({"user_id": user.id, "chat_id": chat_id},{"$set": {"current_penis_title": None}}))
                     await context.bot.send_message(chat_id=chat_id, text=f"üóø {user.mention_html()}, –ø–æ—Å–ª–µ —É–∫–æ—Ä–æ—á–µ–Ω–∏—è —Ç—ã –ø–æ—Ç–µ—Ä—è–ª –≤—Å–µ –ø–∏—Å–µ—á–Ω—ã–µ –∑–≤–∞–Ω–∏—è! –ñ–∞–ª–∫–∏–π.", parse_mode='HTML')
        return
    # --->>> –ö–û–ù–ï–¶ –õ–û–ì–ò–ö–ò –ö–£–õ–î–ê–£–ù–ê <<<---

    # –ï—Å–ª–∏ –∫—É–ª–¥–∞—É–Ω –ø—Ä–æ—à–µ–ª - —Å—Ç–∞–Ω–¥–∞—Ä—Ç–Ω–∞—è –ª–æ–≥–∏–∫–∞ —Ä–æ—Å—Ç–∞/—É—Å—ã—Ö–∞–Ω–∏—è
    new_penis_size = current_penis_size
    change_message = ""
    change_amount_penis = random.randint(1, 30)
    penis_shrunk_naturally = False # –§–ª–∞–≥ –¥–ª—è –æ—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏—è –µ—Å—Ç–µ—Å—Ç–≤–µ–Ω–Ω–æ–≥–æ —É—Å—ã—Ö–∞–Ω–∏—è

    if random.random() < 0.003: # 0.3% —à–∞–Ω—Å –Ω–∞ —É–∫–æ—Ä–æ—á–µ–Ω–∏–µ (–æ–±—ã—á–Ω–æ–µ)
        penis_shrunk_naturally = True
        new_penis_size = max(0, current_penis_size - change_amount_penis) # –ù–µ –º–æ–∂–µ—Ç –±—ã—Ç—å –º–µ–Ω—å—à–µ 0
        logger.info(f"–ü–∏—Å—é–Ω {user_display_name} –≤ —á–∞—Ç–µ {chat_id} –í–ù–ï–ó–ê–ü–ù–û –£–ö–û–†–û–¢–ò–õ–°–Ø –Ω–∞ {change_amount_penis} —Å–º, —Ç–µ–ø–µ—Ä—å {new_penis_size} —Å–º!")
        change_message = f"üóø –ë–õ–Ø–¢–¨, {user_display_name}! –ù–µ–≤–µ–¥–æ–º–∞—è —Ö—É–π–Ω—è! –¢–≤–æ–π –ø–∏—Å—é–Ω **–í–ù–ï–ó–ê–ü–ù–û –£–°–û–• –Ω–∞ {change_amount_penis} —Å–º**! –¢–µ–ø–µ—Ä—å –æ–Ω –∂–∞–ª–∫–∏–µ <b>{new_penis_size} —Å–º</b>! –ö–∞—Ä–º–∞, —Å—É–∫–∞."
    else: # –†–æ—Å—Ç
        new_penis_size += change_amount_penis
        logger.info(f"–ü–∏—Å—é–Ω {user_display_name} –≤ —á–∞—Ç–µ {chat_id} –≤—ã—Ä–æ—Å –Ω–∞ {change_amount_penis} —Å–º, —Ç–µ–ø–µ—Ä—å {new_penis_size} —Å–º.")
        change_message = f"üóø {user_display_name}, —Ç–≤–æ–π —Ö—É–µ—Ü –≤ —ç—Ç–æ–º —á–∞—Ç–µ –ø–æ–¥—Ä–æ—Å –Ω–∞ <b>{change_amount_penis} —Å–º</b>! –¢–µ–ø–µ—Ä—å –æ–Ω <b>{new_penis_size} —Å–º</b>!"

    try:
        update_doc_penis = {
            "$set": {"penis_size": new_penis_size, "last_penis_growth": current_time, "warned_during_cooldown": False, "user_display_name": user_display_name},
            "$setOnInsert": {"user_id": user.id, "chat_id": chat_id, "current_penis_title": None} # –î–æ–±–∞–≤–ª—è–µ–º user_id –∏ chat_id –ø—Ä–∏ –ø–µ—Ä–≤–æ–π –≤—Å—Ç–∞–≤–∫–µ
        }
        # –ü—Ä–µ–¥–æ—Ç–≤—Ä–∞—â–∞–µ–º –¥—É–±–ª–∏—Ä–æ–≤–∞–Ω–∏–µ –ø–æ–ª–µ–π –≤ $set –∏ $setOnInsert
        if "$setOnInsert" in update_doc_penis and "$set" in update_doc_penis:
            for key_to_pop in ["penis_size", "last_penis_growth", "warned_during_cooldown", "user_display_name"]:
                update_doc_penis["$setOnInsert"].pop(key_to_pop, None)


        await loop.run_in_executor(None, lambda: penis_stats_collection.update_one(
            {"user_id": user.id, "chat_id": chat_id},
            update_doc_penis,
            upsert=True
        ))
        await context.bot.send_message(chat_id=chat_id, text=change_message, parse_mode='HTML')

        # --->>> –õ–û–ì–ò–ö–ê –ö–û–ú–ü–ï–ù–°–ê–¶–ò–ò, –ï–°–õ–ò –ü–ò–°–¨–ö–ê –£–°–û–•–õ–ê –ï–°–¢–ï–°–¢–í–ï–ù–ù–û <<<---
        if penis_shrunk_naturally:
            if random.random() < 0.52: # 52% —à–∞–Ω—Å –Ω–∞ –∫–æ–º–ø–µ–Ω—Å–∞—Ü–∏—é
                logger.info(f"–ü–∏—Å—é–Ω {user_display_name} —É—Å–æ—Ö, –Ω–æ –ø–æ–≤–µ–∑–ª–æ! –ö–æ–º–ø–µ–Ω—Å–∞—Ü–∏—è —Å–∏—Å—å–∫–∞–º–∏.")
                # –ü–æ–ª—É—á–∞–µ–º —Ç–µ–∫—É—â–∏–π —Ä–∞–∑–º–µ—Ä —Å–∏—Å–µ–∫
                tits_stat_for_compensation = await loop.run_in_executor(
                    None, lambda: tits_stats_collection.find_one({"user_id": user.id, "chat_id": chat_id})
                )
                current_tits_size_comp = 0.0
                current_tits_title_db_comp = None
                if tits_stat_for_compensation:
                    current_tits_size_comp = float(tits_stat_for_compensation.get("tits_size", 0.0))
                    current_tits_title_db_comp = tits_stat_for_compensation.get("current_tits_title")

                tits_growth_compensation = 0.5
                new_tits_size_comp = round(current_tits_size_comp + tits_growth_compensation, 1)

                await loop.run_in_executor(None, lambda: tits_stats_collection.update_one(
                    {"user_id": user.id, "chat_id": chat_id},
                    {"$set": {"tits_size": new_tits_size_comp, "user_display_name": user_display_name}, # –ù–µ –æ–±–Ω–æ–≤–ª—è–µ–º last_tits_growth –∑–¥–µ—Å—å, —á—Ç–æ–±—ã –Ω–µ —Å–±–∏–≤–∞—Ç—å –∫—É–ª–¥–∞—É–Ω —Å–∏—Å–µ–∫
                     "$setOnInsert": {"user_id": user.id, "chat_id": chat_id, "last_tits_growth": datetime.datetime.fromtimestamp(0, datetime.timezone.utc), "current_tits_title": None, "warned_during_cooldown": False}},
                    upsert=True
                ))
                await context.bot.send_message(chat_id=chat_id, text=f"üóø –ù–æ –Ω–µ —Å—Å—ã, {user_display_name}! –ü–æ–ø–∏–∑–¥—è–∫–∞ —Å–µ–≥–æ–¥–Ω—è –¥–æ–±—Ä—ã–π (–Ω–µ—Ç). –ó–∞—Ç–æ —Ç–≤–æ–∏ —Å–∏—Å—å–∫–∏ –í–ù–ï–ó–ê–ü–ù–û **—É–≤–µ–ª–∏—á–∏–ª–∏—Å—å –Ω–∞ {tits_growth_compensation} —Ä–∞–∑–º–µ—Ä–∞** –∏ —Å—Ç–∞–ª–∏ <b>{new_tits_size_comp:.1f}-–≥–æ</b>! –¢–∞–∫–æ–π –≤–æ—Ç –±–∞–ª–∞–Ω—Å –≤–æ –≤—Å–µ–ª–µ–Ω–Ω–æ–π, —Ö—É–ª–∏.", parse_mode='HTML')

                # –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞ –Ω–æ–≤–æ–µ —Å–∏—Å–µ—á–Ω–æ–µ –∑–≤–∞–Ω–∏–µ –ø–æ—Å–ª–µ –∫–æ–º–ø–µ–Ω—Å–∞—Ü–∏–∏
                new_tits_title_achieved_comp = None; new_tits_title_message_comp = ""
                for size_thresh_tits, (title_name_tits, achievement_msg_tits) in sorted(TITS_TITLES_BY_SIZE.items()):
                    if new_tits_size_comp >= float(size_thresh_tits): new_tits_title_achieved_comp = title_name_tits; new_tits_title_message_comp = achievement_msg_tits
                    else: break
                if new_tits_title_achieved_comp != current_tits_title_db_comp:
                     if new_tits_title_achieved_comp:
                        await loop.run_in_executor(None, lambda: tits_stats_collection.update_one({"user_id": user.id, "chat_id": chat_id},{"$set": {"current_tits_title": new_tits_title_achieved_comp}}))
                        mention_comp_tits = user.mention_html(); achievement_text_comp_tits = new_tits_title_message_comp.format(mention=mention_comp_tits, size=f"{new_tits_size_comp:.1f}")
                        await context.bot.send_message(chat_id=chat_id, text=achievement_text_comp_tits, parse_mode='HTML')
                     # –õ–æ–≥–∏–∫—É –ø–æ—Ç–µ—Ä–∏ –∑–≤–∞–Ω–∏—è –º–æ–∂–Ω–æ –æ–ø—É—Å—Ç–∏—Ç—å –¥–ª—è –∫–æ–º–ø–µ–Ω—Å–∞—Ü–∏–∏, —á—Ç–æ–±—ã –Ω–µ —Å–ø–∞–º–∏—Ç—å
            else:
                logger.info(f"–ü–∏—Å—é–Ω {user_display_name} —É—Å–æ—Ö, –∏ –∫–æ–º–ø–µ–Ω—Å–∞—Ü–∏–∏ –Ω–µ –±—É–¥–µ—Ç. –ù–µ –ø–æ–≤–µ–∑–ª–æ.")
                await context.bot.send_message(chat_id=chat_id, text=f"üóø –ê –∫–æ–º–ø–µ–Ω—Å–∞—Ü–∏–∏ –Ω–µ –±—É–¥–µ—Ç, {user_display_name}. –°–µ–≥–æ–¥–Ω—è —Ç—ã –ø—Ä–æ—Å—Ç–æ –Ω–µ—É–¥–∞—á–Ω–∏–∫ —Å –º–∞–ª–µ–Ω—å–∫–∏–º –ø–∏—Å—é–Ω–æ–º. –°–º–∏—Ä–∏—Å—å.", parse_mode='HTML')
        # --->>> –ö–û–ù–ï–¶ –õ–û–ì–ò–ö–ò –ö–û–ú–ü–ï–ù–°–ê–¶–ò–ò <<<---

        # –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞ –Ω–æ–≤–æ–µ –ø–∏—Å–µ—á–Ω–æ–µ –∑–≤–∞–Ω–∏–µ (–ª–æ–≥–∏–∫–∞ –∫–∞–∫ –±—ã–ª–∞)
        new_penis_title_achieved = None; new_penis_title_message = ""
        for size_threshold, (title_name, achievement_message) in sorted(PENIS_TITLES_BY_SIZE.items()):
            if new_penis_size >= size_threshold: new_penis_title_achieved = title_name; new_penis_title_message = achievement_message
            else: break
        if new_penis_title_achieved != current_penis_title_from_db:
             if new_penis_title_achieved:
                await loop.run_in_executor(None, lambda: penis_stats_collection.update_one({"user_id": user.id, "chat_id": chat_id},{"$set": {"current_penis_title": new_penis_title_achieved}}))
                mention = user.mention_html(); achievement_text = new_penis_title_message.format(mention=mention, size=new_penis_size)
                await context.bot.send_message(chat_id=chat_id, text=achievement_text, parse_mode='HTML')
             elif current_penis_title_from_db: # –ï—Å–ª–∏ –∑–≤–∞–Ω–∏–µ –±—ã–ª–æ, –∞ —Ç–µ–ø–µ—Ä—å –Ω–µ—Ç (–∏–∑-–∑–∞ —É—Å—ã—Ö–∞–Ω–∏—è)
                await loop.run_in_executor(None, lambda: penis_stats_collection.update_one({"user_id": user.id, "chat_id": chat_id},{"$set": {"current_penis_title": None}}))
                await context.bot.send_message(chat_id=chat_id, text=f"üóø {user.mention_html()}, –ø–æ—Å–ª–µ –∏–∑–º–µ–Ω–µ–Ω–∏—è —Ç—ã –ø–æ—Ç–µ—Ä—è–ª –≤—Å–µ –ø–∏—Å–µ—á–Ω—ã–µ –∑–≤–∞–Ω–∏—è!", parse_mode='HTML')

    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –∏–∑–º–µ–Ω–µ–Ω–∏–∏ –ø–∏—Å—å–∫–∏ –¥–ª—è {user_display_name} –≤ —á–∞—Ç–µ {chat_id}: {e}", exc_info=True)
        await context.bot.send_message(chat_id=chat_id, text=f"üóø –ë–ª—è, {user_display_name}, —Å —Ö—É–µ–º –æ–ø—è—Ç—å –µ–±–∞–Ω–∏–Ω–∞ –∫–∞–∫–∞—è-—Ç–æ. –ü–æ–ø—Ä–æ–±—É–π –ø–æ–∑–∂–µ.")
# --- –ö–û–ù–ï–¶ –ò–ó–ú–ï–ù–ï–ù–ù–û–ô grow_penis ---
# --- –ü–ï–†–ï–ü–ò–°–ê–ù–ù–ê–Ø show_my_penis (–î–õ–Ø –°–¢–ê–¢–ò–°–¢–ò–ö–ò –ü–û –ß–ê–¢–ê–ú) ---
async def show_my_penis(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    if not update.message or not update.message.from_user or not update.message.chat: return
    user = update.message.from_user
    chat_id = update.message.chat.id # –í–ê–ñ–ù–û
    loop = asyncio.get_running_loop()

    profile_name_data = await get_user_profile_data(user) # –î–ª—è –∞–∫—Ç—É–∞–ª—å–Ω–æ–≥–æ –∏–º–µ–Ω–∏
    user_display_name = profile_name_data["display_name"]
    logger.info(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å '{user_display_name}' (ID: {user.id}) –∑–∞–ø—Ä–æ—Å–∏–ª –∏–Ω—Ñ—É –æ –ø–∏—Å—é–Ω–µ –≤ —á–∞—Ç–µ {chat_id}.")

    # –ü–æ–ª—É—á–∞–µ–º –ø–∏—Å—å–∫–æ-—Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –¥–ª—è –≠–¢–û–ì–û –Æ–ó–ï–†–ê –≤ –≠–¢–û–ú –ß–ê–¢–ï
    penis_stat = await loop.run_in_executor(
        None, lambda: penis_stats_collection.find_one({"user_id": user.id, "chat_id": chat_id})
    )

    current_penis_size = 0
    current_penis_title = "–ù–µ–∏–∑–º–µ—Ä—è–µ–º—ã–π –æ—Ç—Ä–æ—Å—Ç–æ–∫" # –î–µ—Ñ–æ–ª—Ç
    if penis_stat:
        current_penis_size = penis_stat.get("penis_size", 0)
        # –û–ø—Ä–µ–¥–µ–ª—è–µ–º –∑–≤–∞–Ω–∏–µ –ø–æ —Ç–µ–∫—É—â–µ–º—É —Ä–∞–∑–º–µ—Ä—É (–º–æ–∂–Ω–æ –≤–∑—è—Ç—å –∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–Ω–æ–µ, –µ—Å–ª–∏ –æ–Ω–æ –µ—Å—Ç—å)
        for size_threshold, (title_name, _) in sorted(PENIS_TITLES_BY_SIZE.items()):
             if current_penis_size >= size_threshold: current_penis_title = title_name
             else: break
        # current_penis_title = penis_stat.get("current_penis_title") or current_penis_title

    reply_text = f"üóø –ò—Ç–∞–∫, {user_display_name}, —Ç–≤–æ—è –ø–∏—Å—è–Ω–¥—Ä–∞ –≤ —á–∞—Ç–µ <b>'{update.message.chat.title or '—ç—Ç–æ–º'}'</b>:\n\n" # –£—Ç–æ—á–Ω—è–µ–º —á–∞—Ç
    reply_text += f"<b>–î–ª–∏–Ω–∞:</b> {current_penis_size} —Å–º.\n"
    reply_text += f"<b>–ü–∏—Å—å–∫–æ-–ó–≤–∞–Ω–∏–µ:</b> {current_penis_title}.\n\n"
    # ... (–∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–∏ –ø–æ —Ä–∞–∑–º–µ—Ä—É –∫–∞–∫ –±—ã–ª–∏) ...
    await context.bot.send_message(chat_id=chat_id, text=reply_text, parse_mode='HTML')
# --- –ö–û–ù–ï–¶ –ü–ï–†–ï–ü–ò–°–ê–ù–ù–û–ô show_my_penis ---

# --- –ü–ï–†–ï–ü–ò–°–ê–ù–ù–ê–Ø show_penis_top (–¢–û–ü –ü–û –ö–û–ù–ö–†–ï–¢–ù–û–ú–£ –ß–ê–¢–£) ---
async def show_penis_top(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    # --->>> –ù–ê–ß–ê–õ–û –ü–†–û–í–ï–†–ö–ò –¢–ï–•–†–ê–ë–û–¢ (–í–°–¢–ê–í–¨ –í –ö–ê–ñ–î–£–Æ –ö–û–ú–ê–ù–î–ù–£–Æ –§–£–ù–ö–¶–ò–Æ!) <<<---
    if not update or not update.message or not update.message.from_user or not update.message.chat:
         logger.warning(f"grow_tits: –Ω–µ—Ç –¥–∞–Ω–Ω—ã—Ö –≤ update –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ —Ç–µ—Ö—Ä–∞–±–æ—Ç")
         return
    real_chat_id = update.message.chat.id; real_user_id = update.message.from_user.id; real_chat_type = update.message.chat.type
    try: admin_id = int(os.getenv("ADMIN_USER_ID", "0"))
    except ValueError: admin_id = 0
    if admin_id == 0: logger.warning("ADMIN_USER_ID –Ω–µ –∑–∞–¥–∞–Ω –¥–ª—è grow_tits!") # –ú–æ–∂–Ω–æ —É–±—Ä–∞—Ç—å —ç—Ç–æ –ª–æ–≥–≥–∏—Ä–æ–≤–∞–Ω–∏–µ –≤ –∫–∞–∂–¥–æ–π —Ñ—É–Ω–∫—Ü–∏–∏
    loop_for_maint = asyncio.get_running_loop() # –û—Ç–¥–µ–ª—å–Ω—ã–π loop –¥–ª—è –≤—ã–∑–æ–≤–∞ is_maintenance_mode
    maintenance_active = await is_maintenance_mode(loop_for_maint)
    if maintenance_active and (real_user_id != admin_id or real_chat_type != 'private'):
        logger.info(f"–ö–æ–º–∞–Ω–¥–∞ grow_tits –æ—Ç–∫–ª–æ–Ω–µ–Ω–∞ –∏–∑-–∑–∞ —Ç–µ—Ö—Ä–∞–±–æ—Ç –≤ —á–∞—Ç–µ {real_chat_id}")
        try:
            await context.bot.send_message(chat_id=real_chat_id, text="üîß –°–æ—Ä—è–Ω, —É –º–µ–Ω—è —Å–µ–π—á–∞—Å —Ç–µ—Ö–Ω–∏—á–µ—Å–∫–∏–µ —Ä–∞–±–æ—Ç—ã. –ü–æ–ø—Ä–æ–±—É–π –ø–æ–∑–∂–µ.")
            await context.bot.delete_message(chat_id=real_chat_id, message_id=update.message.message_id)
        except Exception as e: logger.warning(f"–ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–≤–µ—Ç–∏—Ç—å/—É–¥–∞–ª–∏—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ –æ —Ç–µ—Ö—Ä–∞–±–æ—Ç–∞—Ö (grow_tits): {e}")
        return
    # --->>> –ö–û–ù–ï–¶ –ü–†–û–í–ï–†–ö–ò –¢–ï–•–†–ê–ë–û–¢ <<<---

    if not update.message or not update.message.from_user or not update.message.chat: return
    chat_id = update.message.chat.id # –í–ê–ñ–ù–û: –∏—Å–ø–æ–ª—å–∑—É–µ–º chat_id –¢–ï–ö–£–©–ï–ì–û –ß–ê–¢–ê
    user_name_who_requested = update.message.from_user.first_name or "–õ—é–±–∏—Ç–µ–ª—å –†–µ–π—Ç–∏–Ω–≥–æ–≤"
    chat_title = update.message.chat.title or "—ç—Ç–æ–≥–æ –∑–∞–¥—Ä–∏–ø–∞–Ω–Ω–æ–≥–æ —á–∞—Ç–∞"
    logger.info(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å '{user_name_who_requested}' –∑–∞–ø—Ä–æ—Å–∏–ª —Ç–æ–ø –ø–∏—Å–µ–∫ –≤ —á–∞—Ç–µ '{chat_title}' ({chat_id})")

    TOP_N = 10
    try:
        loop = asyncio.get_running_loop()
        # –ò—â–µ–º —é–∑–µ—Ä–æ–≤ –° penis_size > 0 –ò–ú–ï–ù–ù–û –í –≠–¢–û–ú –ß–ê–¢–ï
        query = {"chat_id": chat_id, "penis_size": {"$gt": 0}}
        # –°–æ—Ä—Ç–∏—Ä—É–µ–º –ø–æ penis_size, –±–µ—Ä–µ–º TOP_N
        # –í–æ–∑–≤—Ä–∞—â–∞–µ–º user_display_name (–º—ã –µ–≥–æ –¥—É–±–ª–∏—Ä—É–µ–º) –∏ penis_size
        top_users_cursor = await loop.run_in_executor(
            None,
            lambda: penis_stats_collection.find(
                query,
                {"user_display_name": 1, "penis_size": 1, "_id": 0}
            ).sort("penis_size", pymongo.DESCENDING).limit(TOP_N)
        )
        top_users_list = list(top_users_cursor)

        if not top_users_list:
            await context.bot.send_message(chat_id=chat_id, text=f"üóø –ü–∏–∑–¥–µ—Ü, –≤ —á–∞—Ç–µ '{chat_title}' –æ–¥–Ω–∏ –±–µ—Å—Ö—É–µ–≤—ã–µ –∏–ª–∏ –µ—â–µ –Ω–∏–∫—Ç–æ –Ω–µ –Ω–∞—á–∞–ª —Ä–∞—Å—Ç–∏—Ç—å! –¢–æ–ø –ø—É—Å—Ç.")
            return

        reply_text_parts = [f"<b>üèÜ –¢–æ–ø-{len(top_users_list)} –®–ª–∞–Ω–≥–æ–≤ –ß–∞—Ç–∞ '{chat_title}':</b>\n"]
        for i, user_data in enumerate(top_users_list):
            # –ë–µ—Ä–µ–º user_display_name, –∫–æ—Ç–æ—Ä—ã–π –º—ã —Å–æ—Ö—Ä–∞–Ω–∏–ª–∏ –≤ penis_stats_collection
            display_name = user_data.get("user_display_name") or "–ê–Ω–æ–Ω–∏–º–Ω—ã–π –î—Ä–æ—á–∏–ª–∞"
            penis_size = user_data.get("penis_size", 0)
            place_emoji = "ü•á" if i == 0 else ("ü•à" if i == 1 else ("ü•â" if i == 2 else f"{i + 1}."))
            reply_text_parts.append(f"{place_emoji} {display_name} - <b>{penis_size} —Å–º</b>")

        final_text = "\n".join(reply_text_parts)
        await context.bot.send_message(chat_id=chat_id, text=final_text, parse_mode='HTML')

    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ —Ç–æ–ø–∞ –ø–∏—Å–µ–∫ –¥–ª—è —á–∞—Ç–∞ {chat_id}: {e}", exc_info=True)
        await context.bot.send_message(chat_id=chat_id, text="üóø –ë–ª—è, –Ω–µ —Å–º–æ–≥ —Å–æ—Å—Ç–∞–≤–∏—Ç—å —Ä–µ–π—Ç–∏–Ω–≥ —Ö—É–µ–≤ –¥–ª—è —ç—Ç–æ–≥–æ —á–∞—Ç–∞. –ë–∞–∑–∞ –Ω–∞–µ–±–Ω—É–ª–∞—Å—å.")
# --- –ö–û–ù–ï–¶ –ü–ï–†–ï–ü–ò–°–ê–ù–ù–û–ô show_penis_top ---

# --- –ò–ó–ú–ï–ù–ï–ù–ù–ê–Ø grow_tits (–î–†–û–ë–ù–´–ô –†–û–°–¢/–£–°–´–•–ê–ù–ò–ï –ò –ö–û–ú–ü–ï–ù–°–ê–¶–ò–Ø) ---
async def grow_tits(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    # --->>> –ù–ê–ß–ê–õ–û –ü–†–û–í–ï–†–ö–ò –¢–ï–•–†–ê–ë–û–¢ (–∫–æ–¥ –∫–∞–∫ –±—ã–ª) <<<---
    if not update or not update.message or not update.message.from_user or not update.message.chat:
         logger.warning(f"grow_tits: –Ω–µ—Ç –¥–∞–Ω–Ω—ã—Ö –≤ update –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ —Ç–µ—Ö—Ä–∞–±–æ—Ç")
         return
    real_chat_id = update.message.chat.id; real_user_id = update.message.from_user.id; real_chat_type = update.message.chat.type
    try: admin_id = int(os.getenv("ADMIN_USER_ID", "0"))
    except ValueError: admin_id = 0
    if admin_id == 0: logger.warning("ADMIN_USER_ID –Ω–µ –∑–∞–¥–∞–Ω –¥–ª—è grow_tits!")
    loop_for_maint = asyncio.get_running_loop()
    maintenance_active = await is_maintenance_mode(loop_for_maint)
    if maintenance_active and (real_user_id != admin_id or real_chat_type != 'private'):
        logger.info(f"–ö–æ–º–∞–Ω–¥–∞ grow_tits –æ—Ç–∫–ª–æ–Ω–µ–Ω–∞ –∏–∑-–∑–∞ —Ç–µ—Ö—Ä–∞–±–æ—Ç –≤ —á–∞—Ç–µ {real_chat_id}")
        try:
            await context.bot.send_message(chat_id=real_chat_id, text="üîß –°–æ—Ä—è–Ω, —É –º–µ–Ω—è —Å–µ–π—á–∞—Å —Ç–µ—Ö–Ω–∏—á–µ—Å–∫–∏–µ —Ä–∞–±–æ—Ç—ã. –ü–æ–ø—Ä–æ–±—É–π –ø–æ–∑–∂–µ.")
            await context.bot.delete_message(chat_id=real_chat_id, message_id=update.message.message_id)
        except Exception as e: logger.warning(f"–ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–≤–µ—Ç–∏—Ç—å/—É–¥–∞–ª–∏—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ –æ —Ç–µ—Ö—Ä–∞–±–æ—Ç–∞—Ö (grow_tits): {e}")
        return
    # --->>> –ö–û–ù–ï–¶ –ü–†–û–í–ï–†–ö–ò –¢–ï–•–†–ê–ë–û–¢ <<<---

    if not update.message or not update.message.from_user or not update.message.chat: return # –ü–æ–≤—Ç–æ—Ä–Ω–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞
    user = update.message.from_user; chat_id = update.message.chat.id; loop = asyncio.get_running_loop()
    profile_name_data = await get_user_profile_data(user); user_display_name = profile_name_data["display_name"]
    logger.info(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å '{user_display_name}' (ID: {user.id}) —Ä–µ—à–∏–ª(–∞) –∏–∑–º–µ–Ω–∏—Ç—å —Å–∏—Å—å–∫–∏ –≤ —á–∞—Ç–µ {chat_id}.")

    tits_stat = await loop.run_in_executor(None, lambda: tits_stats_collection.find_one({"user_id": user.id, "chat_id": chat_id}))
    last_tits_growth_time = datetime.datetime.fromtimestamp(0, datetime.timezone.utc)
    current_tits_size = 0.0
    current_tits_title_db = None; warned_tits_cooldown = False

    if tits_stat:
        current_tits_size = float(tits_stat.get("tits_size", 0.0))
        current_tits_title_db = tits_stat.get("current_tits_title")
        warned_tits_cooldown = tits_stat.get("warned_during_cooldown", False) # –£–±–µ–¥–∏—Å—å, —á—Ç–æ –ø–æ–ª–µ –Ω–∞–∑—ã–≤–∞–µ—Ç—Å—è —Ç–∞–∫
        _last_tits_growth_db = tits_stat.get("last_tits_growth") # –£–±–µ–¥–∏—Å—å, —á—Ç–æ –ø–æ–ª–µ –Ω–∞–∑—ã–≤–∞–µ—Ç—Å—è —Ç–∞–∫
        if isinstance(_last_tits_growth_db, datetime.datetime):
            last_tits_growth_time = _last_tits_growth_db.replace(tzinfo=datetime.timezone.utc) if _last_tits_growth_db.tzinfo is None else _last_tits_growth_db

    current_time = datetime.datetime.now(datetime.timezone.utc)
    time_since_last_tits_growth = (current_time - last_tits_growth_time).total_seconds()

    # --->>> –õ–û–ì–ò–ö–ê –ö–£–õ–î–ê–£–ù–ê –ò –ù–ê–ö–ê–ó–ê–ù–ò–Ø –î–õ–Ø –°–ò–°–ï–ö (–∫–æ–¥ –∫–∞–∫ –±—ã–ª, –¥–æ –º–æ–º–µ–Ω—Ç–∞ –æ–±—ã—á–Ω–æ–≥–æ —Ä–æ—Å—Ç–∞/—É—Å—ã—Ö–∞–Ω–∏—è) <<<---
    if time_since_last_tits_growth < TITS_GROWTH_COOLDOWN_SECONDS: # –£–±–µ–¥–∏—Å—å, —á—Ç–æ –∫–æ–Ω—Å—Ç–∞–Ω—Ç–∞ TITS_GROWTH_COOLDOWN_SECONDS —Å—É—â–µ—Å—Ç–≤—É–µ—Ç
        remaining_time_tits = TITS_GROWTH_COOLDOWN_SECONDS - time_since_last_tits_growth
        h_tits = int(remaining_time_tits // 3600); m_tits = int((remaining_time_tits % 3600) // 60)
        if not warned_tits_cooldown:
            await context.bot.send_message(chat_id=chat_id, text=f"üóø –≠, {user_display_name}, –Ω–µ —Ç–æ—Ä–æ–ø–∏—Å—å! –¢–≤–æ–∏ –¥—ã–Ω—å–∫–∏ –µ—â–µ –Ω–∞ –∫—É–ª–¥–∞—É–Ω–µ! –û—Å—Ç–∞–ª–æ—Å—å <b>{h_tits} —á {m_tits} –º–∏–Ω</b>. –ï—â–µ —Ä–∞–∑ –ø–æ–ø—Ä–æ—Å–∏—à—å - —Å–¥—É—é—Ç—Å—è –Ω–∞—Ö—É–π!", parse_mode='HTML')
            await loop.run_in_executor(None, lambda: tits_stats_collection.update_one({"user_id": user.id, "chat_id": chat_id},{"$set": {"warned_during_cooldown": True}}, upsert=True))
            logger.info(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {user_display_name} –ø–æ–ª—É—á–∏–ª –ø—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏–µ –∑–∞ —á–∞—Å—Ç—É—é —Ç—Ä—è—Å–∫—É —Å–∏—Å–µ–∫.")
        else:
            shrink_amount_tits_punish = round(random.uniform(0.1, 1.0), 1)
            new_size_tits_after_punish = round(max(0.0, current_tits_size - shrink_amount_tits_punish), 1)
            logger.info(f"–ù–ê–ö–ê–ó–ê–ù–ò–ï! –°–∏—Å—å–∫–∏ {user_display_name} –°–î–£–õ–ò–°–¨ –Ω–∞ {shrink_amount_tits_punish}, —Ç–µ–ø–µ—Ä—å {new_size_tits_after_punish}!")
            await context.bot.send_message(chat_id=chat_id, text=f"üóø –ê–• –¢–´ –ñ –ù–ï–¢–ï–†–ü–ï–õ–ò–í–ê–Ø –°–£–ß–ö–ê, {user_display_name}! –¢–≤–æ–∏ —Å–∏—Å—å–∫–∏ **–°–î–£–õ–ò–°–¨ –Ω–∞ {shrink_amount_tits_punish} —Ä–∞–∑–º–µ—Ä–∞**! –¢–µ–ø–µ—Ä—å –æ–Ω–∏ <b>{new_size_tits_after_punish:.1f}-–≥–æ —Ä–∞–∑–º–µ—Ä–∞</b>! –ö—É–ª–¥–∞—É–Ω —Å–±—Ä–æ—à–µ–Ω.", parse_mode='HTML')
            await loop.run_in_executor(None, lambda: tits_stats_collection.update_one({"user_id": user.id, "chat_id": chat_id},{"$set": {"tits_size": new_size_tits_after_punish, "last_tits_growth": current_time, "warned_during_cooldown": False}}, upsert=True))
            # –ü—Ä–æ–≤–µ—Ä–∫–∞ –∑–≤–∞–Ω–∏—è –ø–æ—Å–ª–µ –Ω–∞–∫–∞–∑–∞–Ω–∏—è (–ª–æ–≥–∏–∫–∞ –∫–∞–∫ –±—ã–ª–∞)
            new_tits_title_achieved_punish = None; new_tits_title_message_punish = ""
            for size_thresh_t, (title_name_t, achievement_msg_t) in sorted(TITS_TITLES_BY_SIZE.items()):
                if new_size_tits_after_punish >= float(size_thresh_t): new_tits_title_achieved_punish = title_name_t; new_tits_title_message_punish = achievement_msg_t
                else: break
            if new_tits_title_achieved_punish != current_tits_title_db:
                 if new_tits_title_achieved_punish:
                    await loop.run_in_executor(None, lambda: tits_stats_collection.update_one({"user_id": user.id, "chat_id": chat_id},{"$set": {"current_tits_title": new_tits_title_achieved_punish}}))
                    mention_t_p = user.mention_html(); achievement_text_t_p = new_tits_title_message_punish.format(mention=mention_t_p, size=f"{new_size_tits_after_punish:.1f}")
                    await context.bot.send_message(chat_id=chat_id, text=achievement_text_t_p, parse_mode='HTML')
                 elif current_tits_title_db:
                    await loop.run_in_executor(None, lambda: tits_stats_collection.update_one({"user_id": user.id, "chat_id": chat_id},{"$set": {"current_tits_title": None}}))
                    await context.bot.send_message(chat_id=chat_id, text=f"üóø {user.mention_html()}, –ø–æ—Å–ª–µ –∏–∑–º–µ–Ω–µ–Ω–∏—è —Ç–≤–æ–∏ —Å–∏—Å—å–∫–∏ –ø–æ—Ç–µ—Ä—è–ª–∏ –≤—Å–µ –∑–≤–∞–Ω–∏—è!", parse_mode='HTML')
        return
    # --->>> –ö–û–ù–ï–¶ –õ–û–ì–ò–ö–ò –ö–£–õ–î–ê–£–ù–ê –î–õ–Ø –°–ò–°–ï–ö <<<---

    new_tits_size = current_tits_size
    change_message_tits = ""
    change_amount_tits = round(random.uniform(0.1, 1.0), 1)
    tits_shrunk_naturally = False # –§–ª–∞–≥ –¥–ª—è –æ—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏—è –µ—Å—Ç–µ—Å—Ç–≤–µ–Ω–Ω–æ–≥–æ —É—Å—ã—Ö–∞–Ω–∏—è

    if random.random() < 0.01: # 1% —à–∞–Ω—Å –Ω–∞ —Å–¥—É—Ç–∏–µ
        tits_shrunk_naturally = True
        new_tits_size = round(max(0.0, current_tits_size - change_amount_tits), 1)
        logger.info(f"–°–∏—Å—å–∫–∏ {user_display_name} –í–ù–ï–ó–ê–ü–ù–û –°–î–£–õ–ò–°–¨ –Ω–∞ {change_amount_tits}, —Ç–µ–ø–µ—Ä—å {new_tits_size}!")
        change_message_tits = f"üóø –ë–õ–Ø–¢–¨, {user_display_name}! –¢–≤–æ–∏ —Å–∏—Å—å–∫–∏ **–í–ù–ï–ó–ê–ü–ù–û –°–î–£–õ–ò–°–¨ –Ω–∞ {change_amount_tits} —Ä–∞–∑–º–µ—Ä–∞**! –¢–µ–ø–µ—Ä—å –æ–Ω–∏ –∂–∞–ª–∫–æ–≥–æ <b>{new_tits_size:.1f}-–≥–æ —Ä–∞–∑–º–µ—Ä–∞</b>!"
    else: # –†–æ—Å—Ç
        new_tits_size = round(current_tits_size + change_amount_tits, 1)
        logger.info(f"–°–∏—Å—å–∫–∏ {user_display_name} –≤—ã—Ä–æ—Å–ª–∏ –Ω–∞ {change_amount_tits}, —Ç–µ–ø–µ—Ä—å {new_tits_size}!")
        change_message_tits = f"üóø {user_display_name}, —Ç–≤–æ–∏ –±–∏–¥–æ–Ω—ã –ø–æ–¥—Ä–æ—Å–ª–∏ –Ω–∞ <b>{change_amount_tits} —Ä–∞–∑–º–µ—Ä–∞</b> –∏ —Å—Ç–∞–ª–∏ <b>{new_tits_size:.1f}-–≥–æ</b>! –ü–æ–∑–¥—Ä–∞–≤–ª—è—é, –µ–±–∞—Ç—å!"

    try:
        update_doc_tits = {
            "$set": {"tits_size": new_tits_size, "last_tits_growth": current_time, "warned_during_cooldown": False, "user_display_name": user_display_name},
            "$setOnInsert": {"user_id": user.id, "chat_id": chat_id, "current_tits_title": None} # –î–æ–±–∞–≤–ª—è–µ–º user_id –∏ chat_id –ø—Ä–∏ –ø–µ—Ä–≤–æ–π –≤—Å—Ç–∞–≤–∫–µ
        }
        # –ü—Ä–µ–¥–æ—Ç–≤—Ä–∞—â–∞–µ–º –¥—É–±–ª–∏—Ä–æ–≤–∞–Ω–∏–µ
        if "$setOnInsert" in update_doc_tits and "$set" in update_doc_tits:
            for key_to_pop in ["tits_size", "last_tits_growth", "warned_during_cooldown", "user_display_name"]:
                 update_doc_tits["$setOnInsert"].pop(key_to_pop, None)


        await loop.run_in_executor(None, lambda: tits_stats_collection.update_one(
            {"user_id": user.id, "chat_id": chat_id},
            update_doc_tits,
            upsert=True
        ))
        await context.bot.send_message(chat_id=chat_id, text=change_message_tits, parse_mode='HTML')

        # --->>> –õ–û–ì–ò–ö–ê –ö–û–ú–ü–ï–ù–°–ê–¶–ò–ò, –ï–°–õ–ò –°–ò–°–¨–ö–ò –£–°–û–•–õ–ò –ï–°–¢–ï–°–¢–í–ï–ù–ù–û <<<---
        if tits_shrunk_naturally:
            if random.random() < 0.52: # 52% —à–∞–Ω—Å –Ω–∞ –∫–æ–º–ø–µ–Ω—Å–∞—Ü–∏—é
                logger.info(f"–°–∏—Å—å–∫–∏ {user_display_name} —Å–¥—É–ª–∏—Å—å, –Ω–æ –ø–æ–≤–µ–∑–ª–æ! –ö–æ–º–ø–µ–Ω—Å–∞—Ü–∏—è –ø–∏—Å—é–Ω–æ–º.")
                # –ü–æ–ª—É—á–∞–µ–º —Ç–µ–∫—É—â–∏–π —Ä–∞–∑–º–µ—Ä –ø–∏—Å—å–∫–∏
                penis_stat_for_compensation = await loop.run_in_executor(
                    None, lambda: penis_stats_collection.find_one({"user_id": user.id, "chat_id": chat_id})
                )
                current_penis_size_comp = 0
                current_penis_title_db_comp = None
                if penis_stat_for_compensation:
                    current_penis_size_comp = penis_stat_for_compensation.get("penis_size", 0)
                    current_penis_title_db_comp = penis_stat_for_compensation.get("current_penis_title")

                penis_growth_compensation = 10 # —Å–º
                new_penis_size_comp = current_penis_size_comp + penis_growth_compensation

                await loop.run_in_executor(None, lambda: penis_stats_collection.update_one(
                    {"user_id": user.id, "chat_id": chat_id},
                    {"$set": {"penis_size": new_penis_size_comp, "user_display_name": user_display_name}, # –ù–µ –æ–±–Ω–æ–≤–ª—è–µ–º last_penis_growth
                     "$setOnInsert": {"user_id": user.id, "chat_id": chat_id, "last_penis_growth": datetime.datetime.fromtimestamp(0, datetime.timezone.utc), "current_penis_title": None, "warned_during_cooldown": False}},
                    upsert=True
                ))
                await context.bot.send_message(chat_id=chat_id, text=f"üóø –ù–æ –Ω–µ –≥–æ—Ä—é–π, {user_display_name}! –í –∫–∞—á–µ—Å—Ç–≤–µ —É—Ç–µ—à–∏—Ç–µ–ª—å–Ω–æ–≥–æ –ø—Ä–∏–∑–∞ —Ç–≤–æ–π –ø–∏—Å—é–Ω –í–ù–ï–ó–ê–ü–ù–û **–ø–æ–¥—Ä–æ—Å –Ω–∞ {penis_growth_compensation} —Å–º** –∏ —Å—Ç–∞–ª <b>{new_penis_size_comp} —Å–º</b>! –ó–∞–∫–æ–Ω —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è —Ö—É–π–Ω–∏ –≤ –ø—Ä–∏—Ä–æ–¥–µ!", parse_mode='HTML')

                # –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞ –Ω–æ–≤–æ–µ –ø–∏—Å–µ—á–Ω–æ–µ –∑–≤–∞–Ω–∏–µ –ø–æ—Å–ª–µ –∫–æ–º–ø–µ–Ω—Å–∞—Ü–∏–∏
                new_penis_title_achieved_comp_p = None; new_penis_title_message_comp_p = ""
                for size_thresh_penis, (title_name_penis, achievement_msg_penis) in sorted(PENIS_TITLES_BY_SIZE.items()):
                    if new_penis_size_comp >= size_thresh_penis: new_penis_title_achieved_comp_p = title_name_penis; new_penis_title_message_comp_p = achievement_msg_penis
                    else: break
                if new_penis_title_achieved_comp_p != current_penis_title_db_comp: # –°—Ä–∞–≤–Ω–∏–≤–∞–µ–º —Å —Ç–µ–º, —á—Ç–æ –±—ã–ª–æ –≤ –ë–î –¥–ª—è –ø–∏—Å–µ–∫
                     if new_penis_title_achieved_comp_p:
                        await loop.run_in_executor(None, lambda: penis_stats_collection.update_one({"user_id": user.id, "chat_id": chat_id},{"$set": {"current_penis_title": new_penis_title_achieved_comp_p}}))
                        mention_comp_penis = user.mention_html(); achievement_text_comp_penis = new_penis_title_message_comp_p.format(mention=mention_comp_penis, size=new_penis_size_comp)
                        await context.bot.send_message(chat_id=chat_id, text=achievement_text_comp_penis, parse_mode='HTML')
            else:
                logger.info(f"–°–∏—Å—å–∫–∏ {user_display_name} —Å–¥—É–ª–∏—Å—å, –∏ –∫–æ–º–ø–µ–Ω—Å–∞—Ü–∏–∏ –Ω–µ –±—É–¥–µ—Ç. –ù–µ –ø–æ–≤–µ–∑–ª–æ.")
                await context.bot.send_message(chat_id=chat_id, text=f"üóø –ò —Ö—É–π —Ç–µ–±–µ, –∞ –Ω–µ –∫–æ–º–ø–µ–Ω—Å–∞—Ü–∏—è, {user_display_name}. –•–æ–¥–∏ —Å –æ–±–≤–∏—Å—à–∏–º–∏ –∏ –±–µ–∑ –±–æ–Ω—É—Å–æ–≤.", parse_mode='HTML')
        # --->>> –ö–û–ù–ï–¶ –õ–û–ì–ò–ö–ò –ö–û–ú–ü–ï–ù–°–ê–¶–ò–ò <<<---

        # –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞ –Ω–æ–≤–æ–µ —Å–∏—Å–µ—á–Ω–æ–µ –∑–≤–∞–Ω–∏–µ (–ª–æ–≥–∏–∫–∞ –∫–∞–∫ –±—ã–ª–∞)
        new_tits_title_achieved = None; new_tits_title_message = ""
        for size_threshold, (title_name, achievement_message) in sorted(TITS_TITLES_BY_SIZE.items()):
            if new_tits_size >= float(size_threshold):
                new_tits_title_achieved = title_name; new_tits_title_message = achievement_message
            else: break
        if new_tits_title_achieved != current_tits_title_db:
             if new_tits_title_achieved:
                await loop.run_in_executor(None, lambda: tits_stats_collection.update_one({"user_id": user.id, "chat_id": chat_id},{"$set": {"current_tits_title": new_tits_title_achieved}}))
                mention = user.mention_html(); achievement_text = new_tits_title_message.format(mention=mention, size=f"{new_tits_size:.1f}")
                await context.bot.send_message(chat_id=chat_id, text=achievement_text, parse_mode='HTML')
             elif current_tits_title_db: # –ï—Å–ª–∏ –∑–≤–∞–Ω–∏–µ –±—ã–ª–æ, –∞ —Ç–µ–ø–µ—Ä—å –Ω–µ—Ç
                await loop.run_in_executor(None, lambda: tits_stats_collection.update_one({"user_id": user.id, "chat_id": chat_id},{"$set": {"current_tits_title": None}}))
                await context.bot.send_message(chat_id=chat_id, text=f"üóø {user.mention_html()}, –ø–æ—Å–ª–µ –∏–∑–º–µ–Ω–µ–Ω–∏—è —Ç–≤–æ–∏ —Å–∏—Å—å–∫–∏ –ø–æ—Ç–µ—Ä—è–ª–∏ –≤—Å–µ –∑–≤–∞–Ω–∏—è!", parse_mode='HTML')
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –∏–∑–º–µ–Ω–µ–Ω–∏–∏ —Å–∏—Å–µ–∫ –¥–ª—è {user_display_name}: {e}", exc_info=True)
        await context.bot.send_message(chat_id=chat_id, text=f"üóø –ë–ª—è, {user_display_name}, —Å —Å–∏—Å—å–∫–∞–º–∏ –æ–ø—è—Ç—å –∫–∞–∫–∞—è-—Ç–æ —Ö—É–π–Ω—è. –ü–æ–ø—Ä–æ–±—É–π –ø–æ–∑–∂–µ.")
# --- –ö–û–ù–ï–¶ –ò–ó–ú–ï–ù–ï–ù–ù–û–ô grow_tits ---


async def show_my_tits(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    # --->>> –ù–ê–ß–ê–õ–û –ü–†–û–í–ï–†–ö–ò –¢–ï–•–†–ê–ë–û–¢ (–í–°–¢–ê–í–¨ –í –ö–ê–ñ–î–£–Æ –ö–û–ú–ê–ù–î–ù–£–Æ –§–£–ù–ö–¶–ò–Æ!) <<<---
    if not update or not update.message or not update.message.from_user or not update.message.chat:
         logger.warning(f"grow_tits: –Ω–µ—Ç –¥–∞–Ω–Ω—ã—Ö –≤ update –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ —Ç–µ—Ö—Ä–∞–±–æ—Ç")
         return
    real_chat_id = update.message.chat.id; real_user_id = update.message.from_user.id; real_chat_type = update.message.chat.type
    try: admin_id = int(os.getenv("ADMIN_USER_ID", "0"))
    except ValueError: admin_id = 0
    if admin_id == 0: logger.warning("ADMIN_USER_ID –Ω–µ –∑–∞–¥–∞–Ω –¥–ª—è grow_tits!") # –ú–æ–∂–Ω–æ —É–±—Ä–∞—Ç—å —ç—Ç–æ –ª–æ–≥–≥–∏—Ä–æ–≤–∞–Ω–∏–µ –≤ –∫–∞–∂–¥–æ–π —Ñ—É–Ω–∫—Ü–∏–∏
    loop_for_maint = asyncio.get_running_loop() # –û—Ç–¥–µ–ª—å–Ω—ã–π loop –¥–ª—è –≤—ã–∑–æ–≤–∞ is_maintenance_mode
    maintenance_active = await is_maintenance_mode(loop_for_maint)
    if maintenance_active and (real_user_id != admin_id or real_chat_type != 'private'):
        logger.info(f"–ö–æ–º–∞–Ω–¥–∞ grow_tits –æ—Ç–∫–ª–æ–Ω–µ–Ω–∞ –∏–∑-–∑–∞ —Ç–µ—Ö—Ä–∞–±–æ—Ç –≤ —á–∞—Ç–µ {real_chat_id}")
        try:
            await context.bot.send_message(chat_id=real_chat_id, text="üîß –°–æ—Ä—è–Ω, —É –º–µ–Ω—è —Å–µ–π—á–∞—Å —Ç–µ—Ö–Ω–∏—á–µ—Å–∫–∏–µ —Ä–∞–±–æ—Ç—ã. –ü–æ–ø—Ä–æ–±—É–π –ø–æ–∑–∂–µ.")
            await context.bot.delete_message(chat_id=real_chat_id, message_id=update.message.message_id)
        except Exception as e: logger.warning(f"–ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–≤–µ—Ç–∏—Ç—å/—É–¥–∞–ª–∏—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ –æ —Ç–µ—Ö—Ä–∞–±–æ—Ç–∞—Ö (grow_tits): {e}")
        return
    # --->>> –ö–û–ù–ï–¶ –ü–†–û–í–ï–†–ö–ò –¢–ï–•–†–ê–ë–û–¢ <<<---
    if not update.message or not update.message.from_user or not update.message.chat: return
    user = update.message.from_user; chat_id = update.message.chat.id; loop = asyncio.get_running_loop()
    profile_name_data = await get_user_profile_data(user); user_display_name = profile_name_data["display_name"]
    logger.info(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å '{user_display_name}' (ID: {user.id}) –∑–∞–ø—Ä–æ—Å–∏–ª –∏–Ω—Ñ—É –æ —Å–∏—Å—å–∫–∞—Ö –≤ —á–∞—Ç–µ {chat_id}.")

    tits_stat = await loop.run_in_executor(None, lambda: tits_stats_collection.find_one({"user_id": user.id, "chat_id": chat_id}))
    current_tits_size = 0; current_tits_title = "–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ–≥–æ —Ä–∞–∑–º–µ—Ä–∞ (–ø–æ–∫–∞)"
    if tits_stat:
        current_tits_size = tits_stat.get("tits_size", 0)
        for size_threshold, (title_name, _) in sorted(TITS_TITLES_BY_SIZE.items()):
             if current_tits_size >= size_threshold: current_tits_title = title_name
             else: break

    reply_text = f"üóø –ò—Ç–∞–∫, {user_display_name}, —Ç–≤–æ–∏ —Å–∏—Å—è–Ω–¥—Ä—ã –≤ —á–∞—Ç–µ <b>'{update.message.chat.title or '—ç—Ç–æ–º'}'</b>:\n\n"
    reply_text += f"<b>–†–∞–∑–º–µ—Ä:</b> {current_tits_size}-–π\n"
    reply_text += f"<b>–°–∏—Å—å–∫–æ-–ó–≤–∞–Ω–∏–µ:</b> {current_tits_title}.\n\n"
    if current_tits_size <= 0: reply_text += "–ü–ª–æ—Å–∫–æ, –∫–∞–∫ –¥–æ—Å–∫–∞, –∏ –≥—Ä—É—Å—Ç–Ω–æ, –∫–∞–∫ –º–æ—è –∂–∏–∑–Ω—å."
    elif current_tits_size <= 2: reply_text += "–ù—É, —Ö–æ—Ç—å –Ω–µ –≤ –º–∏–Ω—É—Å. –£–∂–µ –¥–æ—Å—Ç–∏–∂–µ–Ω–∏–µ, –±–ª—è–¥—å."
    elif current_tits_size <= 4: reply_text += "–í–ø–æ–ª–Ω–µ —Å–µ–±–µ! –ú–æ–∂–Ω–æ –¥–∞–∂–µ –ª–∏—Ñ—á–∏–∫ –Ω–æ—Å–∏—Ç—å –Ω–µ –¥–ª—è –≤–∏–¥–∞."
    else: reply_text += "–û—Ö—É–µ—Ç—å! –° —Ç–∞–∫–∏–º–∏ –º–æ–∂–Ω–æ –∏ –Ω–∞ —Ç–∞—Ä–∞–Ω –∏–¥—Ç–∏!"
    await context.bot.send_message(chat_id=chat_id, text=reply_text, parse_mode='HTML')


async def show_tits_top(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    # --->>> –ù–ê–ß–ê–õ–û –ü–†–û–í–ï–†–ö–ò –¢–ï–•–†–ê–ë–û–¢ (–í–°–¢–ê–í–¨ –í –ö–ê–ñ–î–£–Æ –ö–û–ú–ê–ù–î–ù–£–Æ –§–£–ù–ö–¶–ò–Æ!) <<<---
    if not update or not update.message or not update.message.from_user or not update.message.chat:
         logger.warning(f"grow_tits: –Ω–µ—Ç –¥–∞–Ω–Ω—ã—Ö –≤ update –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ —Ç–µ—Ö—Ä–∞–±–æ—Ç")
         return
    real_chat_id = update.message.chat.id; real_user_id = update.message.from_user.id; real_chat_type = update.message.chat.type
    try: admin_id = int(os.getenv("ADMIN_USER_ID", "0"))
    except ValueError: admin_id = 0
    if admin_id == 0: logger.warning("ADMIN_USER_ID –Ω–µ –∑–∞–¥–∞–Ω –¥–ª—è grow_tits!") # –ú–æ–∂–Ω–æ —É–±—Ä–∞—Ç—å —ç—Ç–æ –ª–æ–≥–≥–∏—Ä–æ–≤–∞–Ω–∏–µ –≤ –∫–∞–∂–¥–æ–π —Ñ—É–Ω–∫—Ü–∏–∏
    loop_for_maint = asyncio.get_running_loop() # –û—Ç–¥–µ–ª—å–Ω—ã–π loop –¥–ª—è –≤—ã–∑–æ–≤–∞ is_maintenance_mode
    maintenance_active = await is_maintenance_mode(loop_for_maint)
    if maintenance_active and (real_user_id != admin_id or real_chat_type != 'private'):
        logger.info(f"–ö–æ–º–∞–Ω–¥–∞ grow_tits –æ—Ç–∫–ª–æ–Ω–µ–Ω–∞ –∏–∑-–∑–∞ —Ç–µ—Ö—Ä–∞–±–æ—Ç –≤ —á–∞—Ç–µ {real_chat_id}")
        try:
            await context.bot.send_message(chat_id=real_chat_id, text="üîß –°–æ—Ä—è–Ω, —É –º–µ–Ω—è —Å–µ–π—á–∞—Å —Ç–µ—Ö–Ω–∏—á–µ—Å–∫–∏–µ —Ä–∞–±–æ—Ç—ã. –ü–æ–ø—Ä–æ–±—É–π –ø–æ–∑–∂–µ.")
            await context.bot.delete_message(chat_id=real_chat_id, message_id=update.message.message_id)
        except Exception as e: logger.warning(f"–ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–≤–µ—Ç–∏—Ç—å/—É–¥–∞–ª–∏—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ –æ —Ç–µ—Ö—Ä–∞–±–æ—Ç–∞—Ö (grow_tits): {e}")
        return
    # --->>> –ö–û–ù–ï–¶ –ü–†–û–í–ï–†–ö–ò –¢–ï–•–†–ê–ë–û–¢ <<<---
    if not update.message or not update.message.from_user or not update.message.chat: return
    chat_id = update.message.chat.id; user_name_req = update.message.from_user.first_name or "–§–∞–Ω–∞—Ç–∫–∞ –°–∏—Å–µ–∫"; chat_title = update.message.chat.title or "—ç—Ç–æ–≥–æ —á–∞—Ç–∞"
    logger.info(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å '{user_name_req}' –∑–∞–ø—Ä–æ—Å–∏–ª —Ç–æ–ø —Å–∏—Å–µ–∫ –≤ —á–∞—Ç–µ '{chat_title}' ({chat_id})")
    TOP_N = 10
    try:
        loop = asyncio.get_running_loop()
        query = {"chat_id": chat_id, "tits_size": {"$gte": 0}} # –ë–µ—Ä–µ–º –≤—Å–µ—Ö, —É –∫–æ–≥–æ –Ω–µ –æ—Ç—Ä–∏—Ü–∞—Ç–µ–ª—å–Ω—ã–π —Ä–∞–∑–º–µ—Ä
        top_users_cursor = await loop.run_in_executor( None, lambda: tits_stats_collection.find(query, {"user_display_name": 1, "tits_size": 1, "_id": 0}).sort("tits_size", pymongo.DESCENDING).limit(TOP_N))
        top_users_list = list(top_users_cursor)
        if not top_users_list:
            await context.bot.send_message(chat_id=chat_id, text=f"üóø –ü–∏–∑–¥–µ—Ü, –≤ —á–∞—Ç–µ '{chat_title}' –æ–¥–Ω–∏ –ø–ª–æ—Å–∫–æ–¥–æ–Ω–∫–∏ –∏–ª–∏ –µ—â–µ –Ω–∏–∫—Ç–æ –Ω–µ –Ω–∞—á–∞–ª —Ä–∞—Å—Ç–∏—Ç—å —Å–∏—Å—å–∫–∏! –¢–æ–ø –ø—É—Å—Ç."); return
        reply_text_parts = [f"<b>üèÜ –¢–æ–ø-{len(top_users_list)} –°–∏—Å—è—Å—Ç—ã—Ö –ë–æ–≥–∏–Ω—å –ß–∞—Ç–∞ '{chat_title}':</b>\n"]
        for i, user_data in enumerate(top_users_list):
            display_name = user_data.get("user_display_name") or "–ê–Ω–æ–Ω–∏–º–Ω–∞—è –°–∏—Å—å–∫–∞"; tits_size = user_data.get("tits_size", 0)
            place_emoji = "ü•á" if i == 0 else ("ü•à" if i == 1 else ("ü•â" if i == 2 else f"{i + 1}."))
            reply_text_parts.append(f"{place_emoji} {display_name} - <b>{tits_size}-–π —Ä–∞–∑–º–µ—Ä</b>")
        await context.bot.send_message(chat_id=chat_id, text="\n".join(reply_text_parts), parse_mode='HTML')
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ —Ç–æ–ø–∞ —Å–∏—Å–µ–∫ –¥–ª—è —á–∞—Ç–∞ {chat_id}: {e}", exc_info=True)
        await context.bot.send_message(chat_id=chat_id, text="üóø –ë–ª—è, –Ω–µ —Å–º–æ–≥ —Å–æ—Å—Ç–∞–≤–∏—Ç—å —Ä–µ–π—Ç–∏–Ω–≥ —Å–∏—Å–µ–∫. –ë–∞–∑–∞ –Ω–∞–µ–±–Ω—É–ª–∞—Å—å.")


# –£–±–µ–¥–∏—Å—å, —á—Ç–æ ADMIN_USER_ID, logger –∏ chat_activity_collection –æ–ø—Ä–µ–¥–µ–ª–µ–Ω—ã –∏ –¥–æ—Å—Ç—É–ø–Ω—ã

async def list_bot_chats(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    if not update.message or not update.message.from_user:
        return

    user_id = update.message.from_user.id
    request_chat_id = update.message.chat.id # ID —á–∞—Ç–∞, –æ—Ç–∫—É–¥–∞ –ø—Ä–∏—à–ª–∞ –∫–æ–º–∞–Ω–¥–∞ (–õ–° –∞–¥–º–∏–Ω–∞)
    request_chat_type = update.message.chat.type

    # --->>> –ü–†–û–í–ï–†–ö–ê, –ß–¢–û –ö–û–ú–ê–ù–î–ê –û–¢ –ê–î–ú–ò–ù–ê –ò –í –õ–ò–ß–ù–û–ú –ß–ê–¢–ï <<<---
    if not (user_id == ADMIN_USER_ID and request_chat_type == 'private'):
        logger.warning(f"–ü–æ–ø—ã—Ç–∫–∞ –≤—ã–∑–æ–≤–∞ /listchats –Ω–µ –æ—Ç –∞–¥–º–∏–Ω–∞ –∏–ª–∏ –Ω–µ –≤ –õ–°. User: {user_id}, Chat: {request_chat_id}")
        await update.message.reply_text("üóø –≠—Ç–∞ –∫–æ–º–∞–Ω–¥–∞ –¥–æ—Å—Ç—É–ø–Ω–∞ —Ç–æ–ª—å–∫–æ –í–µ–ª–∏–∫–æ–º—É –°–æ–∑–¥–∞—Ç–µ–ª—é –≤ –µ–≥–æ —Å–≤—è—â–µ–Ω–Ω—ã—Ö –ª–∏—á–Ω—ã—Ö –ø–æ–∫–æ—è—Ö (—Ç–æ –µ—Å—Ç—å, –≤ –õ–° —Å–æ –º–Ω–æ–π).")
        return

    logger.info(f"–ê–¥–º–∏–Ω ({ADMIN_USER_ID}) –∑–∞–ø—Ä–æ—Å–∏–ª —Å–ø–∏—Å–æ–∫ —á–∞—Ç–æ–≤, –≤ –∫–æ—Ç–æ—Ä—ã—Ö —Å–æ—Å—Ç–æ–∏—Ç –±–æ—Ç.")
    await update.message.reply_text("üóø –°–æ–±–∏—Ä–∞—é –¥–æ—Å—å–µ –Ω–∞ –≤—Å–µ –ø—Ä–∏—Ç–æ–Ω—ã, –≥–¥–µ —è –ø—Ä–æ–ø–∏—Å–∞–Ω... –ú–∏–Ω—É—Ç–∫—É.")

    try:
        loop = asyncio.get_running_loop()
        
        # –ó–∞–ø—Ä–∞—à–∏–≤–∞–µ–º –≤—Å–µ –¥–æ–∫—É–º–µ–Ω—Ç—ã –∏–∑ chat_activity_collection, –Ω–∞–º –Ω—É–∂–Ω—ã chat_id –∏ last_message_time
        # –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–æ –º–æ–∂–Ω–æ –∑–∞–ø—Ä–æ—Å–∏—Ç—å –Ω–∞–∑–≤–∞–Ω–∏–µ —á–∞—Ç–∞, –µ—Å–ª–∏ –º—ã –µ–≥–æ —Ö—Ä–∞–Ω–∏–º —Ç–∞–º –∂–µ
        # (–Ω–æ –æ–±—ã—á–Ω–æ –Ω–∞–∑–≤–∞–Ω–∏–µ —á–∞—Ç–∞ –ø–æ–ª—É—á–∞–µ—Ç—Å—è —á–µ—Ä–µ–∑ context.bot.get_chat())
        chat_docs_cursor = await loop.run_in_executor(
            None,
            lambda: chat_activity_collection.find(
                {}, # –ü—É—Å—Ç–æ–π —Ñ–∏–ª—å—Ç—Ä - –≤—ã–±—Ä–∞—Ç—å –≤—Å–µ –¥–æ–∫—É–º–µ–Ω—Ç—ã
                {"chat_id": 1, "last_message_time": 1, "_id": 0} # –ü—Ä–æ–µ–∫—Ü–∏—è: —Ç–æ–ª—å–∫–æ –Ω—É–∂–Ω—ã–µ –ø–æ–ª—è
            ).sort("last_message_time", pymongo.DESCENDING) # –°–æ—Ä—Ç–∏—Ä—É–µ–º –ø–æ –ø–æ—Å–ª–µ–¥–Ω–µ–π –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏
        )
        
        chat_list = list(chat_docs_cursor)

        if not chat_list:
            await update.message.reply_text("üóø –ü–æ—Ö–æ–∂–µ, –º–µ–Ω—è –µ—â–µ –Ω–∏–∫—É–¥–∞ –Ω–µ –¥–æ–±–∞–≤–∏–ª–∏, –ª–∏–±–æ —è –∑–∞–±—ã–ª, –≥–¥–µ —è. –ü—É—Å—Ç–æ, –∫–∞–∫ –≤ —Ç–≤–æ–µ–π –≥–æ–ª–æ–≤–µ –ø–æ—Å–ª–µ –∑–∞—Ä–ø–ª–∞—Ç—ã.")
            return

        response_messages = [f"<b>üìú –°–ø–∏—Å–æ–∫ —á–∞—Ç–æ–≤, –≥–¥–µ —è (–ü–æ–ø–∏–∑–¥—è–∫–∞) –±—ã–ª –∑–∞–º–µ—á–µ–Ω (–≤—Å–µ–≥–æ: {len(chat_list)}):</b>\n"]
        current_message_part = ""

        for i, chat_data in enumerate(chat_list):
            bot_chat_id = chat_data.get("chat_id")
            last_active_time = chat_data.get("last_message_time")
            
            chat_title = f"ID: {bot_chat_id}" # –ó–∞–ø–∞—Å–Ω–æ–π –≤–∞—Ä–∏–∞–Ω—Ç, –µ—Å–ª–∏ –Ω–µ —É–¥–∞—Å—Ç—Å—è –ø–æ–ª—É—á–∏—Ç—å –∏–º—è
            chat_username = None
            member_count = None

            try:
                # –ü–æ–ª—É—á–∞–µ–º –∞–∫—Ç—É–∞–ª—å–Ω—É—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —á–∞—Ç–µ
                # –í–ù–ò–ú–ê–ù–ò–ï: get_chat –º–æ–∂–µ—Ç –±—ã—Ç—å –º–µ–¥–ª–µ–Ω–Ω—ã–º, –µ—Å–ª–∏ —á–∞—Ç–æ–≤ –æ—á–µ–Ω—å –º–Ω–æ–≥–æ.
                # –ù–æ –¥–ª—è –∞–¥–º–∏–Ω—Å–∫–æ–π –∫–æ–º–∞–Ω–¥—ã, –∫–æ—Ç–æ—Ä–∞—è –≤—ã–∑—ã–≤–∞–µ—Ç—Å—è –Ω–µ—á–∞—Å—Ç–æ, —ç—Ç–æ –ø—Ä–∏–µ–º–ª–µ–º–æ.
                chat_info = await context.bot.get_chat(chat_id=bot_chat_id)
                chat_title = chat_info.title or chat_title # –ï—Å–ª–∏ –µ—Å—Ç—å title, –∏—Å–ø–æ–ª—å–∑—É–µ–º –µ–≥–æ
                if chat_info.username:
                    chat_username = f"@{chat_info.username}"
                # –î–ª—è –≥—Ä—É–ø–ø –º–æ–∂–Ω–æ –ø–æ–ø—Ä–æ–±–æ–≤–∞—Ç—å –ø–æ–ª—É—á–∏—Ç—å –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤
                if chat_info.type in ['group', 'supergroup']:
                    try:
                        member_count = await context.bot.get_chat_member_count(chat_id=bot_chat_id)
                    except Exception: # –ï—Å–ª–∏ –±–æ—Ç –Ω–µ –∞–¥–º–∏–Ω –≤ —á–∞—Ç–µ –∏–ª–∏ –¥—Ä—É–≥–∞—è –æ—à–∏–±–∫–∞
                        pass 
            except telegram.error.TelegramError as e: # TelegramError - –±–∞–∑–æ–≤—ã–π –∫–ª–∞—Å—Å –¥–ª—è –æ—à–∏–±–æ–∫ API
                logger.warning(f"–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –¥–ª—è —á–∞—Ç–∞ {bot_chat_id}: {e}")
                # –û—Å—Ç–∞–≤–ª—è–µ–º chat_title –∫–∞–∫ "ID: {bot_chat_id}"
            except Exception as e_unknown:
                logger.error(f"–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –æ—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ —á–∞—Ç–µ {bot_chat_id}: {e_unknown}")


            line = f"\n<b>{i+1}. {chat_title}</b>"
            if chat_username:
                line += f" ({chat_username})"
            line += f"\n   ID: <code>{bot_chat_id}</code>"
            if member_count:
                line += f" | –£—á–∞—Å—Ç–Ω–∏–∫–æ–≤: ~{member_count}"
            if last_active_time:
                # –ü—Ä–µ–æ–±—Ä–∞–∑—É–µ–º UTC –≤—Ä–µ–º—è –∏–∑ –ë–î –≤ —á–∏—Ç–∞–µ–º—ã–π —Ñ–æ—Ä–º–∞—Ç (–º–æ–∂–Ω–æ —É–∫–∞–∑–∞—Ç—å –ª–æ–∫–∞–ª—å–Ω—É—é —Ç–∞–π–º–∑–æ–Ω—É, –µ—Å–ª–∏ –Ω—É–∂–Ω–æ)
                # –î–ª—è –ø—Ä–æ—Å—Ç–æ—Ç—ã –ø–æ–∫–∞–∂–µ–º UTC
                last_active_str = last_active_time.strftime("%Y-%m-%d %H:%M:%S UTC")
                line += f"\n   –ü–æ—Å–ª–µ–¥–Ω—è—è –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç—å: {last_active_str}"
            line += "\n"

            # –†–∞–∑–±–∏–≤–∞–µ–º –Ω–∞ –Ω–µ—Å–∫–æ–ª—å–∫–æ —Å–æ–æ–±—â–µ–Ω–∏–π, –µ—Å–ª–∏ —Å–ø–∏—Å–æ–∫ —Å–ª–∏—à–∫–æ–º –¥–ª–∏–Ω–Ω—ã–π
            if len(current_message_part + line) > 4000: # –û—Å—Ç–∞–≤–ª—è–µ–º –∑–∞–ø–∞—Å –¥–æ –ª–∏–º–∏—Ç–∞ 4096
                response_messages.append(current_message_part)
                current_message_part = line
            else:
                current_message_part += line
        
        if current_message_part: # –î–æ–±–∞–≤–ª—è–µ–º –ø–æ—Å–ª–µ–¥–Ω—é—é —á–∞—Å—Ç—å
            response_messages.append(current_message_part)

        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏—è –∞–¥–º–∏–Ω—É
        for msg_part in response_messages:
            if msg_part.strip(): # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ —á–∞—Å—Ç—å –Ω–µ –ø—É—Å—Ç–∞—è
                await context.bot.send_message(chat_id=request_chat_id, text=msg_part, parse_mode='HTML')
            await asyncio.sleep(0.3) # –ù–µ–±–æ–ª—å—à–∞—è –∑–∞–¥–µ—Ä–∂–∫–∞ –º–µ–∂–¥—É —Å–æ–æ–±—â–µ–Ω–∏—è–º–∏, —á—Ç–æ–±—ã –Ω–µ —Å–ø–∞–º–∏—Ç—å API

    except pymongo.errors.PyMongoError as e_mongo:
        logger.error(f"–û—à–∏–±–∫–∞ MongoDB –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ —Å–ø–∏—Å–∫–∞ —á–∞—Ç–æ–≤: {e_mongo}", exc_info=True)
        await update.message.reply_text("üóø –û—à–∏–±–∫–∞! –ù–µ —Å–º–æ–≥ –∑–∞–ª–µ–∑—Ç—å –≤ —Å–≤–æ–∏ –∞—Ä—Ö–∏–≤—ã (–ø—Ä–æ–±–ª–µ–º–∞ —Å –±–∞–∑–æ–π –¥–∞–Ω–Ω—ã—Ö).")
    except Exception as e:
        logger.error(f"–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –æ—à–∏–±–∫–∞ –ø—Ä–∏ —Ñ–æ—Ä–º–∏—Ä–æ–≤–∞–Ω–∏–∏ —Å–ø–∏—Å–∫–∞ —á–∞—Ç–æ–≤: {e}", exc_info=True)
        await update.message.reply_text(f"üóø –ü–∏–∑–¥–µ—Ü –∫–∞–∫–æ–π-—Ç–æ —Å–ª—É—á–∏–ª—Å—è, –Ω–µ –º–æ–≥—É –ø–æ–∫–∞–∑–∞—Ç—å —Å–ø–∏—Å–æ–∫. –û—à–∏–±–∫–∞: {type(e).__name__}")        


# –ü–µ—Ä–µ–∏–º–µ–Ω—É–µ–º —Ñ—É–Ω–∫—Ü–∏—é –¥–ª—è —è—Å–Ω–æ—Å—Ç–∏
async def generate_and_set_nickname(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    if not update.message or not update.message.from_user or not update.message.chat:
        return

    user = update.message.from_user
    chat_id = update.message.chat.id
    loop = asyncio.get_running_loop()

    # --->>> –ü–†–û–í–ï–†–ö–ê –¢–ï–•–†–ê–ë–û–¢ (–∫–∞–∫ –∏ —Ä–∞–Ω—å—à–µ) <<<---
    maintenance_active = await is_maintenance_mode(loop)
    if maintenance_active and (user.id != ADMIN_USER_ID or update.message.chat.type != 'private'):
        # ... (—Å–æ–æ–±—â–µ–Ω–∏–µ –æ —Ç–µ—Ö—Ä–∞–±–æ—Ç–∞—Ö –∏ return) ...
        logger.info(f"–ö–æ–º–∞–Ω–¥–∞ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –Ω–∏–∫–∞ –æ—Ç–∫–ª–æ–Ω–µ–Ω–∞ –∏–∑-–∑–∞ —Ç–µ—Ö—Ä–∞–±–æ—Ç –≤ —á–∞—Ç–µ {chat_id}")
        try: await update.message.reply_text("üîß –¢–µ—Ö—Ä–∞–±–æ—Ç—ã, —Å–µ–π—á–∞—Å –Ω–µ –¥–æ –≤—ã–¥—É–º—ã–≤–∞–Ω–∏—è –∫–ª–∏—á–µ–∫.")
        except Exception: pass
        return
    # --->>> –ö–û–ù–ï–¶ –ü–†–û–í–ï–†–ö–ò –¢–ï–•–†–ê–ë–û–¢ <<<---

    user_profile_data = await get_user_profile_data(user) # –ü–æ–ª—É—á–∞–µ–º —Ç–µ–∫—É—â–∏–µ –¥–∞–Ω–Ω—ã–µ –¥–ª—è –∏–º–µ–Ω–∏ –∏ –ø—Ä.
    user_display_name_before = user_profile_data["display_name"]

    thinking_msg = await context.bot.send_message(chat_id=chat_id, text=f"üóø –¢–∞–∫, {user_display_name_before}, —Å–µ–π—á–∞—Å —è –ø–æ–∫–æ–ø–∞—é—Å—å –≤ —Ç–≤–æ–∏—Ö –≤—ã—Å–µ—Ä–∞—Ö –∏ –ø—Ä–∏–¥—É–º–∞—é —Ç–µ–±–µ –¥–æ—Å—Ç–æ–π–Ω–æ–µ (–Ω–µ—Ç) –ø–æ–≥–æ–Ω—è–ª–æ...")

    # --->>> 1. –°–ë–û–† –ö–û–ù–¢–ï–ö–°–¢–ê (–ü–û–°–õ–ï–î–ù–ò–ï –°–û–û–ë–©–ï–ù–ò–Ø –ü–û–õ–¨–ó–û–í–ê–¢–ï–õ–Ø) <<<---
    user_context_messages = []
    USER_CONTEXT_LIMIT_FOR_NICKNAME = 50 # –°–∫–æ–ª—å–∫–æ —Å–æ–æ–±—â–µ–Ω–∏–π –∞–Ω–∞–ª–∏–∑–∏—Ä–æ–≤–∞—Ç—å
    try:
        # –ò—â–µ–º —Å–æ–æ–±—â–µ–Ω–∏—è –ò–ú–ï–ù–ù–û –≠–¢–û–ì–û –Æ–ó–ï–†–ê (user.id) –í–û –í–°–ï–• –ß–ê–¢–ê–•, –≥–¥–µ –±–æ—Ç –µ–≥–æ –≤–∏–¥–µ–ª
        # –ò–ª–∏ –º–æ–∂–Ω–æ –æ–≥—Ä–∞–Ω–∏—á–∏—Ç—å—Å—è —Ç–µ–∫—É—â–∏–º —á–∞—Ç–æ–º: {"user_id": user.id, "chat_id": chat_id}
        # –î–ª—è –±–æ–ª–µ–µ "–æ–±—â–µ–≥–æ" –Ω–∏–∫–∞ –ª—É—á—à–µ –±—Ä–∞—Ç—å –∏–∑ –≤—Å–µ—Ö —á–∞—Ç–æ–≤.
        query_context = {"user_id": user.id}
        sort_order_context = [("timestamp", pymongo.DESCENDING)]
        
        history_cursor_context = await loop.run_in_executor(
            None, lambda: history_collection.find(query_context).sort(sort_order_context).limit(USER_CONTEXT_LIMIT_FOR_NICKNAME)
        )
        user_messages_docs = list(history_cursor_context)[::-1] # –ü–µ—Ä–µ–≤–æ—Ä–∞—á–∏–≤–∞–µ–º –¥–ª—è —Ö—Ä–æ–Ω–æ–ª–æ–≥–∏–∏

        if user_messages_docs:
            # –ë–µ—Ä–µ–º —Ç–æ–ª—å–∫–æ —Ç–µ–∫—Å—Ç–æ–≤–æ–µ —Å–æ–¥–µ—Ä–∂–∏–º–æ–µ, –∏–≥–Ω–æ—Ä–∏—Ä—É—è —Å—Ç–∏–∫–µ—Ä—ã/–∫–∞—Ä—Ç–∏–Ω–∫–∏ –¥–ª—è –ø—Ä–æ—Å—Ç–æ—Ç—ã –ø—Ä–æ–º–ø—Ç–∞
            for msg_doc in user_messages_docs:
                text_content = msg_doc.get("text", "")
                if text_content and not text_content.startswith(("[–°–¢–ò–ö–ï–†", "[–ö–ê–†–¢–ò–ù–ö–ê", "[–û–¢–ü–†–ê–í–ò–õ(–ê) –í–ò–î–ï–û]", "[–û–¢–ü–†–ê–í–ò–õ(–ê) –ì–û–õ–û–°–û–í–û–ï]")):
                    user_context_messages.append(text_content.strip())
            logger.info(f"–î–ª—è –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –Ω–∏–∫–∞ –¥–ª—è {user_display_name_before} —Å–æ–±—Ä–∞–Ω–æ {len(user_context_messages)} —Ç–µ–∫—Å—Ç–æ–≤—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π.")
        else:
            logger.info(f"–ö–æ–Ω—Ç–µ–∫—Å—Ç —Å–æ–æ–±—â–µ–Ω–∏–π –¥–ª—è {user_display_name_before} –Ω–µ –Ω–∞–π–¥–µ–Ω. –ù–∏–∫ –±—É–¥–µ—Ç –≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞—Ç—å—Å—è –±–µ–∑ –Ω–µ–≥–æ.")
            
    except Exception as db_e:
        logger.error(f"–û—à–∏–±–∫–∞ —á—Ç–µ–Ω–∏—è –∫–æ–Ω—Ç–µ–∫—Å—Ç–∞ –¥–ª—è –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –Ω–∏–∫–∞ (user_id: {user.id}): {db_e}")
        # –ü—Ä–æ–¥–æ–ª–∂–∏–º –±–µ–∑ –∫–æ–Ω—Ç–µ–∫—Å—Ç–∞, –µ—Å–ª–∏ –Ω–µ —É–¥–∞–ª–æ—Å—å –µ–≥–æ —Å–æ–±—Ä–∞—Ç—å

    user_context_string = "\n- ".join(user_context_messages) if user_context_messages else "–ù–µ–¥–∞–≤–Ω–æ –Ω–∏—Ö—É—è –Ω–µ –ø–∏—Å–∞–ª(–∞) –∏–ª–∏ –ø–∏—Å–∞–ª(–∞) –æ–¥–Ω—É –Ω–µ—Ç–µ–∫—Å—Ç–æ–≤—É—é —Ö—É–π–Ω—é."


    # --->>> 2. –ì–ï–ù–ï–†–ê–¶–ò–Ø –ù–ò–ö–ê –ß–ï–†–ï–ó –ò–ò <<<---
    # –ü—Ä–æ–º–ø—Ç –¥–ª—è –ò–ò, —á—Ç–æ–±—ã –ø—Ä–∏–¥—É–º–∞—Ç—å –Ω–∏–∫
    nickname_generation_prompt = (
        f"–¢—ã - –ü–æ–ø–∏–∑–¥—è–∫–∞, –±–æ—Ç —Å –æ—Ö—É–µ–Ω–Ω–æ —á–µ—Ä–Ω—ã–º —é–º–æ—Ä–æ–º –∏ –º–∞—Å—Ç–µ—Ä –≤—ã–¥—É–º—ã–≤–∞—Ç—å —Å—Ç–µ–±–Ω—ã–µ, —É–Ω–∏—á–∏–∂–∏—Ç–µ–ª—å–Ω—ã–µ, –Ω–æ –∫—Ä–µ–∞—Ç–∏–≤–Ω—ã–µ –ø—Ä–æ–∑–≤–∏—â–∞. "
        f"–¢–µ–±–µ –Ω—É–∂–Ω–æ –ø—Ä–∏–¥—É–º–∞—Ç—å –û–î–ù–û —É–Ω–∏–∫–∞–ª—å–Ω–æ–µ, —Å–º–µ—à–Ω–æ–µ –∏ –∑–∞–ø–æ–º–∏–Ω–∞—é—â–µ–µ—Å—è –ü–û–ì–û–ù–Ø–õ–û (–Ω–∏–∫–Ω–µ–π–º) –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –ø–æ –∏–º–µ–Ω–∏ '{user_display_name_before}'. "
        f"–ù–∏–∫ –¥–æ–ª–∂–µ–Ω —Å–æ—Å—Ç–æ—è—Ç—å –∏–∑ 2-4 —Å–ª–æ–≤. –û–Ω –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å –≤ —Ç–≤–æ–µ–º —Ñ–∏—Ä–º–µ–Ω–Ω–æ–º —Å—Ç–∏–ª–µ: —Ü–∏–Ω–∏—á–Ω—ã–π, –º–∞—Ç–µ—Ä–Ω—ã–π, –∞–±—Å—É—Ä–¥–Ω—ã–π, –≤–æ–∑–º–æ–∂–Ω–æ, –Ω–µ–º–Ω–æ–≥–æ '—á–µ—Ä–Ω–æ–∂–æ–ø—ã–π' (–µ—Å–ª–∏ —ç—Ç–æ –≤–ø–∏—Å—ã–≤–∞–µ—Ç—Å—è –≤ –∫–æ–Ω—Ç–µ–∫—Å—Ç –∏ –Ω–µ –ø–µ—Ä–µ—Ö–æ–¥–∏—Ç –≥—Ä–∞–Ω—å —Ç—É–ø–æ–≥–æ —Ä–∞—Å–∏–∑–º–∞, –∞ —Å–∫–æ—Ä–µ–µ –∞–±—Å—É—Ä–¥–Ω–æ –æ–±—ã–≥—Ä—ã–≤–∞–µ—Ç —Å—Ç–µ—Ä–µ–æ—Ç–∏–ø—ã, –µ—Å–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —Å–∞–º –¥–∞–ª –ø–æ–≤–æ–¥). "
        f"–í–æ—Ç –∫—Ä–∞—Ç–∫–∞—è –∏—Å—Ç–æ—Ä–∏—è –ø–æ—Å–ª–µ–¥–Ω–∏—Ö —Å–æ–æ–±—â–µ–Ω–∏–π —ç—Ç–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è (–µ—Å–ª–∏ –µ—Å—Ç—å, –∏—Å–ø–æ–ª—å–∑—É–π –µ–µ –¥–ª—è –≤–¥–æ—Ö–Ω–æ–≤–µ–Ω–∏—è, –∏—â–∏ —Ö–∞—Ä–∞–∫—Ç–µ—Ä–Ω—ã–µ —Å–ª–æ–≤–µ—á–∫–∏, —Ç–µ–º—ã, —Ç—É–ø–æ—Å—Ç–∏):\n"
        f"```\n- {user_context_string}\n```\n"
        f"–ò–Ω—Å—Ç—Ä—É–∫—Ü–∏–∏ –¥–ª—è –Ω–∏–∫–∞:\n"
        f"1.  **–û–°–ù–û–í–ê:** –ï—Å–ª–∏ –≤ —Å–æ–æ–±—â–µ–Ω–∏—è—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –µ—Å—Ç—å —á—Ç–æ-—Ç–æ —Ö–∞—Ä–∞–∫—Ç–µ—Ä–Ω–æ–µ (—á–∞—Å—Ç–æ–µ —Å–ª–æ–≤–æ, —Ç—É–ø–∞—è –∏–¥–µ—è, –∂–∞–ª–æ–±–∞, –∏–Ω—Ç–µ—Ä–µ—Å), –ø–æ—Å—Ç–∞—Ä–∞–π—Å—è —ç—Ç–æ –ö–†–ï–ê–¢–ò–í–ù–û –∏ –°–ê–†–ö–ê–°–¢–ò–ß–ù–û –æ–±—ã–≥—Ä–∞—Ç—å –≤ –Ω–∏–∫–µ.\n"
        f"2.  **–ê–ë–°–£–†–î –ò –Æ–ú–û–†:** –ù–∏–∫ –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å —Å–º–µ—à–Ω—ã–º –∏–∑-–∑–∞ —Å–≤–æ–µ–π –Ω–µ–ª–µ–ø–æ—Å—Ç–∏, –Ω–µ–æ–∂–∏–¥–∞–Ω–Ω–æ—Å—Ç–∏ –∏–ª–∏ —á–µ—Ä–Ω–æ–≥–æ —é–º–æ—Ä–∞.\n"
        f"3.  **–ö–†–ê–¢–ö–û–°–¢–¨:** 2-4 —Å–ª–æ–≤–∞, –Ω–µ –±–æ–ª—å—à–µ.\n"
        f"4.  **–£–ù–ò–ö–ê–õ–¨–ù–û–°–¢–¨:** –ü–æ—Å—Ç–∞—Ä–∞–π—Å—è –Ω–µ –ø–æ–≤—Ç–æ—Ä—è—Ç—å –±–∞–Ω–∞–ª—å–Ω—ã–µ –æ—Å–∫–æ—Ä–±–ª–µ–Ω–∏—è, –±—É–¥—å –∏–∑–æ–±—Ä–µ—Ç–∞—Ç–µ–ª–µ–Ω.\n"
        f"5.  **–°–¢–ò–õ–¨ –ü–û–ü–ò–ó–î–Ø–ö–ò:** –ú–∞—Ç –ø—Ä–∏–≤–µ—Ç—Å—Ç–≤—É–µ—Ç—Å—è, —Ü–∏–Ω–∏–∑–º –æ–±—è–∑–∞—Ç–µ–ª–µ–Ω.\n"
        f"6.  **–†–ï–ó–£–õ–¨–¢–ê–¢:** –í—ã–¥–∞–π –¢–û–õ–¨–ö–û –°–ê–ú –ù–ò–ö–ù–ï–ô–ú, –±–µ–∑ –∫–∞–≤—ã—á–µ–∫, –±–µ–∑ –ø–æ—è—Å–Ω–µ–Ω–∏–π, –±–µ–∑ '–í–æ—Ç —Ç–≤–æ–π –Ω–∏–∫:'. –ü—Ä–æ—Å—Ç–æ —Ç–µ–∫—Å—Ç –Ω–∏–∫–∞.\n\n"
        f"–ü—Ä–∏–º–µ—Ä—ã –æ—Ö—É–µ–Ω–Ω—ã—Ö –Ω–∏–∫–æ–≤, –∫–æ—Ç–æ—Ä—ã–µ —Ç—ã –º–æ–≥ –±—ã –ø—Ä–∏–¥—É–º–∞—Ç—å:\n"
        f"- –ü–æ–≤–µ–ª–∏—Ç–µ–ª—å –ü—Ä–æ—Å—Ä–æ—á–µ–Ω–Ω–æ–π –®–∞—É—Ä–º—ã (–µ—Å–ª–∏ —é–∑–µ—Ä —á–∞—Å—Ç–æ –ø–∏—à–µ—Ç –ø—Ä–æ –µ–¥—É –∏–ª–∏ —à–∞—É—Ä–º—É)\n"
        f"- –ê—Ä—Ö–∏—Ç–µ–∫—Ç–æ—Ä –í–æ–∑–¥—É—à–Ω—ã—Ö –ó–∞–º–∫–æ–≤ (–µ—Å–ª–∏ —é–∑–µ—Ä –º–Ω–æ–≥–æ –º–µ—á—Ç–∞–µ—Ç –∏–ª–∏ –Ω–µ—Å–µ—Ç –±—Ä–µ–¥)\n"
        f"- –ì–µ–Ω–µ—Ä–∞–ª –î–∏–≤–∞–Ω–Ω—ã—Ö –í–æ–π—Å–∫\n"
        f"- –ü—Ä–æ—Ñ–µ—Å—Å–æ—Ä –•—É–µ–≤—ã—Ö –°–æ–≤–µ—Ç–æ–≤\n"
        f"- –ö–∞–ø–∏—Ç–∞–Ω –û—á–µ–≤–∏–¥–Ω—ã–π –î–æ–ª–±–æ–µ–±\n"
        f"- –õ–æ—Ä–¥ –ù–µ–¥–æ—Ç—Ä–∞—Ö–∞–Ω–Ω—ã—Ö –§–∞–Ω—Ç–∞–∑–∏–π\n"
        f"- –≠–º–∏—Ä –ü–æ–ª—É–Ω–æ—á–Ω—ã—Ö –ñ–æ—Ä–µ–∫–æ–≤\n"
        f"- –ñ—Ä–µ—Ü –°–≤—è—Ç–æ–≥–æ –ü–µ—Ä–µ–≥–∞—Ä–∞\n\n"
        f"–ü—Ä–∏–¥—É–º–∞–π –û–î–ò–ù —Ç–∞–∫–æ–π –Ω–∏–∫ –¥–ª—è '{user_display_name_before}', –æ—Å–Ω–æ–≤—ã–≤–∞—è—Å—å –Ω–∞ –µ–≥–æ/–µ–µ —Å–æ–æ–±—â–µ–Ω–∏—è—Ö –∏–ª–∏ –ø—Ä–æ—Å—Ç–æ –Ω–∞ —Å–≤–æ–µ–º –±–æ–ª—å–Ω–æ–º –≤–æ–æ–±—Ä–∞–∂–µ–Ω–∏–∏:"
    )

    generated_nickname = await _call_ionet_api(
        messages=[{"role": "user", "content": nickname_generation_prompt}],
        model_id=IONET_TEXT_MODEL_ID,
        max_tokens=30, # –ù–∏–∫ –∫–æ—Ä–æ—Ç–∫–∏–π
        temperature=0.9 # –í—ã—Å–æ–∫–∞—è —Ç–µ–º–ø–µ—Ä–∞—Ç—É—Ä–∞ –¥–ª—è –∫—Ä–µ–∞—Ç–∏–≤–Ω–æ—Å—Ç–∏
    )

    if not generated_nickname or generated_nickname.startswith("[") or len(generated_nickname.split()) > 5 or len(generated_nickname) > 40: # –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞ –∞–¥–µ–∫–≤–∞—Ç–Ω–æ—Å—Ç—å –æ—Ç–≤–µ—Ç–∞
        logger.warning(f"–ò–ò —Å–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–ª –Ω–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π –Ω–∏–∫: '{generated_nickname}'. –ò—Å–ø–æ–ª—å–∑—É–µ–º –¥–µ—Ñ–æ–ª—Ç–Ω—ã–π.")
        # –ú–æ–∂–Ω–æ –≤–∑—è—Ç—å –∏–∑ —Ç–≤–æ–µ–≥–æ —Å—Ç–∞—Ä–æ–≥–æ —Å–ø–∏—Å–∫–∞ RANDOM_POPIZDYAKA_NICKNAMES –∫–∞–∫ –∑–∞–ø–∞—Å–Ω–æ–π –≤–∞—Ä–∏–∞–Ω—Ç
        if RANDOM_POPIZDYAKA_NICKNAMES: # –£–±–µ–¥–∏—Å—å, —á—Ç–æ —ç—Ç–æ—Ç —Å–ø–∏—Å–æ–∫ –µ—â–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç
             generated_nickname = random.choice(RANDOM_POPIZDYAKA_NICKNAMES)
        else:
             generated_nickname = f"–û—á–µ—Ä–µ–¥–Ω–æ–π –î–æ–ª–±–æ–µ–± ‚Ññ{random.randint(100,999)}" # –ö—Ä–∞–π–Ω–∏–π —Å–ª—É—á–∞–π
    
    generated_nickname = generated_nickname.strip().title() # –£–±–∏—Ä–∞–µ–º –ª–∏—à–Ω–∏–µ –ø—Ä–æ–±–µ–ª—ã –∏ –¥–µ–ª–∞–µ–º Title Case

    if thinking_msg:
        try: await context.bot.delete_message(chat_id=chat_id, message_id=thinking_msg.message_id)
        except Exception: pass

    logger.info(f"–î–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è '{user_display_name_before}' ({user.id}) —Å–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–Ω –ò–ò-–Ω–∏–∫: '{generated_nickname}'")

    # --->>> 3. –£–°–¢–ê–ù–û–í–ö–ê –ù–ò–ö–ê –ò –ö–û–ú–ú–ï–ù–¢–ê–†–ò–ô –û–¢ –ü–û–ü–ò–ó–î–Ø–ö–ò <<<---
    try:
        # –û–±–Ω–æ–≤–ª—è–µ–º –∏–ª–∏ —Å–æ–∑–¥–∞–µ–º –ø—Ä–æ—Ñ–∏–ª—å —Å –Ω–æ–≤—ã–º –Ω–∏–∫–æ–º
        await loop.run_in_executor(
            None,
            lambda: user_profiles_collection.update_one(
                {"user_id": user.id},
                {"$set": {"custom_nickname": generated_nickname, "tg_first_name": user.first_name, "tg_username": user.username},
                 "$setOnInsert": { "user_id": user.id, "message_count": 0, "current_title": None,
                                   # –î–æ–±–∞–≤—å —Å—é–¥–∞ –ø–æ–ª—è –¥–ª—è –ø–∏—Å—å–∫–æ/—Å–∏—Å—å–∫–æ–º–µ—Ä–æ–≤ –∏–∑ —Ç–≤–æ–µ–≥–æ set_nickname, –µ—Å–ª–∏ –æ–Ω–∏ —Ç–∞–º –µ—Å—Ç—å
                                 }
                },
                upsert=True
            )
        )
        
        # –°–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç –ü–æ–ø–∏–∑–¥—è–∫–∏ —Å –Ω–æ–≤—ã–º –Ω–∏–∫–æ–º (—Ç–æ–∂–µ —á–µ—Ä–µ–∑ –ò–ò)
        comment_on_new_nickname_prompt = (
            f"–¢—ã - –ü–æ–ø–∏–∑–¥—è–∫–∞, —Ü–∏–Ω–∏—á–Ω—ã–π –∏ –º–∞—Ç–µ—Ä–Ω—ã–π –±–æ—Ç. –¢—ã —Ç–æ–ª—å–∫–æ —á—Ç–æ –ø—Ä–∏–¥—É–º–∞–ª –∏ –ø—Ä–∏—Å–≤–æ–∏–ª –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é (–∫–æ—Ç–æ—Ä—ã–π —Ä–∞–Ω—å—à–µ –±—ã–ª '{user_display_name_before}') –Ω–æ–≤—ã–π –æ—Ö—É–∏—Ç–µ–ª—å–Ω—ã–π –Ω–∏–∫–Ω–µ–π–º: ¬´{generated_nickname}¬ª.\n"
            f"–ù–∞–ø–∏—à–∏ –û–î–ù–û –∫–æ—Ä–æ—Ç–∫–æ–µ (1-2 –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏—è) —Å–æ–æ–±—â–µ–Ω–∏–µ —ç—Ç–æ–º—É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é. "
            f"–í —Å–≤–æ–µ–º —Å–æ–æ–±—â–µ–Ω–∏–∏ —Ç—ã –¥–æ–ª–∂–µ–Ω:\n"
            f"1. –û–±—ä—è–≤–∏—Ç—å –µ–º—É –µ–≥–æ –Ω–æ–≤—ã–π –Ω–∏–∫ ¬´{generated_nickname}¬ª (–º–æ–∂–Ω–æ –≤—ã–¥–µ–ª–∏—Ç—å –∂–∏—Ä–Ω—ã–º).\n"
            f"2. –ï–¥–∫–æ, —Å–∞—Ä–∫–∞—Å—Ç–∏—á–Ω–æ –∏ —Å –º–∞—Ç–æ–º –ø—Ä–æ–∫–æ–º–º–µ–Ω—Ç–∏—Ä–æ–≤–∞—Ç—å, –Ω–∞—Å–∫–æ–ª—å–∫–æ —ç—Ç–æ—Ç –Ω–∏–∫ –µ–º—É/–µ–π –ø–æ–¥—Ö–æ–¥–∏—Ç, –∏–ª–∏ –∫–∞–∫ –µ–º—É/–µ–π '–ø–æ–≤–µ–∑–ª–æ'.\n"
            f"3. –ù–∞—á–∏–Ω–∞–π —Å `üóø`.\n\n"
            f"–ü—Ä–∏–º–µ—Ä: –ï—Å–ª–∏ –Ω–∏–∫ '–ü–æ–≤–µ–ª–∏—Ç–µ–ª—å –ü—Ä–æ—Å—Ä–æ—á–µ–Ω–Ω–æ–π –®–∞—É—Ä–º—ã':\n"
            f"üóø –°–ª—ã—à—å —Ç—ã, –≥—É—Ä–º–∞–Ω —Ö—É–µ–≤! –û—Ç–Ω—ã–Ω–µ —Ç–≤–æ–µ –ø–æ–≥–æ–Ω—è–ª–æ ‚Äì <b>–ü–æ–≤–µ–ª–∏—Ç–µ–ª—å –ü—Ä–æ—Å—Ä–æ—á–µ–Ω–Ω–æ–π –®–∞—É—Ä–º—ã</b>! –ö–∞–∫ —Ä–∞–∑ –ø–æ–¥ —Å—Ç–∞—Ç—å —Ç–≤–æ–∏–º –∫—É–ª–∏–Ω–∞—Ä–Ω—ã–º –≤—ã—Å–µ—Ä–∞–º. –ù–æ—Å–∏ —Å –≥–æ—Ä–¥–æ—Å—Ç—å—é, –ø–æ–∫–∞ –Ω–µ –æ—Ç—Ä–∞–≤–∏—à—å—Å—è!\n\n"
            f"–¢–≤–æ–π –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π –∫ –ø—Ä–∏—Å–≤–æ–µ–Ω–∏—é –Ω–∏–∫–∞ ¬´{generated_nickname}¬ª:"
        )

        ai_comment_message = await _call_ionet_api(
            messages=[{"role": "user", "content": comment_on_new_nickname_prompt}],
            model_id=IONET_TEXT_MODEL_ID,
            max_tokens=150, # –ß—É—Ç—å –±–æ–ª—å—à–µ –¥–ª—è –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏—è
            temperature=0.8
        ) or f"üóø –ö–æ—Ä–æ—á–µ, —Ç–µ–ø–µ—Ä—å —Ç—ã —É –Ω–∞—Å <b>{generated_nickname}</b>. –ü—Ä–∏–≤—ã–∫–∞–π, —Ö—É–∏–ª–∞."

        if not ai_comment_message.startswith("üóø"): ai_comment_message = "üóø " + ai_comment_message
        
        # –ì–∞—Ä–∞–Ω—Ç–∏—Ä—É–µ–º, —á—Ç–æ –Ω–∏–∫ –±—É–¥–µ—Ç –≤—ã–¥–µ–ª–µ–Ω, –µ—Å–ª–∏ –ò–ò –µ–≥–æ –Ω–µ –≤—ã–¥–µ–ª–∏–ª
        if f"<b>{generated_nickname}</b>" not in ai_comment_message and generated_nickname in ai_comment_message:
            ai_comment_message = ai_comment_message.replace(generated_nickname, f"<b>{generated_nickname}</b>")
        elif generated_nickname.lower() not in ai_comment_message.lower(): # –ï—Å–ª–∏ –ò–ò –≤–æ–æ–±—â–µ –∑–∞–±—ã–ª —É–ø–æ–º—è–Ω—É—Ç—å –Ω–∏–∫
             ai_comment_message += f"\n–¢–≤–æ–µ –Ω–æ–≤–æ–µ –ø–æ–≥–æ–Ω—è–ª–æ, –µ—Å–ª–∏ —Ç—ã –Ω–µ –ø–æ–Ω—è–ª: <b>{generated_nickname}</b>."


        await context.bot.send_message(chat_id=chat_id, text=ai_comment_message, parse_mode='HTML')

        # –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –∏–º–µ–Ω–∏ –≤ –∏—Å—Ç–æ—Ä–∏–∏ —Å–æ–æ–±—â–µ–Ω–∏–π
        try:
            asyncio.create_task(update_history_with_new_name(user.id, generated_nickname, context))
            logger.info(f"–ó–∞–ø—É—â–µ–Ω–∞ –∑–∞–¥–∞—á–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –∏—Å—Ç–æ—Ä–∏–∏ –¥–ª—è –ò–ò-–Ω–∏–∫–∞ '{generated_nickname}' (user_id: {user.id})")
        except Exception as task_e:
            logger.error(f"–û—à–∏–±–∫–∞ –∑–∞–ø—É—Å–∫–∞ –∑–∞–¥–∞—á–∏ update_history_with_new_name –¥–ª—è –ò–ò-–Ω–∏–∫–∞: {task_e}")

    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ —É—Å—Ç–∞–Ω–æ–≤–∫–∏ –ò–ò-—Å–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–Ω–Ω–æ–≥–æ –Ω–∏–∫–Ω–µ–π–º–∞ –¥–ª—è user_id {user.id}: {e}", exc_info=True)
        if thinking_msg: # –£–¥–∞–ª—è–µ–º "–¥—É–º–∞—é—â–µ–µ" —Å–æ–æ–±—â–µ–Ω–∏–µ, –µ—Å–ª–∏ –æ–Ω–æ –µ—â–µ –µ—Å—Ç—å
            try: await context.bot.delete_message(chat_id=chat_id, message_id=thinking_msg.message_id)
            except Exception: pass
        await context.bot.send_message(chat_id=chat_id, text=f"üóø –ë–ª—è, —Ö–æ—Ç–µ–ª —Ç–µ–±—è –æ–±–æ–∑–≤–∞—Ç—å –∫–∞–∫-–Ω–∏–±—É–¥—å –ø–æ-–Ω–æ–≤–æ–º—É, –¥–∞ –º–æ–π –ò–ò-–º–æ–∑–≥ –ø–µ—Ä–µ–≥—Ä–µ–ª—Å—è. –•–æ–¥–∏ –ø–æ–∫–∞ –∫–∞–∫ {user_display_name_before}.")


# --- –í–°–ü–û–ú–û–ì–ê–¢–ï–õ–¨–ù–ê–Ø –§–£–ù–ö–¶–ò–Ø –î–õ–Ø –†–ê–°–ö–†–´–¢–ò–Ø –û–¢–í–ï–¢–ê –í "–ü–†–ê–í–î–ê –ò–õ–ò –í–´–°–ï–†" ---
async def _reveal_truth_or_shit_answer(
        context: ContextTypes.DEFAULT_TYPE,
        chat_id: int,
        original_question_msg_id: int,
        triggered_by_user: User | None = None # –ö—Ç–æ –Ω–∞–∂–∞–ª –∫–Ω–æ–ø–∫—É "–†–∞—Å–∫—Ä—ã—Ç—å" (–µ—Å–ª–∏ –ø—Ä–∏–º–µ–Ω–∏–º–æ)
    ):
    loop = asyncio.get_running_loop()
    logger.info(f"–ó–∞–ø—Ä–æ—Å –Ω–∞ —Ä–∞—Å–∫—Ä—ã—Ç–∏–µ –æ—Ç–≤–µ—Ç–∞ –¥–ª—è –∏–≥—Ä—ã (msg_id: {original_question_msg_id}) –≤ —á–∞—Ç–µ {chat_id}.")

    game_data = await loop.run_in_executor(
        None, lambda: active_truth_or_shit_games_collection.find_one_and_update(
            {"chat_id": chat_id, "message_id_question": original_question_msg_id, "revealed": False},
            {"$set": {"revealed": True}} # –°—Ä–∞–∑—É –ø–æ–º–µ—á–∞–µ–º –∫–∞–∫ —Ä–∞—Å–∫—Ä—ã—Ç–æ–µ, —á—Ç–æ–±—ã –∏–∑–±–µ–∂–∞—Ç—å –≥–æ–Ω–æ–∫ —Å–æ—Å—Ç–æ—è–Ω–∏–π
        )
    )

    if not game_data: # –õ–∏–±–æ –∏–≥—Ä–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞, –ª–∏–±–æ —É–∂–µ –±—ã–ª–∞ —Ä–∞—Å–∫—Ä—ã—Ç–∞
        logger.info(f"–ò–≥—Ä–∞ (msg_id: {original_question_msg_id}) –≤ —á–∞—Ç–µ {chat_id} –Ω–µ –Ω–∞–π–¥–µ–Ω–∞ –∏–ª–∏ —É–∂–µ —Ä–∞—Å–∫—Ä—ã—Ç–∞. –ù–∏—á–µ–≥–æ –Ω–µ –¥–µ–ª–∞–µ–º.")
        # –ü–æ–ø—ã—Ç–∞–µ–º—Å—è —É–±—Ä–∞—Ç—å –∫–Ω–æ–ø–∫–∏ —É —Å—Ç–∞—Ä–æ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è, –µ—Å–ª–∏ –æ–Ω–æ –µ—â–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç –∏ –∏–º–µ–µ—Ç –∫–Ω–æ–ø–∫–∏
        try:
            await context.bot.edit_message_reply_markup(chat_id=chat_id, message_id=original_question_msg_id, reply_markup=None)
        except telegram.error.BadRequest as e: # "Message to edit not found" or "message can't be edited" or "message is not modified"
            if "message is not modified" not in str(e).lower() and "message to edit not found" not in str(e).lower():
                logger.warning(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ø—ã—Ç–∫–µ —É–±—Ä–∞—Ç—å –∫–Ω–æ–ø–∫–∏ —É —Å—Ç–∞—Ä–æ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è ToS (msg_id: {original_question_msg_id}): {e}")
        except Exception: pass # –ò–≥–Ω–æ—Ä–∏—Ä—É–µ–º –¥—Ä—É–≥–∏–µ –æ—à–∏–±–∫–∏ –∑–¥–µ—Å—å
        return

    correct_answer_is_truth = game_data["is_truth"]
    statement_text = game_data["statement"]
    
    result_text_human = "‚úÖ –ü–†–ê–í–î–ê!" if correct_answer_is_truth else "‚ùå –í–´–°–ï–† –ï–ë–ê–ù–´–ô!"
    
    votes_summary = "–ù–∏–∫—Ç–æ –¥–∞–∂–µ –Ω–µ –ø–æ–ø—ã—Ç–∞–ª—Å—è –±–ª–µ—Å–Ω—É—Ç—å –∏–Ω—Ç–µ–ª–ª–µ–∫—Ç–æ–º –∏ –ø—Ä–æ–≥–æ–ª–æ—Å–æ–≤–∞—Ç—å. –°—Ç–∞–¥–æ —Ç—É–ø–æ—Ä—ã–ª—ã—Ö –±–∞—Ä–∞–Ω–æ–≤."
    if game_data.get("votes"):
        total_votes = len(game_data["votes"])
        if total_votes > 0:
            correct_votes_count = sum(1 for uid, vote_val in game_data["votes"].items() if vote_val == correct_answer_is_truth)
            wrong_votes_count = total_votes - correct_votes_count
            if total_votes == 1:
                votes_summary = f"–ï–¥–∏–Ω—Å—Ç–≤–µ–Ω–Ω—ã–π —Å–º–µ–ª—å—á–∞–∫, –∫–æ—Ç–æ—Ä—ã–π –ø—Ä–æ–≥–æ–ª–æ—Å–æ–≤–∞–ª, –æ–∫–∞–∑–∞–ª—Å—è {'–Ω–µ–ø—Ä–æ—Ö–æ–¥–∏–º—ã–º –¥–æ–ª–±–æ–µ–±–æ–º' if correct_votes_count == 0 else '–Ω–∞ —É–¥–∏–≤–ª–µ–Ω–∏–µ –ø—Ä–æ—à–∞—Ä–µ–Ω–Ω—ã–º (–∏–ª–∏ –µ–º—É –ø—Ä–æ—Å—Ç–æ –ø–æ–≤–µ–∑–ª–æ)'}."
            else:
                votes_summary = (f"–ò–∑ {total_votes} –æ—Ç–≤–∞–∂–∏–≤—à–∏—Ö—Å—è –¥–µ–≥–µ–Ω–µ—Ä–∞—Ç–æ–≤, {correct_votes_count} –∫–∞–∫–∏–º-—Ç–æ —á—É–¥–æ–º —É–≥–∞–¥–∞–ª–∏ (–∏–ª–∏ –ø–æ–¥—Å–º–æ—Ç—Ä–µ–ª–∏), "
                                 f"–∞ {wrong_votes_count} –∂–∏–¥–∫–æ –æ–±–æ—Å—Ä–∞–ª–∏—Å—å, –ø–æ–¥—Ç–≤–µ—Ä–¥–∏–≤ —Å–≤–æ—é —Ä–µ–ø—É—Ç–∞—Ü–∏—é.")
    
    triggered_by_text = ""
    if triggered_by_user:
        triggered_by_text = f"(–ü–æ –ø—Ä–æ—Å—å–±–µ –Ω–µ—Ç–µ—Ä–ø–µ–ª–∏–≤–æ–≥–æ {triggered_by_user.mention_html()})\n"


    reveal_comment_prompt = (
        f"–¢—ã - –ü–æ–ø–∏–∑–¥—è–∫–∞, –≤–µ–¥—É—â–∏–π –∏–≥—Ä—ã '–ü—Ä–∞–≤–¥–∞ –∏–ª–∏ –í—ã—Å–µ—Ä'. –ò–≥—Ä–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞.\n"
        f"–£—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ –±—ã–ª–æ: ¬´{statement_text}¬ª\n"
        f"–ü—Ä–∞–≤–∏–ª—å–Ω—ã–π –æ—Ç–≤–µ—Ç: {result_text_human}\n"
        f"–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –≥–æ–ª–æ—Å–æ–≤ (–µ—Å–ª–∏ –±—ã–ª–∞): {votes_summary}\n\n"
        f"–ù–∞–ø–∏—à–∏ –∫–æ—Ä–æ—Ç–∫–∏–π (2-4 –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏—è), —Å–∞—Ä–∫–∞—Å—Ç–∏—á–Ω—ã–π –∏ –º–∞—Ç–µ—Ä–Ω—ã–π –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π –ø–æ –∏—Ç–æ–≥–∞–º. "
        f"–ï—Å–ª–∏ –±—ã–ª–∏ –≥–æ–ª–æ—Å–æ–≤–∞–≤—à–∏–µ, —É–¥–µ–ª–∏ –≤–Ω–∏–º–∞–Ω–∏–µ —Ç–µ–º, –∫—Ç–æ –æ—à–∏–±—Å—è. –ï—Å–ª–∏ –Ω–µ –±—ã–ª–æ, –ø—Ä–æ–π–¥–∏—Å—å –ø–æ –ø–∞—Å—Å–∏–≤–Ω–æ—Å—Ç–∏ –∞—É–¥–∏—Ç–æ—Ä–∏–∏. "
        f"–ù–∞—á–∏–Ω–∞–π —Å `üóø –ò—Ç–∞–∫, –¥–æ–ª–±–æ–µ–±—ã –∏ —Å–æ—á—É–≤—Å—Ç–≤—É—é—â–∏–µ, —Å–ª—É—à–∞–π—Ç–µ —Å—é–¥–∞:`"
    )
    ai_reveal_comment = await _call_ionet_api(
        messages=[{"role": "user", "content": reveal_comment_prompt}],
        model_id=IONET_TEXT_MODEL_ID, max_tokens=200, temperature=0.8
    ) or "üóø –ù—É –≤–æ—Ç –∏ –≤—Å–µ. –ö—Ç–æ —É–≥–∞–¥–∞–ª - —Ç–æ—Ç –Ω–µ —Å–æ–≤—Å–µ–º –¥–µ–±–∏–ª. –û—Å—Ç–∞–ª—å–Ω—ã–µ - –ø—Ä–æ—Å—Ç–æ –¥–µ–±–∏–ª—ã, —Å–º–∏—Ä–∏—Ç–µ—Å—å."
    if not ai_reveal_comment.startswith("üóø"): ai_reveal_comment = "üóø " + ai_reveal_comment

    final_reveal_message = (
        f"<b>–ò–≥—Ä–∞ '–ü—Ä–∞–≤–¥–∞ –∏–ª–∏ –í—ã—Å–µ—Ä' –û–ö–û–ù–ß–ï–ù–ê!</b>\n{triggered_by_text}\n"
        f"–£—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ –ü–æ–ø–∏–∑–¥—è–∫–∏ –±—ã–ª–æ:\n¬´<i>{statement_text}</i>¬ª\n\n"
        f"–ò —ç—Ç–æ –±—ã–ª... <b>{result_text_human}</b>\n\n"
        f"{ai_reveal_comment}"
    )
    
    try:
        await context.bot.edit_message_text(
            chat_id=chat_id, message_id=original_question_msg_id,
            text=final_reveal_message, parse_mode='HTML', reply_markup=None
        )
    except telegram.error.BadRequest as e_edit:
        if "message is not modified" in str(e_edit).lower():
            logger.info(f"–°–æ–æ–±—â–µ–Ω–∏–µ ToS (msg_id: {original_question_msg_id}) –Ω–µ –±—ã–ª–æ –∏–∑–º–µ–Ω–µ–Ω–æ –ø—Ä–∏ —Ä–∞—Å–∫—Ä—ã—Ç–∏–∏, –≤–æ–∑–º–æ–∂–Ω–æ, —É–∂–µ —Å–æ–¥–µ—Ä–∂–∏—Ç —Ç–æ—Ç –∂–µ —Ç–µ–∫—Å—Ç. –£–±–∏—Ä–∞—é –∫–Ω–æ–ø–∫–∏.")
            try: await context.bot.edit_message_reply_markup(chat_id=chat_id, message_id=original_question_msg_id, reply_markup=None)
            except Exception: pass
        else:
            logger.warning(f"–ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç—Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ ToS (msg_id: {original_question_msg_id}) –¥–ª—è —Ä–∞—Å–∫—Ä—ã—Ç–∏—è –æ—Ç–≤–µ—Ç–∞: {e_edit}. –û—Ç–ø—Ä–∞–≤–ª—è—é –Ω–æ–≤—ã–º.")
            await context.bot.send_message(chat_id=chat_id, text=final_reveal_message, parse_mode='HTML')
            try: await context.bot.edit_message_reply_markup(chat_id=chat_id, message_id=original_question_msg_id, reply_markup=None)
            except Exception: pass
    except Exception as e_unhandled:
        logger.error(f"–ù–µ–ø—Ä–µ–¥–≤–∏–¥–µ–Ω–Ω–∞—è –æ—à–∏–±–∫–∞ –ø—Ä–∏ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–∏ —Å–æ–æ–±—â–µ–Ω–∏—è ToS: {e_unhandled}")
        await context.bot.send_message(chat_id=chat_id, text=final_reveal_message, parse_mode='HTML') # –ó–∞–ø–∞—Å–Ω–æ–π –≤–∞—Ä–∏–∞–Ω—Ç


    logger.info(f"–ò–≥—Ä–∞ (msg_id: {original_question_msg_id}) –≤ —á–∞—Ç–µ {chat_id} —É—Å–ø–µ—à–Ω–æ —Ä–∞—Å–∫—Ä—ã—Ç–∞. –ü—Ä–∞–≤–∏–ª—å–Ω—ã–π –æ—Ç–≤–µ—Ç: {correct_answer_is_truth}")

    # –û–±–Ω–æ–≤–ª—è–µ–º –≤—Ä–µ–º—è –ø–æ—Å–ª–µ–¥–Ω–µ–π –∏–≥—Ä—ã –≤ chat_activity –¥–ª—è –∫—É–ª–¥–∞—É–Ω–∞
    await loop.run_in_executor(
        None, lambda: chat_activity_collection.update_one(
            {"chat_id": chat_id},
            {"$set": {"last_tos_game_end_time": datetime.datetime.now(datetime.timezone.utc)}}, # –ò—Å–ø–æ–ª—å–∑—É–µ–º –≤—Ä–µ–º—è –æ–∫–æ–Ω—á–∞–Ω–∏—è
            upsert=True
        )
    )
# --- –ö–û–ù–ï–¶ –í–°–ü–û–ú–û–ì–ê–¢–ï–õ–¨–ù–û–ô –§–£–ù–ö–¶–ò–ò ---

# --- JOB –î–õ–Ø –ê–í–¢–û–ú–ê–¢–ò–ß–ï–°–ö–û–ì–û –†–ê–°–ö–†–´–¢–ò–Ø "–ü–†–ê–í–î–ê –ò–õ–ò –í–´–°–ï–†" ---
async def auto_reveal_truth_or_shit_job(context: ContextTypes.DEFAULT_TYPE) -> None:
    job = context.job
    if not job or not job.chat_id or not job.data or 'message_id_question' not in job.data:
        logger.error(f"–û—à–∏–±–∫–∞ –≤ job 'auto_reveal_truth_or_shit_job': –Ω–µ—Ç –Ω–µ–æ–±—Ö–æ–¥–∏–º—ã—Ö –¥–∞–Ω–Ω—ã—Ö. Job data: {job.data if job else 'No job'}")
        return
    
    chat_id = job.chat_id
    message_id_question = job.data['message_id_question']
    
    logger.info(f"–°—Ä–∞–±–æ—Ç–∞–ª –∞–≤—Ç–æ-—Ä–µ–≤–∏–ª –¥–ª—è –∏–≥—Ä—ã (msg_id: {message_id_question}) –≤ —á–∞—Ç–µ {chat_id}.")
    await _reveal_truth_or_shit_answer(context, chat_id, message_id_question, triggered_by_user=None)
# --- –ö–û–ù–ï–¶ JOB –î–õ–Ø –ê–í–¢–û–ú–ê–¢–ò–ß–ï–°–ö–û–ì–û –†–ê–°–ö–†–´–¢–ò–Ø ---

# --- –ö–û–ú–ê–ù–î–ê –ó–ê–ü–£–°–ö–ê –ò–ì–†–´ "–ü–†–ê–í–î–ê –ò–õ–ò –í–´–°–ï–†" ---
async def start_truth_or_shit_game(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    if not update.message or not update.message.chat or not update.message.from_user:
        return

    chat_id = update.message.chat.id
    user = update.message.from_user
    loop = asyncio.get_running_loop()

    # --->>> –ü–†–û–í–ï–†–ö–ê –¢–ï–•–†–ê–ë–û–¢ <<<---
    maintenance_active = await is_maintenance_mode(loop)
    if maintenance_active and (user.id != ADMIN_USER_ID or update.message.chat.type != 'private'):
        await update.message.reply_text("üîß –¢–µ—Ö—Ä–∞–±–æ—Ç—ã, –Ω–µ –¥–æ –∏–≥—Ä —Ä–∞–∑—É–º–∞ —Å–µ–≥–æ–¥–Ω—è.")
        return
    # --->>> –ö–û–ù–ï–¶ –ü–†–û–í–ï–†–ö–ò –¢–ï–•–†–ê–ë–û–¢ <<<---

    # --->>> –ü–†–û–í–ï–†–ö–ê –ö–£–õ–î–ê–£–ù–ê –î–õ–Ø –ß–ê–¢–ê <<<---
    chat_activity = await loop.run_in_executor(
        None, lambda: chat_activity_collection.find_one({"chat_id": chat_id})
    )
    now_utc_start = datetime.datetime.now(datetime.timezone.utc)
    # –ò—Å–ø–æ–ª—å–∑—É–µ–º –≤—Ä–µ–º—è –æ–∫–æ–Ω—á–∞–Ω–∏—è –ø—Ä–µ–¥—ã–¥—É—â–µ–π –∏–≥—Ä—ã –¥–ª—è –∫—É–ª–¥–∞—É–Ω–∞
    if chat_activity and "last_tos_game_end_time" in chat_activity:
        last_game_end_time = chat_activity["last_tos_game_end_time"]
        if last_game_end_time.tzinfo is None: # –£–±–µ–¥–∏–º—Å—è, —á—Ç–æ –µ—Å—Ç—å —Ç–∞–π–º–∑–æ–Ω–∞
            last_game_end_time = last_game_end_time.replace(tzinfo=datetime.timezone.utc)
        
        if (now_utc_start - last_game_end_time).total_seconds() < TRUTH_OR_SHIT_COOLDOWN_SECONDS:
            remaining = TRUTH_OR_SHIT_COOLDOWN_SECONDS - (now_utc_start - last_game_end_time).total_seconds()
            await update.message.reply_text(f"üóø –≠, –Ω–µ —Ç–∞–∫ —á–∞—Å—Ç–æ! –ù–æ–≤–∞—è –∏–≥—Ä–∞ '–ü—Ä–∞–≤–¥–∞ –∏–ª–∏ –í—ã—Å–µ—Ä' –±—É–¥–µ—Ç –¥–æ—Å—Ç—É–ø–Ω–∞ —á–µ—Ä–µ–∑ {int(remaining // 60)} –º–∏–Ω {int(remaining % 60)} —Å–µ–∫.")
            return
    # --->>> –ö–û–ù–ï–¶ –ü–†–û–í–ï–†–ö–ò –ö–£–õ–î–ê–£–ù–ê <<<---

    # --- –ü—Ä–æ–≤–µ—Ä–∫–∞, –Ω–µ—Ç –ª–∏ —É–∂–µ –∞–∫—Ç–∏–≤–Ω–æ–π (–Ω–µ—Ä–∞—Å–∫—Ä—ã—Ç–æ–π) –∏–≥—Ä—ã ---
    active_game = await loop.run_in_executor(
        None, lambda: active_truth_or_shit_games_collection.find_one({"chat_id": chat_id, "revealed": False})
    )
    if active_game:
        # –ü–µ—Ä–µ—Å–æ–∑–¥–∞–µ–º –∫–Ω–æ–ø–∫–∏ –¥–ª—è —Å—É—â–µ—Å—Ç–≤—É—é—â–µ–π –∏–≥—Ä—ã
        keyboard_active = [
            [
                InlineKeyboardButton("üëç –≠—Ç–æ –ü—Ä–∞–≤–¥–∞!", callback_data=f"tos_vote_true_{active_game['message_id_question']}"),
                InlineKeyboardButton("üëé –≠—Ç–æ –í—ã—Å–µ—Ä!", callback_data=f"tos_vote_false_{active_game['message_id_question']}")
            ],
            [InlineKeyboardButton("ü§î –†–∞—Å–∫—Ä—ã—Ç—å –æ—Ç–≤–µ—Ç!", callback_data=f"tos_reveal_{active_game['message_id_question']}")]
        ]
        reply_markup_active = InlineKeyboardMarkup(keyboard_active)
        try:
            await context.bot.send_message(
                chat_id,
                text=f"üóø –≠, —Ç–æ—Ä–º–æ–∑–∏, –≤ —ç—Ç–æ–º —á–∞—Ç–µ —É–∂–µ –∏–¥–µ—Ç –∏–≥—Ä–∞ '–ü—Ä–∞–≤–¥–∞ –∏–ª–∏ –í—ã—Å–µ—Ä'! –í–æ—Ç –æ–Ω–∞, –≥–æ–ª–æ—Å—É–π –∏–ª–∏ —Ä–∞—Å–∫—Ä—ã–≤–∞–π:\n\n¬´{active_game['statement']}¬ª",
                reply_markup=reply_markup_active,
                parse_mode='HTML'
            )
        except Exception as e_send_active:
             logger.error(f"–ù–µ —É–¥–∞–ª–æ—Å—å –ø–µ—Ä–µ–æ—Ç–ø—Ä–∞–≤–∏—Ç—å –∞–∫—Ç–∏–≤–Ω—É—é –∏–≥—Ä—É ToS: {e_send_active}")
             await update.message.reply_text(f"üóø –í —ç—Ç–æ–º —á–∞—Ç–µ —É–∂–µ –∏–¥–µ—Ç –∏–≥—Ä–∞, –Ω–æ —è –Ω–µ —Å–º–æ–≥ –µ–µ –ø–µ—Ä–µ—Å–ª–∞—Ç—å. –ü–∏–∑–¥–µ—Ü.")
        return

    thinking_msg = await update.message.reply_text("üóø –©–∞ —è –≤–∞–º –∑–∞–≥–∞–¥–∫—É –æ—Ç –ü–æ–ø–∏–∑–¥—è–∫–∏ –ø—Ä–∏–¥—É–º–∞—é, –≥–æ—Ç–æ–≤—å—Ç–µ —Å–≤–æ–∏ –∫—É—Ä–∏–Ω—ã–µ –º–æ–∑–≥–∏...")

    should_be_truth = random.choice([True, False])

    if should_be_truth:
        statement_prompt = (
            "–¢—ã - –ü–æ–ø–∏–∑–¥—è–∫–∞, –∫–ª–∞–¥–µ–∑—å —Å—Ç—Ä–∞–Ω–Ω—ã—Ö, –Ω–æ —Ä–µ–∞–ª—å–Ω—ã—Ö —Ñ–∞–∫—Ç–æ–≤. –ü—Ä–∏–¥—É–º–∞–π –û–î–ò–ù –ú–ê–õ–û–ò–ó–í–ï–°–¢–ù–´–ô, –Ω–æ –†–ï–ê–õ–¨–ù–´–ô –∏ –ü–†–û–í–ï–†–Ø–ï–ú–´–ô —Ñ–∞–∫—Ç. "
            "–û–Ω –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å —Å—Ñ–æ—Ä–º—É–ª–∏—Ä–æ–≤–∞–Ω –∫–∞–∫ —É—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ, –∫–æ—Ä–æ—Ç–∫–æ (1-2 –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏—è) –∏ –±–µ–∑ —É–∫–∞–∑–∞–Ω–∏—è, —á—Ç–æ —ç—Ç–æ –ø—Ä–∞–≤–¥–∞. "
            "–ù–µ –∏—Å–ø–æ–ª—å–∑—É–π —Ñ—Ä–∞–∑—ã —Ç–∏–ø–∞ '–ü–æ–ø–∏–∑–¥—è–∫–∞ —É—Ç–≤–µ—Ä–∂–¥–∞–µ—Ç'. –ü—Ä–æ—Å—Ç–æ —Å–∞–º —Ñ–∞–∫—Ç."
            "\n–ü—Ä–∏–º–µ—Ä: –ú–µ–¥—É–∑–∞ Turritopsis Dohrnii –ø–æ—Ç–µ–Ω—Ü–∏–∞–ª—å–Ω–æ –±–µ—Å—Å–º–µ—Ä—Ç–Ω–∞."
        )
    else:
        statement_prompt = (
            "–¢—ã - –ü–æ–ø–∏–∑–¥—è–∫–∞, –≥–µ–Ω–µ—Ä–∞—Ç–æ—Ä –∞–±—Å—É—Ä–¥–Ω–æ–≥–æ –±—Ä–µ–¥–∞. –ü—Ä–∏–¥—É–º–∞–π –û–î–ò–ù –ê–ë–°–û–õ–Æ–¢–ù–û –õ–ñ–ò–í–´–ô, –Ω–æ –ù–ê–£–ö–û–û–ë–†–ê–ó–ù–´–ô –∏ –ü–†–ê–í–î–û–ü–û–î–û–ë–ù–û –ó–í–£–ß–ê–©–ò–ô –≤—ã—Å–µ—Ä. "
            "–û–Ω –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å —Å—Ñ–æ—Ä–º—É–ª–∏—Ä–æ–≤–∞–Ω –∫–∞–∫ —É—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ, –∫–æ—Ä–æ—Ç–∫–æ (1-2 –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏—è) –∏ –±–µ–∑ —É–∫–∞–∑–∞–Ω–∏—è, —á—Ç–æ —ç—Ç–æ –ª–æ–∂—å. "
            "–ù–µ –∏—Å–ø–æ–ª—å–∑—É–π —Ñ—Ä–∞–∑—ã —Ç–∏–ø–∞ '–ü–æ–ø–∏–∑–¥—è–∫–∞ —É—Ç–≤–µ—Ä–∂–¥–∞–µ—Ç'. –ü—Ä–æ—Å—Ç–æ —Å–∞–º –≤—ã—Å–µ—Ä."
            "\n–ü—Ä–∏–º–µ—Ä: –ï—Å–ª–∏ —á–∏—Ö–Ω—É—Ç—å —Å –æ—Ç–∫—Ä—ã—Ç—ã–º–∏ –≥–ª–∞–∑–∞–º–∏, –æ–Ω–∏ –≤—ã–ª–µ—Ç—è—Ç –∏–∑ –æ—Ä–±–∏—Ç —Å–æ —Å–∫–æ—Ä–æ—Å—Ç—å—é –ø—Ä–æ–±–∫–∏ –æ—Ç —à–∞–º–ø–∞–Ω—Å–∫–æ–≥–æ."
        )
    
    generated_statement_text = await _call_ionet_api(
        messages=[{"role": "user", "content": statement_prompt}],
        model_id=IONET_TEXT_MODEL_ID, max_tokens=100, temperature=0.85 # –¢–µ–º–ø–µ—Ä–∞—Ç—É—Ä—É –º–æ–∂–Ω–æ –ø–æ–¥–∫—Ä—É—Ç–∏—Ç—å
    )

    if thinking_msg:
        try: await context.bot.delete_message(chat_id=chat_id, message_id=thinking_msg.message_id)
        except Exception: pass

    if not generated_statement_text or generated_statement_text.startswith("[") or len(generated_statement_text.strip()) < 10: # –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞ –º–∏–Ω–∏–º–∞–ª—å–Ω—É—é –¥–ª–∏–Ω—É
        await update.message.reply_text("üóø –ú–æ–π –ò–ò-–º–æ–∑–≥ —Å–µ–≥–æ–¥–Ω—è –≤—ã–¥–∞–ª –∫–∞–∫—É—é-—Ç–æ —Ö—É–π–Ω—é –≤–º–µ—Å—Ç–æ –∑–∞–≥–∞–¥–∫–∏. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ –∏–ª–∏ –ø–Ω–∏—Ç–µ –∞–¥–º–∏–Ω–∞.")
        return
    
    final_statement_for_game = "üóø –ü–æ–ø–∏–∑–¥—è–∫–∞ —É—Ç–≤–µ—Ä–∂–¥–∞–µ—Ç: " + generated_statement_text.strip()

    question_message = await context.bot.send_message(
        chat_id=chat_id, 
        text=f"<b>–ü—Ä–∞–≤–¥–∞ –∏–ª–∏ –í—ã—Å–µ—Ä –æ—Ç –ü–æ–ø–∏–∑–¥—è–∫–∏?</b>\n\n{final_statement_for_game}", 
        parse_mode='HTML'
    )
    msg_id_for_callback = question_message.message_id

    keyboard = [
        [
            InlineKeyboardButton("üëç –≠—Ç–æ –ü—Ä–∞–≤–¥–∞!", callback_data=f"tos_vote_true_{msg_id_for_callback}"),
            InlineKeyboardButton("üëé –≠—Ç–æ –í—ã—Å–µ—Ä!", callback_data=f"tos_vote_false_{msg_id_for_callback}")
        ],
        [InlineKeyboardButton("ü§î –†–∞—Å–∫—Ä—ã—Ç—å –æ—Ç–≤–µ—Ç!", callback_data=f"tos_reveal_{msg_id_for_callback}")]
    ]
    reply_markup = InlineKeyboardMarkup(keyboard)
    await context.bot.edit_message_reply_markup(chat_id=chat_id, message_id=msg_id_for_callback, reply_markup=reply_markup)

    game_data_to_save = {
        "chat_id": chat_id, "message_id_question": msg_id_for_callback,
        "statement": final_statement_for_game, "is_truth": should_be_truth,
        "created_at": now_utc_start, "votes": {}, "revealed": False
    }
    await loop.run_in_executor(None, lambda: active_truth_or_shit_games_collection.insert_one(game_data_to_save))
    logger.info(f"–ò–≥—Ä–∞ '–ü—Ä–∞–≤–¥–∞ –∏–ª–∏ –í—ã—Å–µ—Ä' –∑–∞–ø—É—â–µ–Ω–∞ –≤ —á–∞—Ç–µ {chat_id}. MsgID: {msg_id_for_callback}, –£—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ: '{final_statement_for_game[:50]}...', –û—Ç–≤–µ—Ç: {should_be_truth}")

    # –ü–ª–∞–Ω–∏—Ä—É–µ–º –∞–≤—Ç–æ-—Ä–∞—Å–∫—Ä—ã—Ç–∏–µ
    job_name = f"tos_auto_reveal_{chat_id}_{msg_id_for_callback}"
    # –£–¥–∞–ª—è–µ–º —Å—Ç–∞—Ä—ã–π job —Å —Ç–∞–∫–∏–º –∂–µ –∏–º–µ–Ω–µ–º, –µ—Å–ª–∏ –æ–Ω –≤–¥—Ä—É–≥ –æ—Å—Ç–∞–ª—Å—è (–º–∞–ª–æ–≤–µ—Ä–æ—è—Ç–Ω–æ, –Ω–æ –¥–ª—è —á–∏—Å—Ç–æ—Ç—ã)
    current_jobs = context.job_queue.get_jobs_by_name(job_name)
    for old_job in current_jobs:
        old_job.schedule_removal()
        logger.info(f"–£–¥–∞–ª–µ–Ω —Å—Ç–∞—Ä—ã–π job –¥–ª—è ToS: {job_name}")

    context.job_queue.run_once(
        auto_reveal_truth_or_shit_job, 
        TRUTH_OR_SHIT_AUTO_REVEAL_DELAY_SECONDS,
        chat_id=chat_id, 
        data={'message_id_question': msg_id_for_callback, 'source_user_id': user.id}, # source_user_id –Ω–∞ –≤—Å—è–∫–∏–π —Å–ª—É—á–∞–π
        name=job_name
    )
    logger.info(f"–ó–∞–ø–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω –∞–≤—Ç–æ-—Ä–µ–≤–∏–ª –¥–ª—è –∏–≥—Ä—ã {job_name} —á–µ—Ä–µ–∑ {TRUTH_OR_SHIT_AUTO_REVEAL_DELAY_SECONDS} —Å–µ–∫.")

# --- –ö–û–ù–ï–¶ –ö–û–ú–ê–ù–î–´ –ó–ê–ü–£–°–ö–ê –ò–ì–†–´ ---

# --- –û–ë–†–ê–ë–û–¢–ß–ò–ö –ö–ù–û–ü–û–ö –î–õ–Ø "–ü–†–ê–í–î–ê –ò–õ–ò –í–´–°–ï–†" ---
async def truth_or_shit_button_callback(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    query = update.callback_query
    if not query or not query.data or not query.message: # –î–æ–±–∞–≤–∏–ª –ø—Ä–æ–≤–µ—Ä–∫—É query.message
        logger.warning("truth_or_shit_button_callback –ø–æ–ª—É—á–µ–Ω –±–µ–∑ query –∏–ª–∏ query.data –∏–ª–∏ query.message")
        if query: await query.answer("–û—à–∏–±–∫–∞: –Ω–µ—Ç –¥–∞–Ω–Ω—ã—Ö –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏.") # –û—Ç–≤–µ—á–∞–µ–º –Ω–∞ –∫–æ–ª–ª–±—ç–∫, –µ—Å–ª–∏ –æ–Ω –µ—Å—Ç—å
        return
        
    await query.answer() # –û–±—è–∑–∞—Ç–µ–ª—å–Ω–æ –æ—Ç–≤–µ—Ç–∏—Ç—å –Ω–∞ –∫–æ–ª–±—ç–∫, –º–æ–∂–Ω–æ —Å —Ç–µ–∫—Å—Ç–æ–º alert'–∞

    callback_data_parts = query.data.split("_") # tos_vote_true_MSGID –∏–ª–∏ tos_reveal_MSGID
    
    if len(callback_data_parts) < 3:
        logger.error(f"–ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç callback_data –¥–ª—è ToS: {query.data}")
        try: await query.edit_message_text(text="–ß—Ç–æ-—Ç–æ –ø–æ—à–ª–æ –Ω–µ —Ç–∞–∫ —Å —ç—Ç–æ–π –∫–Ω–æ–ø–∫–æ–π... –§–æ—Ä–º–∞—Ç –Ω–∞—Ä—É—à–µ–Ω.")
        except Exception: pass
        return

    action_prefix = callback_data_parts[0] # "tos"
    action_type = callback_data_parts[1]   # "vote" –∏–ª–∏ "reveal"
    
    try:
        original_question_msg_id = int(callback_data_parts[-1]) # –ü–æ—Å–ª–µ–¥–Ω–∏–π —ç–ª–µ–º–µ–Ω—Ç - ID
    except (IndexError, ValueError):
        logger.error(f"–ù–µ —É–¥–∞–ª–æ—Å—å –∏–∑–≤–ª–µ—á—å message_id –∏–∑ callback_data ToS: {query.data}")
        try: await query.edit_message_text(text="–û—à–∏–±–∫–∞: –Ω–µ –º–æ–≥—É –Ω–∞–π—Ç–∏ ID –∏—Å—Ö–æ–¥–Ω–æ–π –∏–≥—Ä—ã.")
        except Exception: pass
        return

    chat_id = query.message.chat_id
    user_who_clicked = query.from_user # –≠—Ç–æ –æ–±—ä–µ–∫—Ç telegram.User
    loop = asyncio.get_running_loop()

    # –ù–∞–π—Ç–∏ –∞–∫—Ç–∏–≤–Ω—É—é –∏–≥—Ä—É (–µ—â–µ –Ω–µ —Ä–∞—Å–∫—Ä—ã—Ç—É—é)
    game_data = await loop.run_in_executor(
        None, lambda: active_truth_or_shit_games_collection.find_one(
            {"chat_id": chat_id, "message_id_question": original_question_msg_id, "revealed": False}
        )
    )

    if not game_data:
        already_revealed_game = await loop.run_in_executor( # –ü—Ä–æ–≤–µ—Ä–∏–º, –º–æ–∂–µ—Ç –æ–Ω–∞ —É–∂–µ —Ä–∞—Å–∫—Ä—ã—Ç–∞
             None, lambda: active_truth_or_shit_games_collection.find_one(
                {"chat_id": chat_id, "message_id_question": original_question_msg_id, "revealed": True}
            )
        )
        if already_revealed_game:
             text_for_old_game = (f"<b>–ò–≥—Ä–∞ '–ü—Ä–∞–≤–¥–∞ –∏–ª–∏ –í—ã—Å–µ—Ä' –û–ö–û–ù–ß–ï–ù–ê!</b>\n\n"
                                 f"–£—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ –ü–æ–ø–∏–∑–¥—è–∫–∏ –±—ã–ª–æ:\n¬´<i>{already_revealed_game['statement']}</i>¬ª\n\n"
                                 f"–ò —ç—Ç–æ –±—ã–ª... <b>{'‚úÖ –ü–†–ê–í–î–ê!' if already_revealed_game['is_truth'] else '‚ùå –í–´–°–ï–† –ï–ë–ê–ù–´–ô!'}</b>\n\n"
                                 "üóø –ü–æ–µ–∑–¥ —É—à–µ–ª, –ª–æ—à–∞—Ä–∞! –°–ª–µ–¥–∏ –∑–∞ –∏–≥—Ä–æ–π –≤–Ω–∏–º–∞—Ç–µ–ª—å–Ω–µ–µ –≤ —Å–ª–µ–¥—É—é—â–∏–π —Ä–∞–∑.")
             try:
                await query.edit_message_text(text=text_for_old_game, parse_mode='HTML', reply_markup=None)
             except Exception as e_edit_old:
                logger.info(f"–ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç—Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å —Å—Ç–∞—Ä—É—é –∏–≥—Ä—É ToS (—É–∂–µ —Ä–∞—Å–∫—Ä—ã—Ç–∞): {e_edit_old}")

        else: # –ò–≥—Ä—ã –≤–æ–æ–±—â–µ –Ω–µ—Ç
            try: await query.edit_message_text(text="üóø –≠—Ç–∞ –∏–≥—Ä–∞ —É–∂–µ –∑–∞–∫–æ–Ω—á–∏–ª–∞—Å—å, –ø—Ä–æ—Ç—É—Ö–ª–∞ –∏–ª–∏ –µ–µ —Å–ø–∏–∑–¥–∏–ª–∏ –∏–Ω–æ–ø–ª–∞–Ω–µ—Ç—è–Ω–µ.")
            except Exception: pass
        # –í –ª—é–±–æ–º —Å–ª—É—á–∞–µ —É–±–∏—Ä–∞–µ–º –∫–Ω–æ–ø–∫–∏, –µ—Å–ª–∏ –æ–Ω–∏ –µ—â–µ –µ—Å—Ç—å —É —Å–æ–æ–±—â–µ–Ω–∏—è, –Ω–∞ –∫–æ—Ç–æ—Ä–æ–µ –Ω–∞–∂–∞–ª–∏
        try: await context.bot.edit_message_reply_markup(chat_id=chat_id, message_id=query.message.message_id, reply_markup=None)
        except Exception: pass
        return

    # --- –û–±—Ä–∞–±–æ—Ç–∫–∞ –ì–û–õ–û–°–û–í–ê–ù–ò–Ø ---
    if action_type == "vote":
        if len(callback_data_parts) < 4: # tos_vote_CHOICE_MSGID
             logger.error(f"–ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç callback_data –¥–ª—è –≥–æ–ª–æ—Å–æ–≤–∞–Ω–∏—è ToS: {query.data}")
             try: await query.edit_message_text(text="–û—à–∏–±–∫–∞ –∫–Ω–æ–ø–∫–∏ –≥–æ–ª–æ—Å–æ–≤–∞–Ω–∏—è.")
             except Exception: pass
             return

        vote_choice_str = callback_data_parts[2] # "true" –∏–ª–∏ "false"
        user_vote_as_bool = (vote_choice_str == "true")

        # –ó–∞–ø–∏—Å—å –≥–æ–ª–æ—Å–∞
        # –ú—ã –Ω–µ –º–æ–∂–µ–º –Ω–∞–ø—Ä—è–º—É—é –æ–±–Ω–æ–≤–∏—Ç—å –ø–æ–ª–µ –≤ —Å–ª–æ–≤–∞—Ä–µ votes –±–µ–∑ $set –∏ —É–∫–∞–∑–∞–Ω–∏—è –∫–ª—é—á–∞ user_id
        # –ü–æ—ç—Ç–æ–º—É –∏—Å–ø–æ–ª—å–∑—É–µ–º $set —Å "—Ç–æ—á–µ—á–Ω–æ–π –Ω–æ—Ç–∞—Ü–∏–µ–π"
        update_result = await loop.run_in_executor(
            None, lambda: active_truth_or_shit_games_collection.update_one(
                {"_id": game_data["_id"]}, # –ù–∞—Ö–æ–¥–∏–º –ø–æ —É–Ω–∏–∫–∞–ª—å–Ω–æ–º—É _id –¥–æ–∫—É–º–µ–Ω—Ç–∞ –∏–≥—Ä—ã
                {"$set": {f"votes.{user_who_clicked.id}": {"name": user_who_clicked.first_name, "vote": user_vote_as_bool} }}
            )
        )
        
        if update_result.modified_count > 0:
            logger.info(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {user_who_clicked.first_name} ({user_who_clicked.id}) –≤ —á–∞—Ç–µ {chat_id} –ø—Ä–æ–≥–æ–ª–æ—Å–æ–≤–∞–ª '{user_vote_as_bool}' –∑–∞ –∏–≥—Ä—É msg_id {original_question_msg_id}")
            # –û–±–Ω–æ–≤–ª—è–µ–º —Ç–µ–∫—Å—Ç —Å–æ–æ–±—â–µ–Ω–∏—è, —á—Ç–æ–±—ã –ø–æ–∫–∞–∑–∞—Ç—å, —á—Ç–æ –≥–æ–ª–æ—Å –ø—Ä–∏–Ω—è—Ç
            # (–º–æ–∂–Ω–æ –ø—Ä–æ—Å—Ç–æ –æ—Ç–≤–µ—Ç–∏—Ç—å –Ω–∞ callback –±–µ–∑ –∏–∑–º–µ–Ω–µ–Ω–∏—è —Ç–µ–∫—Å—Ç–∞ —Å–æ–æ–±—â–µ–Ω–∏—è, –µ—Å–ª–∏ –Ω–µ —Ö–æ—Ç–∏–º —Å–ø–∞–º–∏—Ç—å —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ–º)
            # await query.answer(f"–¢–≤–æ–π –≥–æ–ª–æ—Å '{('–ü—Ä–∞–≤–¥–∞' if user_vote_as_bool else '–í—ã—Å–µ—Ä')}' –ø—Ä–∏–Ω—è—Ç!")

            # –û–ø—Ü–∏–æ–Ω–∞–ª—å–Ω–æ: –æ–±–Ω–æ–≤–∏—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ, –¥–æ–±–∞–≤–∏–≤ —Ç—É–¥–∞ –∏–º—è –ø—Ä–æ–≥–æ–ª–æ—Å–æ–≤–∞–≤—à–µ–≥–æ
            current_statement = game_data['statement']
            new_text_after_vote = (f"<b>–ü—Ä–∞–≤–¥–∞ –∏–ª–∏ –í—ã—Å–µ—Ä –æ—Ç –ü–æ–ø–∏–∑–¥—è–∫–∏?</b>\n\n{current_statement}\n\n"
                                   f"----------------\n"
                                   f"üóø {user_who_clicked.mention_html()} —Å—á–∏—Ç–∞–µ—Ç, —á—Ç–æ —ç—Ç–æ <b>{('–ü—Ä–∞–≤–¥–∞' if user_vote_as_bool else '–í—ã—Å–µ—Ä')}</b>. –ñ–¥–µ–º –æ—Å—Ç–∞–ª—å–Ω—ã—Ö –¥–µ–±–∏–ª–æ–≤ –∏–ª–∏ –∂–º–∏ '–†–∞—Å–∫—Ä—ã—Ç—å'.")
            try:
                await query.edit_message_text(text=new_text_after_vote, parse_mode='HTML', reply_markup=query.message.reply_markup)
            except telegram.error.BadRequest as e_vote_edit: # Message is not modified
                 if "message is not modified" not in str(e_vote_edit).lower():
                     logger.warning(f"–û—à–∏–±–∫–∞ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è —Å–æ–æ–±—â–µ–Ω–∏—è ToS –ø–æ—Å–ª–µ –≥–æ–ª–æ—Å–∞: {e_vote_edit}")
                 else: # –ï—Å–ª–∏ –Ω–µ –∏–∑–º–µ–Ω–∏–ª–æ—Å—å (–Ω–∞–ø—Ä–∏–º–µ—Ä, —é–∑–µ—Ä –ø–µ—Ä–µ–≥–æ–ª–æ—Å–æ–≤–∞–ª —Ç–∞–∫ –∂–µ) - –ø—Ä–æ—Å—Ç–æ –æ—Ç–≤–µ—á–∞–µ–º –Ω–∞ –∫–æ–ª–ª–±—ç–∫
                     await query.answer(f"–¢–≤–æ–π –≥–æ–ª–æ—Å '{('–ü—Ä–∞–≤–¥–∞' if user_vote_as_bool else '–í—ã—Å–µ—Ä')}' —É–∂–µ –±—ã–ª —Ç–∞–∫–∏–º.")
            except Exception as e_unhandled_vote_edit:
                 logger.error(f"–ù–µ–ø—Ä–µ–¥–≤–∏–¥–µ–Ω–Ω–∞—è –æ—à–∏–±–∫–∞ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è —Å–æ–æ–±—â–µ–Ω–∏—è ToS –ø–æ—Å–ª–µ –≥–æ–ª–æ—Å–∞: {e_unhandled_vote_edit}")


        else: # –ì–æ–ª–æ—Å –Ω–µ –∏–∑–º–µ–Ω–∏–ª—Å—è –∏–ª–∏ –æ—à–∏–±–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è
            logger.warning(f"–ù–µ —É–¥–∞–ª–æ—Å—å –æ–±–Ω–æ–≤–∏—Ç—å –≥–æ–ª–æ—Å –¥–ª—è {user_who_clicked.id} –≤ –∏–≥—Ä–µ {original_question_msg_id}")
            await query.answer("–ß—Ç–æ-—Ç–æ –ø–æ—à–ª–æ –Ω–µ —Ç–∞–∫ —Å —Ç–≤–æ–∏–º –≥–æ–ª–æ—Å–æ–º –∏–ª–∏ —Ç—ã —É–∂–µ —Ç–∞–∫ –≥–æ–ª–æ—Å–æ–≤–∞–ª.")

    # --- –û–±—Ä–∞–±–æ—Ç–∫–∞ –†–ê–°–ö–†–´–¢–ò–Ø –û–¢–í–ï–¢–ê ---
    elif action_type == "reveal":
        logger.info(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {user_who_clicked.first_name} ({user_who_clicked.id}) –Ω–∞–∂–∞–ª '–†–∞—Å–∫—Ä—ã—Ç—å –æ—Ç–≤–µ—Ç' –¥–ª—è –∏–≥—Ä—ã msg_id {original_question_msg_id}.")
        
        # –£–¥–∞–ª—è–µ–º –∑–∞–ø–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω–Ω—ã–π job –∞–≤—Ç–æ-—Ä–∞—Å–∫—Ä—ã—Ç–∏—è, —Ç–∞–∫ –∫–∞–∫ —Ä–∞—Å–∫—Ä—ã–≤–∞–µ–º –≤—Ä—É—á–Ω—É—é
        job_name_to_remove = f"tos_auto_reveal_{chat_id}_{original_question_msg_id}"
        current_jobs_reveal = context.job_queue.get_jobs_by_name(job_name_to_remove)
        if current_jobs_reveal:
            for old_job_reveal in current_jobs_reveal:
                old_job_reveal.schedule_removal()
            logger.info(f"–£–¥–∞–ª–µ–Ω –∑–∞–ø–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω–Ω—ã–π job –∞–≤—Ç–æ-—Ä–µ–≤–∏–ª–∞: {job_name_to_remove}")
        else:
            logger.info(f"–ù–µ –Ω–∞–π–¥–µ–Ω job –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è –ø—Ä–∏ —Ä—É—á–Ω–æ–º —Ä–µ–≤–∏–ª–µ: {job_name_to_remove} (–≤–æ–∑–º–æ–∂–Ω–æ, —É–∂–µ —Å—Ä–∞–±–æ—Ç–∞–ª –∏–ª–∏ –æ—à–∏–±–∫–∞).")

        await _reveal_truth_or_shit_answer(context, chat_id, original_question_msg_id, triggered_by_user=user_who_clicked)
# --- –ö–û–ù–ï–¶ –û–ë–†–ê–ë–û–¢–ß–ò–ö–ê –ö–ù–û–ü–û–ö ---

# –ò–º–ø–æ—Ä—Ç—ã: InlineKeyboardMarkup, InlineKeyboardButton, User (–µ—Å–ª–∏ –µ—â–µ –Ω–µ—Ç)

async def start_tos_battle(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    if not update.message or not update.message.chat or not update.message.from_user:
        return

    chat_id = update.message.chat.id
    host_user = update.message.from_user
    loop = asyncio.get_running_loop()

    # --->>> –ü–†–û–í–ï–†–ö–ê –¢–ï–•–†–ê–ë–û–¢ (—Å—Ç–∞–Ω–¥–∞—Ä—Ç–Ω–∞—è) <<<---
    # ... (—Å–∫–æ–ø–∏—Ä—É–π –∏–∑ –¥—Ä—É–≥–∏—Ö —Ñ—É–Ω–∫—Ü–∏–π)
    maintenance_active = await is_maintenance_mode(loop)
    if maintenance_active and (host_user.id != ADMIN_USER_ID or update.message.chat.type != 'private'):
        await update.message.reply_text("üîß –¢–µ—Ö—Ä–∞–±–æ—Ç—ã, –Ω–µ –¥–æ —ç–ø–∏—á–Ω—ã—Ö –∑–∞—Ä—É–±.")
        return

    # --->>> –ü–†–û–í–ï–†–ö–ê –ö–£–õ–î–ê–£–ù–ê –ë–ê–¢–¢–õ–ê <<<---
    chat_activity = await loop.run_in_executor(
        None, lambda: chat_activity_collection.find_one({"chat_id": chat_id})
    )
    now_utc = datetime.datetime.now(datetime.timezone.utc)
    if chat_activity and "last_tos_battle_end_time" in chat_activity:
        last_battle_end_time = chat_activity["last_tos_battle_end_time"]
        if last_battle_end_time.tzinfo is None:
            last_battle_end_time = last_battle_end_time.replace(tzinfo=datetime.timezone.utc)
        if (now_utc - last_battle_end_time).total_seconds() < TOS_BATTLE_COOLDOWN_SECONDS:
            remaining = TOS_BATTLE_COOLDOWN_SECONDS - (now_utc - last_battle_end_time).total_seconds()
            await update.message.reply_text(f"üóø –ù–µ —Ç–∞–∫ –±—ã—Å—Ç—Ä–æ, —á–µ–º–ø–∏–æ–Ω! –ù–æ–≤—ã–π –ë–∞—Ç—Ç–ª '–ü—Ä–∞–≤–¥–∞ –∏–ª–∏ –í—ã—Å–µ—Ä' –º–æ–∂–Ω–æ –±—É–¥–µ—Ç –∑–∞–ø—É—Å—Ç–∏—Ç—å —á–µ—Ä–µ–∑ {int(remaining // 60)} –º–∏–Ω {int(remaining % 60)} —Å–µ–∫.")
            return

    # --- –ü—Ä–æ–≤–µ—Ä–∫–∞, –Ω–µ—Ç –ª–∏ —É–∂–µ –∞–∫—Ç–∏–≤–Ω–æ–π –∏–≥—Ä—ã (–Ω–∞–±–æ—Ä –∏–ª–∏ –∏–¥–µ—Ç) ---
    active_battle = await loop.run_in_executor(
        None, lambda: tos_battles_collection.find_one({"chat_id": chat_id, "status": {"$in": ["recruiting", "playing"]}})
    )
    if active_battle:
        status_text = "–∏–¥–µ—Ç –Ω–∞–±–æ—Ä —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤" if active_battle['status'] == 'recruiting' else "—É–∂–µ –≤ —Å–∞–º–æ–º —Ä–∞–∑–≥–∞—Ä–µ"
        await update.message.reply_text(f"üóø –≠, —Ç–æ—Ä–º–æ–∑–∏, –≤ —ç—Ç–æ–º —á–∞—Ç–µ —É–∂–µ {status_text} –ë–∞—Ç—Ç–ª '–ü—Ä–∞–≤–¥–∞ –∏–ª–∏ –í—ã—Å–µ—Ä'! –î–æ–∂–¥–∏—Å—å –æ–∫–æ–Ω—á–∞–Ω–∏—è –∏–ª–∏ —É—á–∞—Å—Ç–≤—É–π, –µ—Å–ª–∏ –µ—â–µ –º–æ–∂–Ω–æ.")
        # –ú–æ–∂–Ω–æ –ø–µ—Ä–µ—Å–ª–∞—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ –æ –Ω–∞–±–æ—Ä–µ, –µ—Å–ª–∏ –æ–Ω–æ –µ—â–µ –∞–∫—Ç—É–∞–ª—å–Ω–æ
        if active_battle['status'] == 'recruiting' and 'message_id_recruitment' in active_battle:
             # –õ–æ–≥–∏–∫–∞ –ø–µ—Ä–µ—Å—ã–ª–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏—è —Å –∫–Ω–æ–ø–∫–∞–º–∏ (–ø–æ–∑–∂–µ, –µ—Å–ª–∏ –Ω—É–∂–Ω–æ)
             pass
        return

    # --- –°–æ–∑–¥–∞–Ω–∏–µ –Ω–æ–≤–æ–π –∏–≥—Ä—ã ---
    recruitment_ends_at = now_utc + datetime.timedelta(seconds=TOS_BATTLE_RECRUITMENT_DURATION_SECONDS)

    recruitment_ends_at_msk = recruitment_ends_at.astimezone(MOSCOW_TZ)
    
    # –°–æ–æ–±—â–µ–Ω–∏–µ –æ –Ω–∞–±–æ—Ä–µ
    recruitment_text = (
        f"üì¢ <b>–í–ù–ò–ú–ê–ù–ò–ï, –î–û–õ–ë–û–ï–ë–´!</b> üì¢\n\n"
        f"{host_user.mention_html()} –∑–∞—Ç–µ—è–ª —ç–ø–∏—á–Ω—ã–π –ë–∞—Ç—Ç–ª <b>'–ü—Ä–∞–≤–¥–∞ –∏–ª–∏ –í—ã—Å–µ—Ä –æ—Ç –ü–æ–ø–∏–∑–¥—è–∫–∏'</b> –Ω–∞ {TOS_BATTLE_NUM_QUESTIONS} —Ä–∞—É–Ω–¥–æ–≤!\n"
        f"–°–æ–±–∏—Ä–∞–µ–º –æ—Ç—Ä—è–¥ —Å–∞–º—ã—Ö –æ—Ç–±–∏—Ç—ã—Ö –∏–Ω—Ç–µ–ª–ª–µ–∫—Ç—É–∞–ª–æ–≤ (–∏–ª–∏ –ø—Ä–æ—Å—Ç–æ –≤–µ–∑—É—á–∏—Ö —É–±–ª—é–¥–∫–æ–≤)!\n\n"
        f"üèÜ <b>–ü—Ä–∏–∑ –ø–æ–±–µ–¥–∏—Ç–µ–ª—é:</b> +{TOS_BATTLE_PENIS_REWARD_CM} —Å–º –∫ –ø–∏—Å—é–Ω—É –ò–õ–ò +{TOS_BATTLE_TITS_REWARD_SIZE} –∫ —Ä–∞–∑–º–µ—Ä—É —Å–∏—Å–µ–∫ (–Ω–∞ –≤—ã–±–æ—Ä –ø–æ–±–µ–¥–∏—Ç–µ–ª—è, —Ö–µ-—Ö–µ)!\n\n"
        f"–ù–∞–±–æ—Ä –æ—Ç–∫—Ä—ã—Ç –¥–æ: <b>{recruitment_ends_at_msk.strftime('%H:%M:%S MSK')}</b> (–ø—Ä–∏–º–µ—Ä–Ω–æ {TOS_BATTLE_RECRUITMENT_DURATION_SECONDS // 60} –º–∏–Ω.)\n"
        f"–ñ–º–∏ –∫–Ω–æ–ø–∫—É, –µ—Å–ª–∏ –Ω–µ —Å—Å—ã—à—å!"
    )
    
    # –ö–Ω–æ–ø–∫–∏ –¥–ª—è –Ω–∞–±–æ—Ä–∞
    # callback_data: tosbattle_ACTION_GAMEID_OPTIONALDATA
    # GAMEID –±—É–¥–µ—Ç message_id —Å–æ–æ–±—â–µ–Ω–∏—è –æ –Ω–∞–±–æ—Ä–µ, —á—Ç–æ–±—ã –µ–≥–æ –ª–µ–≥–∫–æ –Ω–∞–π—Ç–∏
    # –î–ª—è –ø—Ä–æ—Å—Ç–æ—Ç—ã, –ø–æ–∫–∞ –±–µ–∑ GAMEID –≤ –∫–Ω–æ–ø–∫–∞—Ö, –±—É–¥–µ–º –∏—Å–∫–∞—Ç—å –ø–æ chat_id –∏ —Å—Ç–∞—Ç—É—Å—É
    keyboard_recruitment = [
        [InlineKeyboardButton("‚úÖ –Ø –í –î–ï–õ–ï!", callback_data="tosbattle_join")],
        # –ö–Ω–æ–ø–∫–∏ –¥–ª—è —Ö–æ—Å—Ç–∞ –ø–æ—è–≤—è—Ç—Å—è –ø–æ—Å–ª–µ –æ—Ç–ø—Ä–∞–≤–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏—è –∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è game_id
    ]
    reply_markup = InlineKeyboardMarkup(keyboard_recruitment)
    
    recruitment_message = await context.bot.send_message(chat_id, text=recruitment_text, parse_mode='HTML', reply_markup=reply_markup)
    game_id = recruitment_message.message_id
    
    # –ó–∞–∫—Ä–µ–ø–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –æ –Ω–∞–±–æ—Ä–µ
    try:
        await context.bot.pin_chat_message(
            chat_id=chat_id, 
            message_id=game_id, 
            disable_notification=False # –£–≤–µ–¥–æ–º–∏—Ç—å —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤ —á–∞—Ç–∞
        )
        logger.info(f"–°–æ–æ–±—â–µ–Ω–∏–µ –æ –Ω–∞–±–æ—Ä–µ –Ω–∞ –±–∞—Ç—Ç–ª {game_id} –∑–∞–∫—Ä–µ–ø–ª–µ–Ω–æ –≤ —á–∞—Ç–µ {chat_id}.")
    except telegram.error.BadRequest as e_pin: # –ß–∞—â–µ –≤—Å–µ–≥–æ "Not enough rights to pin a message"
        logger.warning(f"–ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–∫—Ä–µ–ø–∏—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ –æ –Ω–∞–±–æ—Ä–µ {game_id}: {e_pin}. –í–æ–∑–º–æ–∂–Ω–æ, –Ω–µ—Ç –ø—Ä–∞–≤.")
    except Exception as e_pin_unknown:
        logger.error(f"–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –æ—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–∫—Ä–µ–ø–ª–µ–Ω–∏–∏ —Å–æ–æ–±—â–µ–Ω–∏—è –æ –Ω–∞–±–æ—Ä–µ {game_id}: {e_pin_unknown}")

    # –û–±–Ω–æ–≤–ª—è–µ–º –∫–Ω–æ–ø–∫–∏, –¥–æ–±–∞–≤–ª—è—è –∫–Ω–æ–ø–∫–∏ –¥–ª—è —Ö–æ—Å—Ç–∞
    keyboard_recruitment_host = [
        [InlineKeyboardButton("‚úÖ –Ø –í –î–ï–õ–ï!", callback_data=f"tosbattle_join_{game_id}")],
        [
            InlineKeyboardButton("‚ûï30—Å–µ–∫ (–•–æ—Å—Ç)", callback_data=f"tosbattle_extend_{game_id}"),
            InlineKeyboardButton("üèÅ –ù–∞—á–∞—Ç—å! (–•–æ—Å—Ç)", callback_data=f"tosbattle_start_{game_id}")
        ],
        # --->>> –ù–û–í–ê–Ø –ö–ù–û–ü–ö–ê –û–¢–ú–ï–ù–´ –î–õ–Ø –•–û–°–¢–ê <<<---
        [InlineKeyboardButton("‚ùå –û—Ç–º–µ–Ω–∏—Ç—å –ë–∞—Ç—Ç–ª (–•–æ—Å—Ç)", callback_data=f"tosbattle_cancel_{game_id}")]
        # --->>> –ö–û–ù–ï–¶ –ù–û–í–û–ô –ö–ù–û–ü–ö–ò <<<---
    ]
    reply_markup_host = InlineKeyboardMarkup(keyboard_recruitment_host)
    try:
        await context.bot.edit_message_reply_markup(chat_id, message_id=game_id, reply_markup=reply_markup_host)
    except Exception as e_edit_host_kb: # –ò–∑–º–µ–Ω–∏–ª –∏–º—è –ø–µ—Ä–µ–º–µ–Ω–Ω–æ–π –¥–ª—è –æ—à–∏–±–∫–∏
        logger.error(f"–ù–µ —É–¥–∞–ª–æ—Å—å –æ–±–Ω–æ–≤–∏—Ç—å –∫–Ω–æ–ø–∫–∏ –¥–ª—è —Ö–æ—Å—Ç–∞ –≤ ToS Battle (game_id: {game_id}): {e_edit_host_kb}")


    # –°–æ—Ö—Ä–∞–Ω—è–µ–º –∏–≥—Ä—É –≤ –ë–î
    battle_data = {
        "chat_id": chat_id,
        "game_id": game_id, 
        "status": "recruiting",
        "host_id": host_user.id,
        "host_name": host_user.first_name or host_user.username or "–ê–Ω–æ–Ω–∏–º–Ω—ã–π –ó–∞–≤–æ–¥–∏–ª–∞",
        "created_at": now_utc, # now_utc –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å –æ–ø—Ä–µ–¥–µ–ª–µ–Ω
        "recruitment_ends_at": recruitment_ends_at,
        "participants": {}, 
        "questions": [], 
        "current_question_index": -1,
        "message_id_recruitment": game_id,
        "message_id_current_question": None,
        "message_id_last_extension_notice": None, # <<<--- –í–û–¢ –≠–¢–û –ü–û–õ–ï
        "prizes_awarded_info": {} 
    }
    await loop.run_in_executor(None, lambda: tos_battles_collection.insert_one(battle_data))
    logger.info(f"–ë–∞—Ç—Ç–ª '–ü—Ä–∞–≤–¥–∞ –∏–ª–∏ –í—ã—Å–µ—Ä' (game_id: {game_id}) –∑–∞–ø—É—â–µ–Ω —Ö–æ—Å—Ç–æ–º {host_user.id} –≤ —á–∞—Ç–µ {chat_id}. –ù–∞–±–æ—Ä –¥–æ {recruitment_ends_at}.")

    # –ü–ª–∞–Ω–∏—Ä—É–µ–º –æ–∫–æ–Ω—á–∞–Ω–∏–µ –Ω–∞–±–æ—Ä–∞, –µ—Å–ª–∏ —Ö–æ—Å—Ç –Ω–µ –Ω–∞—á–Ω–µ—Ç —Ä–∞–Ω—å—à–µ
    job_name = f"tosbattle_recruit_end_{chat_id}_{game_id}"
    context.job_queue.run_once(
        auto_end_recruitment_job,
        (recruitment_ends_at - now_utc).total_seconds(), # –í—Ä–µ–º—è –¥–æ –æ–∫–æ–Ω—á–∞–Ω–∏—è
        chat_id=chat_id,
        data={'game_id': game_id, 'host_id': host_user.id},
        name=job_name
    )
    logger.info(f"–ó–∞–ø–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω–æ –æ–∫–æ–Ω—á–∞–Ω–∏–µ –Ω–∞–±–æ—Ä–∞ –¥–ª—è –±–∞—Ç—Ç–ª–∞ {job_name}.")

async def tos_battle_button_callback(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    query = update.callback_query
    if not query or not query.data or not query.message:
        logger.warning("tos_battle_button_callback: –ø–æ–ª—É—á–µ–Ω –Ω–µ–ø–æ–ª–Ω—ã–π CallbackQuery.")
        if query: await query.answer("–û—à–∏–±–∫–∞: –Ω–µ–ø–æ–ª–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏ –∫–æ–ª–±—ç–∫–∞.", show_alert=True)
        return
            
    await query.answer() # –û—Ç–≤–µ—á–∞–µ–º –Ω–∞ callback query, —á—Ç–æ–±—ã —É–±—Ä–∞—Ç—å "—á–∞—Å–∏–∫–∏" —É –∫–Ω–æ–ø–∫–∏

    callback_data_full = query.data
    parts = callback_data_full.split("_") # e.g., "tosbattle_join_GAMEID" or "tosbattle_ans_GAMEID_QINDEX_CHOICE"

    if not (parts and parts[0] == "tosbattle" and len(parts) >= 2):
        logger.warning(f"tos_battle_button_callback: –ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π –ø—Ä–µ—Ñ–∏–∫—Å –∏–ª–∏ –¥–ª–∏–Ω–∞ callback_data: {callback_data_full}")
        try: await query.edit_message_text("–û—à–∏–±–∫–∞: –ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –¥–∞–Ω–Ω—ã—Ö –∫–Ω–æ–ø–∫–∏ –±–∞—Ç—Ç–ª–∞.")
        except Exception: pass 
        return

    action = parts[1]
    chat_id = query.message.chat.id
    user_who_clicked = query.from_user 
    loop = asyncio.get_running_loop()

    game_id_from_cb_str = None
    if action in ["extend", "start", "cancel"] and len(parts) >= 3: # tosbattle_ACTION_GAMEID
        game_id_from_cb_str = parts[2]
    elif action == "ans" and len(parts) >= 4: # tosbattle_ans_GAMEID_QINDEX_CHOICE
        game_id_from_cb_str = parts[2]
    elif action == "prize" and len(parts) >= 5: # tosbattle_prize_TYPE_GAMEID_WINNERID
        game_id_from_cb_str = parts[3] # GAMEID –∑–¥–µ—Å—å 3-–π —ç–ª–µ–º–µ–Ω—Ç
    elif action == "join" and len(parts) >= 3: # tosbattle_join_GAMEID (–Ω–µ–æ–±—è–∑–∞—Ç–µ–ª—å–Ω—ã–π, –Ω–æ –µ—Å–ª–∏ –µ—Å—Ç—å)
        game_id_from_cb_str = parts[2]
    
    game_id_int = None
    if game_id_from_cb_str:
        try:
            game_id_int = int(game_id_from_cb_str)
        except ValueError:
            logger.error(f"tos_battle_button_callback: –ù–µ —É–¥–∞–ª–æ—Å—å –ø—Ä–µ–æ–±—Ä–∞–∑–æ–≤–∞—Ç—å game_id '{game_id_from_cb_str}' –≤ int. CB: {callback_data_full}")
            try: await query.edit_message_text("–û—à–∏–±–∫–∞: –ù–µ–≤–µ—Ä–Ω—ã–π ID –∏–≥—Ä—ã –≤ –¥–∞–Ω–Ω—ã—Ö –∫–Ω–æ–ø–∫–∏.")
            except Exception: pass
            return

    battle_search_filter = {"chat_id": chat_id}
    if game_id_int:
        battle_search_filter["game_id"] = game_id_int
    
    expected_status = None
    if action in ["join", "extend", "start", "cancel"]:
        expected_status = "recruiting"
    elif action == "ans":
        expected_status = "playing"
    elif action == "prize": 
        expected_status = "finished" 

    if expected_status:
        battle_search_filter["status"] = expected_status
    
    if action == "join" and not game_id_int: # –î–ª—è –∫–Ω–æ–ø–∫–∏ "–Ø –≤ –¥–µ–ª–µ" –±–µ–∑ game_id
        battle_search_filter.pop("game_id", None) 
        battle_search_filter["status"] = "recruiting" # –ò—â–µ–º –ª—é–±—É—é –∏–≥—Ä—É –≤ –Ω–∞–±–æ—Ä–µ

    battle = await loop.run_in_executor(
        None, lambda: tos_battles_collection.find_one(battle_search_filter)
    )

    if not battle:
        # –ï—Å–ª–∏ –¥–ª—è join –±–µ–∑ game_id –Ω–µ –Ω–∞—à–ª–∏, –∞ game_id_from_cb –±—ã–ª None, –∑–Ω–∞—á–∏—Ç –∏–≥—Ä–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞
        if action == "join" and not game_id_from_cb_str: # –ü—Ä–æ–≤–µ—Ä—è–µ–º game_id_from_cb_str, —Ç.–∫. game_id_int –º–æ–≥ –Ω–µ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞—Ç—å—Å—è
             active_recruiting_battle_fallback = await loop.run_in_executor(
                None, lambda: tos_battles_collection.find_one({"chat_id": chat_id, "status": "recruiting"})
             )
             if active_recruiting_battle_fallback:
                 battle = active_recruiting_battle_fallback
                 game_id_int = battle["game_id"] 
             else:
                try: await query.edit_message_text("üóø –ù–∞–±–æ—Ä –Ω–∞ —ç—Ç–æ—Ç –ë–∞—Ç—Ç–ª —É–∂–µ –∑–∞–≤–µ—Ä—à–µ–Ω, –æ—Ç–º–µ–Ω–µ–Ω –∏–ª–∏ —è –ø–æ—Ç–µ—Ä—è–ª –µ–≥–æ —Å–ª–µ–¥—ã. –ü–æ–ø—Ä–æ–±—É–π –∑–∞–ø—É—Å—Ç–∏—Ç—å –Ω–æ–≤—ã–π.")
                except Exception: pass
                try: await context.bot.edit_message_reply_markup(chat_id, message_id=query.message.message_id, reply_markup=None)
                except Exception: pass
                return
        else: # –ï—Å–ª–∏ –∏–≥—Ä–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞ –ø–æ –¥—Ä—É–≥–∏–º –∫—Ä–∏—Ç–µ—Ä–∏—è–º
            logger.info(f"tos_battle_button_callback: –ê–∫—Ç—É–∞–ª—å–Ω–∞—è –∏–≥—Ä–∞ –¥–ª—è –¥–µ–π—Å—Ç–≤–∏—è '{action}' (game_id: {game_id_int}, –æ–∂–∏–¥–∞–µ–º—ã–π —Å—Ç–∞—Ç—É—Å: {expected_status}) –≤ —á–∞—Ç–µ {chat_id} –Ω–µ –Ω–∞–π–¥–µ–Ω–∞.")
            not_found_msg_text = "üóø –≠—Ç–∞ –∏–≥—Ä–∞ —É–∂–µ –∑–∞–≤–µ—Ä—à–∏–ª–∞—Å—å, –æ—Ç–º–µ–Ω–µ–Ω–∞ –∏–ª–∏ –ø—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞. –ó–∞–ø—É—Å—Ç–∏ –Ω–æ–≤—É—é, –µ—Å–ª–∏ –Ω–µ —Å—Å—ã—à—å!"
            if action == "join" and not game_id_int : not_found_msg_text = "üóø –ê–∫—Ç–∏–≤–Ω—ã—Ö –Ω–∞–±–æ—Ä–æ–≤ –Ω–∞ –ë–∞—Ç—Ç–ª –≤ —ç—Ç–æ–º —á–∞—Ç–µ —Å–µ–π—á–∞—Å –Ω–µ—Ç. –°—Ç–∞–Ω—å –ø–µ—Ä–≤—ã–º, –∑–∞–ø—É—Å—Ç–∏ —Å–≤–æ–π!"
            try: 
                await query.edit_message_text(not_found_msg_text)
                await context.bot.edit_message_reply_markup(chat_id, message_id=query.message.message_id, reply_markup=None)
            except Exception: pass
            return
    
    if not game_id_int and battle: # –≠—Ç–æ —É—Å–ª–æ–≤–∏–µ –≤–∞–∂–Ω–æ –¥–ª—è –∫–Ω–æ–ø–∫–∏ "join" –±–µ–∑ game_id
        game_id_int = battle["game_id"]
    
    battle_doc_id = battle["_id"]

    # --- –û–±—Ä–∞–±–æ—Ç–∫–∞ –¥–µ–π—Å—Ç–≤–∏–π –ù–ê–ë–û–†–ê ("recruiting" status) ---
    if battle.get("status") == "recruiting":
        if action == "join":
            if str(user_who_clicked.id) in battle.get("participants", {}):
                await context.bot.send_message(chat_id, f"üóø {user_who_clicked.mention_html()}, —Ç—ã —É–∂–µ –≤–ø–∏—Å–∞–ª—Å—è, —É–≥–æ–º–æ–Ω–∏—Å—å!", parse_mode='HTML', reply_to_message_id=game_id_int)
                return
            if len(battle.get("participants", {})) >= TOS_BATTLE_MAX_PARTICIPANTS:
                await context.bot.send_message(chat_id, f"üóø {user_who_clicked.mention_html()}, –º–µ—Å—Ç –Ω–µ—Ç, –≤—Å–µ –∑–∞–±–∏—Ç–æ –¥–æ–ª–±–æ–µ–±–∞–º–∏ ({TOS_BATTLE_MAX_PARTICIPANTS} –º–∞–∫—Å).", parse_mode='HTML', reply_to_message_id=game_id_int)
                return

            user_name_to_store = user_who_clicked.first_name or user_who_clicked.username or f"–ê–Ω–æ–Ω-{user_who_clicked.id}"
            new_participant_data = {"name": user_name_to_store, "score": 0, "answers": [None] * TOS_BATTLE_NUM_QUESTIONS}
            
            update_join = await loop.run_in_executor(
                None, lambda: tos_battles_collection.update_one(
                    {"_id": battle_doc_id}, {"$set": {f"participants.{user_who_clicked.id}": new_participant_data}}
                )
            )
            if update_join.modified_count > 0:
                logger.info(f"User {user_who_clicked.id} –ø—Ä–∏—Å–æ–µ–¥–∏–Ω–∏–ª—Å—è –∫ –±–∞—Ç—Ç–ª—É {game_id_int}")
                await context.bot.send_message(chat_id, f"‚úÖ {user_who_clicked.mention_html()} —Ç–µ–ø–µ—Ä—å –≤ –¥–µ–ª–µ! –ì–æ—Ç–æ–≤—å—Å—è –ø–æ–∑–æ—Ä–∏—Ç—å—Å—è –∏–ª–∏ –±–ª–∏—Å—Ç–∞—Ç—å —Ç—É–ø–æ—Å—Ç—å—é!", parse_mode='HTML', reply_to_message_id=game_id_int)
            else:
                await context.bot.send_message(chat_id, f"‚ö†Ô∏è {user_who_clicked.mention_html()}, –æ—à–∏–±–∫–∞ –∑–∞–ø–∏—Å–∏. –ü–æ–ø—Ä–æ–±—É–π –µ—â–µ.", parse_mode='HTML', reply_to_message_id=game_id_int)

        elif action == "extend" and user_who_clicked.id == battle.get("host_id"):
            # –°–Ω–∞—á–∞–ª–∞ –ø–æ–ª—É—á–∏–º –∞–∫—Ç—É–∞–ª—å–Ω–æ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ –±–∞—Ç—Ç–ª–∞, –≤–∫–ª—é—á–∞—è message_id_last_extension_notice
            battle_current_for_extend = await loop.run_in_executor(None, lambda: tos_battles_collection.find_one({"_id": battle_doc_id})) # battle_doc_id –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å –æ–ø—Ä–µ–¥–µ–ª–µ–Ω —Ä–∞–Ω–µ–µ
            if not battle_current_for_extend or battle_current_for_extend.get("status") != "recruiting":
                await context.bot.send_message(chat_id, "–ù–µ —É–¥–∞–ª–æ—Å—å –ø—Ä–æ–¥–ª–∏—Ç—å: –∏–≥—Ä–∞ —É–∂–µ –Ω–µ –≤ —Å—Ç–∞–¥–∏–∏ –Ω–∞–±–æ—Ä–∞ –∏–ª–∏ –æ—à–∏–±–∫–∞.", reply_to_message_id=game_id_int) # game_id_int –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å –æ–ø—Ä–µ–¥–µ–ª–µ–Ω —Ä–∞–Ω–µ–µ
                return
            
            current_recruitment_ends_at_from_db = battle_current_for_extend["recruitment_ends_at"]
            if current_recruitment_ends_at_from_db.tzinfo is None:
                current_recruitment_ends_at_from_db = UTC_TZ.localize(current_recruitment_ends_at_from_db) # UTC_TZ –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å –æ–ø—Ä–µ–¥–µ–ª–µ–Ω –≥–ª–æ–±–∞–ª—å–Ω–æ
            else:
                current_recruitment_ends_at_from_db = current_recruitment_ends_at_from_db.astimezone(UTC_TZ)

            new_recruitment_ends_at_utc_for_update = current_recruitment_ends_at_from_db + datetime.timedelta(seconds=TOS_BATTLE_RECRUITMENT_EXTENSION_SECONDS)
            
            update_result_extend_time = await loop.run_in_executor(
                None, lambda: tos_battles_collection.update_one(
                    {"_id": battle_doc_id, "status": "recruiting"},
                    {"$set": {"recruitment_ends_at": new_recruitment_ends_at_utc_for_update}}
                )
            )
            
            if update_result_extend_time.modified_count > 0:
                logger.info(f"–•–æ—Å—Ç {user_who_clicked.id} –ø—Ä–æ–¥–ª–∏–ª –Ω–∞–±–æ—Ä –¥–ª—è –±–∞—Ç—Ç–ª–∞ {game_id_int} –¥–æ {new_recruitment_ends_at_utc_for_update}")
                
                message_id_old_extension_notice = battle_current_for_extend.get("message_id_last_extension_notice")
                if message_id_old_extension_notice:
                    try:
                        await context.bot.delete_message(chat_id=chat_id, message_id=message_id_old_extension_notice)
                        logger.info(f"–£–¥–∞–ª–µ–Ω–æ —Å—Ç–∞—Ä–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –æ –ø—Ä–æ–¥–ª–µ–Ω–∏–∏ (ID: {message_id_old_extension_notice}) –¥–ª—è –±–∞—Ç—Ç–ª–∞ {game_id_int}")
                    except Exception as e_del_ext:
                        logger.warning(f"–ù–µ —É–¥–∞–ª–æ—Å—å —É–¥–∞–ª–∏—Ç—å —Å—Ç–∞—Ä–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –æ –ø—Ä–æ–¥–ª–µ–Ω–∏–∏ {message_id_old_extension_notice}: {e_del_ext}")

                job_name_ext_cb_fix = f"tosbattle_recruit_end_{chat_id}_{game_id_int}"
                for old_job_fix in context.job_queue.get_jobs_by_name(job_name_ext_cb_fix): 
                    old_job_fix.schedule_removal()
                
                time_now_utc_ext_cb_fix = datetime.datetime.now(datetime.timezone.utc)
                time_until_new_end_seconds_cb_fix = (new_recruitment_ends_at_utc_for_update - time_now_utc_ext_cb_fix).total_seconds()

                if time_until_new_end_seconds_cb_fix > 0:
                    context.job_queue.run_once(
                        auto_end_recruitment_job, time_until_new_end_seconds_cb_fix, 
                        chat_id=chat_id, data={'game_id': game_id_int, 'host_id': battle["host_id"]}, name=job_name_ext_cb_fix # battle["host_id"] –∏–∑ –ø–µ—Ä–≤–æ–Ω–∞—á–∞–ª—å–Ω–æ –∑–∞–≥—Ä—É–∂–µ–Ω–Ω–æ–≥–æ battle
                    )
                    logger.info(f"Job –æ–∫–æ–Ω—á–∞–Ω–∏—è –Ω–∞–±–æ—Ä–∞ –¥–ª—è {game_id_int} –ø–µ—Ä–µ–ø–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω –Ω–∞ {new_recruitment_ends_at_utc_for_update}")
                    
                    new_recruitment_ends_at_msk_display = new_recruitment_ends_at_utc_for_update.astimezone(MOSCOW_TZ) # MOSCOW_TZ –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å –æ–ø—Ä–µ–¥–µ–ª–µ–Ω –≥–ª–æ–±–∞–ª—å–Ω–æ
                    remaining_minutes_display = int(time_until_new_end_seconds_cb_fix // 60)
                    remaining_seconds_part_display = int(time_until_new_end_seconds_cb_fix % 60)
                    time_left_str_display = f"{remaining_minutes_display} –º–∏–Ω {remaining_seconds_part_display} —Å–µ–∫"
                    
                    new_extension_notice_message = await context.bot.send_message(
                        chat_id, 
                        f"‚è≥ –•–æ—Å—Ç {user_who_clicked.mention_html()} –ø—Ä–æ–¥–ª–∏–ª –Ω–∞–±–æ—Ä –Ω–∞ <b>{TOS_BATTLE_RECRUITMENT_EXTENSION_SECONDS} —Å–µ–∫—É–Ω–¥</b>!\n"
                        f"–ù–æ–≤–æ–µ –≤—Ä–µ–º—è –æ–∫–æ–Ω—á–∞–Ω–∏—è –Ω–∞–±–æ—Ä–∞: <b>{new_recruitment_ends_at_msk_display.strftime('%H:%M:%S MSK')}</b> (–æ—Å—Ç–∞–ª–æ—Å—å ~{time_left_str_display}).",
                        parse_mode='HTML', reply_to_message_id=game_id_int 
                    )
                    await loop.run_in_executor(
                        None, lambda: tos_battles_collection.update_one(
                            {"_id": battle_doc_id},
                            {"$set": {"message_id_last_extension_notice": new_extension_notice_message.message_id}}
                        )
                    )
                else: 
                    await context.bot.send_message(chat_id, "–•–æ—Å—Ç –ø—ã—Ç–∞–ª—Å—è –ø—Ä–æ–¥–ª–∏—Ç—å, –Ω–æ –≤—Ä–µ–º—è —É–∂–µ –∏—Å—Ç–µ–∫–ª–æ –∏–ª–∏ —á—Ç–æ-—Ç–æ –ø–æ—à–ª–æ –Ω–µ —Ç–∞–∫. –ù–∞–±–æ—Ä –∑–∞–≤–µ—Ä—à–∞–µ—Ç—Å—è...", reply_to_message_id=game_id_int)
                    job_data_manual = {'game_id': game_id_int, 'host_id': battle["host_id"], 'chat_id': chat_id} 
                    fake_job_manual = type('FakeJob', (), {'data': job_data_manual, 'chat_id': chat_id, 'name': f'manual_trigger_rec_end_{game_id_int}_extend_fail'})()
                    await auto_end_recruitment_job(context=ContextTypes.DEFAULT_TYPE(application=context.application, chat_id=chat_id, job=fake_job_manual))
            else:
                await context.bot.send_message(chat_id, "–ù–µ —É–¥–∞–ª–æ—Å—å –ø—Ä–æ–¥–ª–∏—Ç—å –Ω–∞–±–æ—Ä (–≤–æ–∑–º–æ–∂–Ω–æ, –∏–≥—Ä–∞ —É–∂–µ –Ω–µ –≤ —Å—Ç–∞–¥–∏–∏ –Ω–∞–±–æ—Ä–∞ –∏–ª–∏ –ø—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞).", reply_to_message_id=game_id_int)
        
        elif action == "start" and user_who_clicked.id == battle.get("host_id"):
            if len(battle.get("participants", {})) < TOS_BATTLE_MIN_PARTICIPANTS:
                await context.bot.send_message(chat_id, f"üö´ –ù—É–∂–Ω–æ —Ö–æ—Ç—è –±—ã {TOS_BATTLE_MIN_PARTICIPANTS} —É—á–∞—Å—Ç–Ω–∏–∫–∞, —É –Ω–∞—Å {len(battle.get('participants', {}))}.", parse_mode='HTML', reply_to_message_id=game_id_int)
                return
            
            logger.info(f"–•–æ—Å—Ç {user_who_clicked.id} –∑–∞–ø—É—Å–∫–∞–µ—Ç –±–∞—Ç—Ç–ª {game_id_int} –¥–æ—Å—Ä–æ—á–Ω–æ.")
            job_name_start_cb = f"tosbattle_recruit_end_{chat_id}_{game_id_int}"
            for old_job_s_cb in context.job_queue.get_jobs_by_name(job_name_start_cb): old_job_s_cb.schedule_removal()
            await _actually_start_the_battle_game(context, battle_doc_id)

        elif action == "cancel" and user_who_clicked.id == battle.get("host_id"):
            logger.info(f"–•–æ—Å—Ç {user_who_clicked.id} –Ω–∞–∂–∞–ª –∫–Ω–æ–ø–∫—É –æ—Ç–º–µ–Ω—ã –±–∞—Ç—Ç–ª–∞ {game_id_int} –≤ —á–∞—Ç–µ {chat_id}.")
            update_cancel_result_cb = await loop.run_in_executor(
                None, lambda: tos_battles_collection.find_one_and_update(
                    {"_id": battle_doc_id, "status": "recruiting"},
                    {"$set": {"status": "cancelled_by_host", "finished_at": datetime.datetime.now(datetime.timezone.utc)}},
                    return_document=pymongo.ReturnDocument.AFTER
                )
            )
            if not update_cancel_result_cb or update_cancel_result_cb.get("status") != "cancelled_by_host":
                logger.warning(f"–ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–º–µ–Ω–∏—Ç—å –±–∞—Ç—Ç–ª {game_id_int}: –æ–Ω —É–∂–µ –Ω–µ –≤ —Å—Ç–∞—Ç—É—Å–µ 'recruiting' –∏–ª–∏ –æ—à–∏–±–∫–∞ –ë–î.")
                await query.answer("–ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–º–µ–Ω–∏—Ç—å –∏–≥—Ä—É.", show_alert=True)
                try: await query.edit_message_reply_markup(reply_markup=None)
                except Exception: pass
                return

            try: await context.bot.unpin_chat_message(chat_id=chat_id, message_id=game_id_int)
            except Exception: pass 
            try:
                await query.edit_message_text(
                    text=f"üö´ –•–æ—Å—Ç {user_who_clicked.mention_html()} <b>–û–¢–ú–ï–ù–ò–õ –ë–∞—Ç—Ç–ª (ID: {game_id_int})</b>!\nüóø –†–∞—Å—Ö–æ–¥–∏—Ç–µ—Å—å.",
                    parse_mode='HTML', reply_markup=None
                )
            except Exception as e_edit_cancel_cb:
                logger.warning(f"–ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç—Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ –ø—Ä–∏ –æ—Ç–º–µ–Ω–µ –±–∞—Ç—Ç–ª–∞ {game_id_int}: {e_edit_cancel_cb}")
                await context.bot.send_message(chat_id, f"üö´ –•–æ—Å—Ç {user_who_clicked.mention_html()} <b>–û–¢–ú–ï–ù–ò–õ –ë–∞—Ç—Ç–ª (ID: {game_id_int})</b>!", parse_mode='HTML', reply_to_message_id=game_id_int)

            job_name_to_cancel_cb_j = f"tosbattle_recruit_end_{chat_id}_{game_id_int}"
            for old_job_cb_cancel_j in context.job_queue.get_jobs_by_name(job_name_to_cancel_cb_j): old_job_cb_cancel_j.schedule_removal()
            
            await loop.run_in_executor(
                None, lambda: chat_activity_collection.update_one(
                    {"chat_id": chat_id}, {"$set": {"last_tos_battle_end_time": datetime.datetime.now(datetime.timezone.utc)}}, upsert=True
                )
            )
            logger.info(f"–ë–∞—Ç—Ç–ª {game_id_int} –æ—Ç–º–µ–Ω–µ–Ω —Ö–æ—Å—Ç–æ–º. –ö—É–ª–¥–∞—É–Ω –æ–±–Ω–æ–≤–ª–µ–Ω.")
        
        else: 
            if user_who_clicked.id != battle.get("host_id") and action in ["extend", "start", "cancel"]:
                 await query.answer("–¢–æ–ª—å–∫–æ —Ö–æ—Å—Ç –∏–≥—Ä—ã –º–æ–∂–µ—Ç —ç—Ç–æ —Å–¥–µ–ª–∞—Ç—å!", show_alert=True)
            elif action == "ans":
                 await query.answer("–ò–≥—Ä–∞ –µ—â–µ –Ω–µ –Ω–∞—á–∞–ª–∞—Å—å!", show_alert=True)

    # --- –û–±—Ä–∞–±–æ—Ç–∫–∞ –û–¢–í–ï–¢–û–í –ù–ê –í–û–ü–†–û–°–´ ("playing" status) ---
    elif battle.get("status") == "playing" and action == "ans":
        if len(parts) < 5: # tosbattle_ans_GAMEID_QINDEX_CHOICE
            logger.error(f"–ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π CB –¥–ª—è –æ—Ç–≤–µ—Ç–∞ –Ω–∞ –≤–æ–ø—Ä–æ—Å (playing): {query.data}")
            # await query.answer("–û—à–∏–±–∫–∞ —Ñ–æ—Ä–º–∞—Ç–∞ –∫–Ω–æ–ø–∫–∏ –æ—Ç–≤–µ—Ç–∞.", show_alert=True) # –£–±–∏—Ä–∞–µ–º query.answer
            return
        
        try:
            # game_id_from_ans_cb (game_id_int) –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å –æ–ø—Ä–µ–¥–µ–ª–µ–Ω —Ä–∞–Ω–µ–µ
            question_index_cb_ans = int(parts[3])
            answer_choice_cb_str_ans = parts[4] # "true" –∏–ª–∏ "false"
        except (ValueError, IndexError) as e_parse_ans_cb_p:
            logger.error(f"–û—à–∏–±–∫–∞ –ø–∞—Ä—Å–∏–Ω–≥–∞ CB –æ—Ç–≤–µ—Ç–∞ –Ω–∞ –≤–æ–ø—Ä–æ—Å (playing): {query.data}, {e_parse_ans_cb_p}")
            # await query.answer("–û—à–∏–±–∫–∞ –¥–∞–Ω–Ω—ã—Ö –∫–Ω–æ–ø–∫–∏.", show_alert=True) # –£–±–∏—Ä–∞–µ–º query.answer
            return

        user_answer_as_bool_ans = (answer_choice_cb_str_ans == "true")

        if str(user_who_clicked.id) not in battle.get("participants", {}):
            # await query.answer("–¢—ã –Ω–µ —É—á–∞—Å—Ç–≤—É–µ—à—å –≤ —ç—Ç–æ–º –±–∞—Ç—Ç–ª–µ, —Å–∞–º–æ–∑–≤–∞–Ω–µ—Ü —Ö—É–µ–≤!", show_alert=True) # –£–±–∏—Ä–∞–µ–º query.answer
            # –ú–æ–∂–Ω–æ –æ—Ç–ø—Ä–∞–≤–∏—Ç—å –æ–±—ã—á–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ, –µ—Å–ª–∏ –æ—á–µ–Ω—å —Ö–æ—á–µ—Ç—Å—è —É–≤–µ–¥–æ–º–∏—Ç—å
            await context.bot.send_message(chat_id, f"@{user_who_clicked.username or user_who_clicked.first_name}, —Ç—ã –Ω–µ –≤ –∏–≥—Ä–µ!", reply_to_message_id=query.message.message_id)
            return

        current_q_idx_from_db_ans = battle.get("current_question_index", -1)
        if current_q_idx_from_db_ans != question_index_cb_ans:
            # await query.answer("–≠—Ç–æ —É–∂–µ –Ω–µ —Ç–µ–∫—É—â–∏–π –≤–æ–ø—Ä–æ—Å –∏–ª–∏ —Ç—ã –ø—Ä–æ–µ–±–∞–ª –≤—Å–µ –ø–æ–ª–∏–º–µ—Ä—ã!", show_alert=True) # –£–±–∏—Ä–∞–µ–º
            return # –ü—Ä–æ—Å—Ç–æ –≤—ã—Ö–æ–¥–∏–º, –Ω–µ –º–µ–Ω—è—è –∫–Ω–æ–ø–∫–∏, –µ—Å–ª–∏ –≤–æ–ø—Ä–æ—Å –Ω–µ –∞–∫—Ç—É–∞–ª–µ–Ω
        
        questions_list_db_ans = battle.get("questions", [])
        if question_index_cb_ans >= len(questions_list_db_ans) or \
           questions_list_db_ans[question_index_cb_ans].get("revealed_to_users"):
            # await query.answer("–≠—Ç–æ—Ç –≤–æ–ø—Ä–æ—Å —É–∂–µ –±—ã–ª —Ä–∞—Å–∫—Ä—ã—Ç –∏–ª–∏ —á—Ç–æ-—Ç–æ –ø–æ—à–ª–æ –Ω–µ —Ç–∞–∫ —Å –µ–≥–æ –Ω–æ–º–µ—Ä–æ–º.", show_alert=True) # –£–±–∏—Ä–∞–µ–º
            # –ï—Å–ª–∏ –≤–æ–ø—Ä–æ—Å —Ä–∞—Å–∫—Ä—ã—Ç, –º–æ–∂–Ω–æ –ø–æ–ø—Ä–æ–±–æ–≤–∞—Ç—å —É–±—Ä–∞—Ç—å –∫–Ω–æ–ø–∫–∏
            try: await query.edit_message_reply_markup(reply_markup=None)
            except Exception: pass
            return

        # –ü–æ–ª—É—á–∞–µ–º –∞–∫—Ç—É–∞–ª—å–Ω—ã–µ –æ—Ç–≤–µ—Ç—ã –Ω–∞ —ç—Ç–æ—Ç –≤–æ–ø—Ä–æ—Å –∏–∑ –ë–î, —á—Ç–æ–±—ã –ø—Ä–æ–≤–µ—Ä–∏—Ç—å, –Ω–µ –≥–æ–ª–æ—Å–æ–≤–∞–ª –ª–∏ —é–∑–µ—Ä —É–∂–µ
        battle_reloaded_for_ans_check_cb = await loop.run_in_executor(None, lambda: tos_battles_collection.find_one({"_id": battle_doc_id}))
        if not battle_reloaded_for_ans_check_cb:
            # await query.answer("–û—à–∏–±–∫–∞: –Ω–µ –º–æ–≥—É –ø—Ä–æ–≤–µ—Ä–∏—Ç—å —Ç–≤–æ–π –ø—Ä–µ–¥—ã–¥—É—â–∏–π –æ—Ç–≤–µ—Ç.", show_alert=True) # –£–±–∏—Ä–∞–µ–º
            return
            
        if "questions" not in battle_reloaded_for_ans_check_cb or \
           question_index_cb_ans >= len(battle_reloaded_for_ans_check_cb["questions"]):
            logger.error(f"–°—Ç—Ä—É–∫—Ç—É—Ä–∞ –≤–æ–ø—Ä–æ—Å–æ–≤ –Ω–∞—Ä—É—à–µ–Ω–∞ –∏–ª–∏ –Ω–µ–≤–µ—Ä–Ω—ã–π –∏–Ω–¥–µ–∫—Å {question_index_cb_ans} –¥–ª—è –±–∞—Ç—Ç–ª–∞ {game_id_int}")
            # await query.answer("–í–Ω—É—Ç—Ä–µ–Ω–Ω—è—è –æ—à–∏–±–∫–∞ –∏–≥—Ä—ã: —Å—Ç—Ä—É–∫—Ç—É—Ä–∞ –≤–æ–ø—Ä–æ—Å–æ–≤ –Ω–∞—Ä—É—à–µ–Ω–∞.", show_alert=True) # –£–±–∏—Ä–∞–µ–º
            return
            
        user_answers_this_q_db_ans_updated_cb = battle_reloaded_for_ans_check_cb["questions"][question_index_cb_ans].get("user_answers_to_this_q", {})
        
        if str(user_who_clicked.id) in user_answers_this_q_db_ans_updated_cb:
            # await query.answer(f"–¢—ã —É–∂–µ –æ—Ç–≤–µ—á–∞–ª –Ω–∞ —ç—Ç–æ—Ç —Ä–∞—É–Ω–¥! –¢–≤–æ–π –≤—ã–±–æ—Ä –±—ã–ª: ...", show_alert=True) # –£–±–∏—Ä–∞–µ–º
            # –í–º–µ—Å—Ç–æ —ç—Ç–æ–≥–æ –º–æ–∂–Ω–æ –Ω–∏—á–µ–≥–æ –Ω–µ –¥–µ–ª–∞—Ç—å –∏–ª–∏ –æ—Ç–ø—Ä–∞–≤–∏—Ç—å –æ–±—ã—á–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –≤ —á–∞—Ç
            # await context.bot.send_message(chat_id, f"@{user_who_clicked.username or user_who_clicked.first_name}, —Ç—ã —É–∂–µ –≥–æ–ª–æ—Å–æ–≤–∞–ª –Ω–∞ —ç—Ç–æ–º —Ä–∞—É–Ω–¥–µ!", reply_to_message_id=query.message.message_id)
            return # –í—ã—Ö–æ–¥–∏–º, –µ—Å–ª–∏ —É–∂–µ –≥–æ–ª–æ—Å–æ–≤–∞–ª

        user_name_ans_rec_db_cb = user_who_clicked.first_name or user_who_clicked.username or f"–ê–Ω–æ–Ω-{user_who_clicked.id}"
        answer_record_to_db_ans_cb = {"name": user_name_ans_rec_db_cb, "answer_bool": user_answer_as_bool_ans, "answered_at": datetime.datetime.now(datetime.timezone.utc)}
        
        update_ans_q_db_cb = await loop.run_in_executor(
            None, lambda: tos_battles_collection.update_one(
                {"_id": battle_doc_id, f"questions.{question_index_cb_ans}.revealed_to_users": False}, 
                {"$set": {f"questions.{question_index_cb_ans}.user_answers_to_this_q.{user_who_clicked.id}": answer_record_to_db_ans_cb}}
            )
        )

        if update_ans_q_db_cb.modified_count > 0:
            logger.info(f"User {user_who_clicked.id} –æ—Ç–≤–µ—Ç–∏–ª '{user_answer_as_bool_ans}' –Ω–∞ Q{question_index_cb_ans} –±–∞—Ç—Ç–ª–∞ {game_id_int}")
            
            # --->>> –û–ë–ù–û–í–õ–ï–ù–ò–ï –ö–ù–û–ü–û–ö –°–û –°–ß–ï–¢–ß–ò–ö–ê–ú–ò <<<---
            # –ü–æ–ª—É—á–∞–µ–º —Å–∞–º—ã–µ —Å–≤–µ–∂–∏–µ –¥–∞–Ω–Ω—ã–µ –æ–± –æ—Ç–≤–µ—Ç–∞—Ö –Ω–∞ —ç—Ç–æ—Ç –≤–æ–ø—Ä–æ—Å –ü–û–°–õ–ï –Ω–∞—à–µ–≥–æ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è
            battle_after_vote = await loop.run_in_executor(None, lambda: tos_battles_collection.find_one({"_id": battle_doc_id}))
            if not battle_after_vote or "questions" not in battle_after_vote or \
               question_index_cb_ans >= len(battle_after_vote["questions"]):
                logger.error(f"–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –æ–±–Ω–æ–≤–ª–µ–Ω–Ω—ã–π –±–∞—Ç—Ç–ª –¥–ª—è –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –∫–Ω–æ–ø–æ–∫ Q{question_index_cb_ans}")
                return # –í—ã—Ö–æ–¥–∏–º, —á—Ç–æ–±—ã –Ω–µ —Å–ª–æ–º–∞—Ç—å –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É

            current_q_answers = battle_after_vote["questions"][question_index_cb_ans].get("user_answers_to_this_q", {})
            
            votes_for_true = 0
            votes_for_false = 0
            for _, ans_data in current_q_answers.items():
                if ans_data["answer_bool"] is True:
                    votes_for_true += 1
                elif ans_data["answer_bool"] is False:
                    votes_for_false += 1
            
            # –§–æ—Ä–º–∏—Ä—É–µ–º –Ω–æ–≤—ã–π —Ç–µ–∫—Å—Ç –¥–ª—è –∫–Ω–æ–ø–æ–∫
            button_text_true = f"üëç –≠—Ç–æ –ü—Ä–∞–≤–¥–∞! ({votes_for_true})"
            button_text_false = f"üëé –≠—Ç–æ –í—ã—Å–µ—Ä! ({votes_for_false})"

            # –°–æ–∑–¥–∞–µ–º –Ω–æ–≤—É—é –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É
            # GAMEID –∑–¥–µ—Å—å - —ç—Ç–æ message_id_recruitment (–ø–µ—Ä–µ–º–µ–Ω–Ω–∞—è game_id_int)
            # QINDEX - —ç—Ç–æ question_index_cb_ans
            new_keyboard_with_counts = [
                [
                    InlineKeyboardButton(button_text_true, callback_data=f"tosbattle_ans_{game_id_int}_{question_index_cb_ans}_true"),
                    InlineKeyboardButton(button_text_false, callback_data=f"tosbattle_ans_{game_id_int}_{question_index_cb_ans}_false")
                ]
            ]
            new_reply_markup = InlineKeyboardMarkup(new_keyboard_with_counts)

            try:
                # –†–µ–¥–∞–∫—Ç–∏—Ä—É–µ–º –∏—Å—Ö–æ–¥–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –≤–æ–ø—Ä–æ—Å–æ–º (query.message)
                await query.edit_message_reply_markup(reply_markup=new_reply_markup)
                logger.info(f"–ö–Ω–æ–ø–∫–∏ –¥–ª—è Q{question_index_cb_ans} –±–∞—Ç—Ç–ª–∞ {game_id_int} –æ–±–Ω–æ–≤–ª–µ–Ω—ã —Å—á–µ—Ç—á–∏–∫–∞–º–∏: T={votes_for_true}, F={votes_for_false}")
            except telegram.error.BadRequest as e_edit_kb_counts:
                 if "message is not modified" not in str(e_edit_kb_counts).lower(): # –ò–≥–Ω–æ—Ä–∏—Ä—É–µ–º, –µ—Å–ª–∏ –∫–Ω–æ–ø–∫–∏ —É–∂–µ —Ç–∞–∫–∏–µ
                     logger.warning(f"–ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç—Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å –∫–Ω–æ–ø–∫–∏ —Å–æ —Å—á–µ—Ç—á–∏–∫–∞–º–∏: {e_edit_kb_counts}")
            except Exception as e_unhandled_edit_kb_counts:
                logger.error(f"–ù–µ–ø—Ä–µ–¥–≤–∏–¥–µ–Ω–Ω–∞—è –æ—à–∏–±–∫–∞ –ø—Ä–∏ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–∏ –∫–Ω–æ–ø–æ–∫ —Å–æ —Å—á–µ—Ç—á–∏–∫–∞–º–∏: {e_unhandled_edit_kb_counts}")
            # --->>> –ö–û–ù–ï–¶ –û–ë–ù–û–í–õ–ï–ù–ò–Ø –ö–ù–û–ü–û–ö <<<---

        else: # modified_count == 0
            logger.warning(f"–ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–ø–∏—Å–∞—Ç—å –æ—Ç–≤–µ—Ç –¥–ª—è user {user_who_clicked.id} –Ω–∞ Q{question_index_cb_ans} –±–∞—Ç—Ç–ª–∞ {game_id_int}. Modified_count: {update_ans_q_db_cb.modified_count}")

    # --- –û–±—Ä–∞–±–æ—Ç–∫–∞ –í–´–ë–û–†–ê –ü–†–ò–ó–ê ("finished" status) ---
    elif battle.get("status") == "finished" and action == "prize":
        if len(parts) < 5: 
            logger.error(f"–ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π CB –¥–ª—è –≤—ã–±–æ—Ä–∞ –ø—Ä–∏–∑–∞: {query.data}")
            await query.answer("–û—à–∏–±–∫–∞ —Ñ–æ—Ä–º–∞—Ç–∞ –∫–Ω–æ–ø–∫–∏ –ø—Ä–∏–∑–∞.", show_alert=True)
            return
        
        prize_type_choice_cb = parts[2] 
        try:
            winner_id_from_prize_cb_val = int(parts[4])
        except (ValueError, IndexError) as e_parse_prize_cb_val:
            logger.error(f"–û—à–∏–±–∫–∞ –ø–∞—Ä—Å–∏–Ω–≥–∞ CB –ø—Ä–∏–∑–∞: {query.data}, {e_parse_prize_cb_val}")
            await query.answer("–û—à–∏–±–∫–∞ –¥–∞–Ω–Ω—ã—Ö –∫–Ω–æ–ø–∫–∏ –ø—Ä–∏–∑–∞.", show_alert=True)
            return

        if user_who_clicked.id != winner_id_from_prize_cb_val:
            await query.answer("–≠—Ç–æ –Ω–µ —Ç–≤–æ–π –ø—Ä–∏–∑, –Ω–µ –ª–µ–∑—å!", show_alert=True)
            return
        
        prizes_awarded_info_db = battle.get("prizes_awarded_info", {})
        if str(winner_id_from_prize_cb_val) in prizes_awarded_info_db and \
           prizes_awarded_info_db[str(winner_id_from_prize_cb_val)].get("type_chosen"): # –ï—Å–ª–∏ –ø—Ä–∏–∑ —É–∂–µ –≤—ã–±—Ä–∞–Ω
            await query.answer("–ü—Ä–∏–∑ —É–∂–µ –±—ã–ª –≤—ã–±—Ä–∞–Ω –∏ –≤—ã–¥–∞–Ω –∑–∞ —ç—Ç–æ—Ç –±–∞—Ç—Ç–ª.", show_alert=True)
            try: await query.edit_message_reply_markup(reply_markup=None)
            except Exception: pass
            return

        try:
            await query.edit_message_reply_markup(reply_markup=None) 
        except Exception as e_edit_prize_kb_cb_val:
            logger.warning(f"–ù–µ —É–¥–∞–ª–æ—Å—å —É–±—Ä–∞—Ç—å –∫–Ω–æ–ø–∫–∏ –≤—ã–±–æ—Ä–∞ –ø—Ä–∏–∑–∞: {e_edit_prize_kb_cb_val}")

        user_profile_prize_cb_val = await get_user_profile_data(user_who_clicked)
        winner_display_name_prize_cb = user_profile_prize_cb_val.get("display_name", user_who_clicked.first_name or "–ü–æ–±–µ–¥–∏—Ç–µ–ª—å")
        prize_applied_msg_cb = ""
        awarded_penis = 0
        awarded_tits = 0.0

        if prize_type_choice_cb == "penis":
            penis_stat_prize_cb_val = await loop.run_in_executor(None, lambda: penis_stats_collection.find_one({"user_id": winner_id_from_prize_cb_val, "chat_id": chat_id}))
            current_penis_size_cb_val = penis_stat_prize_cb_val.get("penis_size", 0) if penis_stat_prize_cb_val else 0
            # –ü—Ä–∏–∑ –¥–ª—è –æ–¥–Ω–æ–≥–æ –ø–æ–±–µ–¥–∏—Ç–µ–ª—è (TOS_BATTLE_PENIS_REWARD_CM)
            new_penis_size_cb_val = current_penis_size_cb_val + TOS_BATTLE_PENIS_REWARD_CM 
            awarded_penis = TOS_BATTLE_PENIS_REWARD_CM
            await loop.run_in_executor(None, lambda: penis_stats_collection.update_one(
                {"user_id": winner_id_from_prize_cb_val, "chat_id": chat_id},
                {"$set": {"penis_size": new_penis_size_cb_val, "user_display_name": winner_display_name_prize_cb}}, upsert=True
            ))
            prize_applied_msg_cb = f"üçÜ –ü–∏—Å—é–Ω <b>{winner_display_name_prize_cb}</b> –í–ù–ï–ó–ê–ü–ù–û –≤—ã—Ä–æ—Å –Ω–∞ {TOS_BATTLE_PENIS_REWARD_CM}—Å–º –∏ —Ç–µ–ø–µ—Ä—å —Å–æ—Å—Ç–∞–≤–ª—è–µ—Ç <b>{new_penis_size_cb_val}—Å–º</b>!"
            logger.info(f"–ü—Ä–∏–∑ (–ø–∏—Å—é–Ω +{TOS_BATTLE_PENIS_REWARD_CM}) –≤—ã–¥–∞–Ω {winner_display_name_prize_cb} –∑–∞ –±–∞—Ç—Ç–ª {game_id_int}.")
            
        elif prize_type_choice_cb == "tits":
            tits_stat_prize_cb_val = await loop.run_in_executor(None, lambda: tits_stats_collection.find_one({"user_id": winner_id_from_prize_cb_val, "chat_id": chat_id}))
            current_tits_size_cb_val = float(tits_stat_prize_cb_val.get("tits_size", 0.0)) if tits_stat_prize_cb_val else 0.0
            # –ü—Ä–∏–∑ –¥–ª—è –æ–¥–Ω–æ–≥–æ –ø–æ–±–µ–¥–∏—Ç–µ–ª—è (TOS_BATTLE_TITS_REWARD_SIZE)
            new_tits_size_cb_val = round(current_tits_size_cb_val + TOS_BATTLE_TITS_REWARD_SIZE, 1)
            awarded_tits = TOS_BATTLE_TITS_REWARD_SIZE
            await loop.run_in_executor(None, lambda: tits_stats_collection.update_one(
                {"user_id": winner_id_from_prize_cb_val, "chat_id": chat_id},
                {"$set": {"tits_size": new_tits_size_cb_val, "user_display_name": winner_display_name_prize_cb}}, upsert=True
            ))
            prize_applied_msg_cb = f"üçà –°–∏—Å—å–∫–∏ <b>{winner_display_name_prize_cb}</b> –ø–æ–¥—Ä–æ—Å–ª–∏ –Ω–∞ {TOS_BATTLE_TITS_REWARD_SIZE:.1f} —Ä–∞–∑–º–µ—Ä–∞ –∏ —Å—Ç–∞–ª–∏ <b>{new_tits_size_cb_val:.1f}-–≥–æ</b>!"
            logger.info(f"–ü—Ä–∏–∑ (—Å–∏—Å—å–∫–∏ +{TOS_BATTLE_TITS_REWARD_SIZE:.1f}) –≤—ã–¥–∞–Ω {winner_display_name_prize_cb} –∑–∞ –±–∞—Ç—Ç–ª {game_id_int}.")
        
        if prize_applied_msg_cb:
            await context.bot.send_message(chat_id, text=f"üéâ <b>–ù–∞–≥—Ä–∞–¥–∞ –Ω–∞—à–ª–∞ –≥–µ—Ä–æ—è!</b> üéâ\n{prize_applied_msg_cb}", parse_mode='HTML')
            # –ü–æ–º–µ—á–∞–µ–º, —á—Ç–æ –ø—Ä–∏–∑ –≤—ã–¥–∞–Ω –∏ –∫–∞–∫–æ–π –∏–º–µ–Ω–Ω–æ
            await loop.run_in_executor(None, lambda: tos_battles_collection.update_one(
                {"_id": battle_doc_id}, 
                {"$set": {f"prizes_awarded_info.{winner_id_from_prize_cb_val}": {"type_chosen": prize_type_choice_cb, "penis_added": awarded_penis, "tits_added": awarded_tits}}}
            ))
        else:
            await query.answer("–ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π —Ç–∏–ø –ø—Ä–∏–∑–∞.", show_alert=True)
            
    else: 
        logger.warning(f"–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ–µ –¥–µ–π—Å—Ç–≤–∏–µ '{action}' –∏–ª–∏ –Ω–µ—Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É—é—â–∏–π —Å—Ç–∞—Ç—É—Å '{battle.get('status')}' –≤ tos_battle_button_callback. CB: {query.data}")

async def _actually_start_the_battle_game(context: ContextTypes.DEFAULT_TYPE, battle_doc_id: ObjectId) -> None:
    loop = asyncio.get_running_loop()
    battle = await loop.run_in_executor(None, lambda: tos_battles_collection.find_one({"_id": battle_doc_id}))
    
    if not battle:
        logger.error(f"_actually_start_the_battle_game: –ë–∞—Ç—Ç–ª —Å _id {battle_doc_id} –Ω–µ –Ω–∞–π–¥–µ–Ω!")
        return
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –Ω–µ –ø—ã—Ç–∞–µ–º—Å—è –ª–∏ –º—ã –Ω–∞—á–∞—Ç—å —É–∂–µ –∏–¥—É—â—É—é –∏–ª–∏ –∑–∞–≤–µ—Ä—à–µ–Ω–Ω—É—é –∏–≥—Ä—É
    if battle.get("status") != "recruiting":
        logger.warning(f"_actually_start_the_battle_game: –ü–æ–ø—ã—Ç–∫–∞ –Ω–∞—á–∞—Ç—å –±–∞—Ç—Ç–ª (game_id: {battle.get('game_id')}), –∫–æ—Ç–æ—Ä—ã–π —É–∂–µ –Ω–µ –≤ —Å—Ç–∞—Ç—É—Å–µ 'recruiting'. –¢–µ–∫—É—â–∏–π —Å—Ç–∞—Ç—É—Å: {battle.get('status')}")
        return

    chat_id = battle["chat_id"]
    game_id = battle["game_id"] # message_id_recruitment
    participants_count = len(battle.get("participants", {}))
    host_name = battle.get("host_name", "–ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π —Ö–æ—Å—Ç")

    logger.info(f"–ù–∞—á–∞–ª–æ –ø–æ–¥–≥–æ—Ç–æ–≤–∫–∏ –±–∞—Ç—Ç–ª–∞ {game_id} –≤ —á–∞—Ç–µ {chat_id}. –£—á–∞—Å—Ç–Ω–∏–∫–æ–≤: {participants_count}")

    # –û—Ç–∫—Ä–µ–ø–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –æ –Ω–∞–±–æ—Ä–µ
    try:
        await context.bot.unpin_chat_message(chat_id=chat_id, message_id=game_id)
        logger.info(f"–°–æ–æ–±—â–µ–Ω–∏–µ –æ –Ω–∞–±–æ—Ä–µ –Ω–∞ –±–∞—Ç—Ç–ª {game_id} –æ—Ç–∫—Ä–µ–ø–ª–µ–Ω–æ –≤ —á–∞—Ç–µ {chat_id}.")
    except telegram.error.BadRequest as e_unpin: # "Message to unpin not found" or "Chat_admin_required"
        if "message to unpin not found" not in str(e_unpin).lower(): # –ò–≥–Ω–æ—Ä–∏—Ä—É–µ–º, –µ—Å–ª–∏ —É–∂–µ –æ—Ç–∫—Ä–µ–ø–ª–µ–Ω–æ
             logger.warning(f"–ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–∫—Ä–µ–ø–∏—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ –æ –Ω–∞–±–æ—Ä–µ {game_id}: {e_unpin}.")
    except Exception as e_unpin_unknown:
        logger.error(f"–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–∫—Ä–µ–ø–ª–µ–Ω–∏–∏ —Å–æ–æ–±—â–µ–Ω–∏—è –æ –Ω–∞–±–æ—Ä–µ {game_id}: {e_unpin_unknown}")

    # 1. –£–±—Ä–∞—Ç—å –∫–Ω–æ–ø–∫–∏ –Ω–∞–±–æ—Ä–∞ —É —Å–æ–æ–±—â–µ–Ω–∏—è –æ –Ω–∞–±–æ—Ä–µ
    try:
        await context.bot.edit_message_reply_markup(chat_id=chat_id, message_id=game_id, reply_markup=None)
    except Exception as e_edit_markup:
        logger.warning(f"–ù–µ —É–¥–∞–ª–æ—Å—å —É–±—Ä–∞—Ç—å –∫–Ω–æ–ø–∫–∏ —É —Å–æ–æ–±—â–µ–Ω–∏—è –æ –Ω–∞–±–æ—Ä–µ {game_id}: {e_edit_markup}")

    # 2. –û—Ç–ø—Ä–∞–≤–∏—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ –æ –Ω–∞—á–∞–ª–µ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –≤–æ–ø—Ä–æ—Å–æ–≤
    generating_msg = await context.bot.send_message(
        chat_id=chat_id,
        text=f"‚è≥ –ü–æ–ø–∏–∑–¥—è–∫–∞ –ø–æ–ª–µ–∑ –≤ —Å–≤–æ–∏ —Å–∞–º—ã–µ —Ç–µ–º–Ω—ã–µ –∞—Ä—Ö–∏–≤—ã (–∏ –Ω–µ–º–Ω–æ–≥–æ –≤ –∏–Ω—Ç–µ—Ä–Ω–µ—Ç) –∑–∞ <b>{TOS_BATTLE_NUM_QUESTIONS} –∫–∞–≤–µ—Ä–∑–Ω—ã–º–∏ –≤–æ–ø—Ä–æ—Å–∞–º–∏</b> –¥–ª—è –≤–∞—à–µ–≥–æ –∏–Ω—Ç–µ–ª–ª–µ–∫—Ç—É–∞–ª—å–Ω–æ–≥–æ –ø–æ–±–æ–∏—â–∞. –û–∂–∏–¥–∞–π—Ç–µ, —ç—Ç–æ –º–æ–∂–µ—Ç –∑–∞–Ω—è—Ç—å –Ω–µ–∫–æ—Ç–æ—Ä–æ–µ –≤—Ä–µ–º—è...",
        parse_mode='HTML',
        reply_to_message_id=game_id
    )

    # --->>> 3. –ì–ï–ù–ï–†–ê–¶–ò–Ø {TOS_BATTLE_NUM_QUESTIONS} –í–û–ü–†–û–°–û–í <<<---
    generated_questions_list = []
    # –û–ø—Ä–µ–¥–µ–ª—è–µ–º, —Å–∫–æ–ª—å–∫–æ –¥–æ–ª–∂–Ω–æ –±—ã—Ç—å –ø—Ä–∞–≤–¥–∏–≤—ã—Ö –∏ —Å–∫–æ–ª—å–∫–æ –≤—ã—Å–µ—Ä–æ–≤
    # –ú–æ–∂–Ω–æ —Å–¥–µ–ª–∞—Ç—å 50/50 –∏–ª–∏ –Ω–µ–º–Ω–æ–≥–æ —Å–ª—É—á–∞–π–Ω–æ. –î–ª—è –ø—Ä–æ—Å—Ç–æ—Ç—ã –ø–æ–∫–∞ 50/50.
    num_truth = TOS_BATTLE_NUM_QUESTIONS // 2
    num_shit = TOS_BATTLE_NUM_QUESTIONS - num_truth
    question_types_to_generate = ([True] * num_truth) + ([False] * num_shit)
    random.shuffle(question_types_to_generate) # –ü–µ—Ä–µ–º–µ—à–∏–≤–∞–µ–º —Ç–∏–ø—ã –≤–æ–ø—Ä–æ—Å–æ–≤

    for i, should_be_truth in enumerate(question_types_to_generate):
        logger.info(f"–ì–µ–Ω–µ—Ä–∏—Ä—É—é –≤–æ–ø—Ä–æ—Å {i+1}/{TOS_BATTLE_NUM_QUESTIONS} –¥–ª—è –±–∞—Ç—Ç–ª–∞ {game_id} (–¢–∏–ø: {'–ü—Ä–∞–≤–¥–∞' if should_be_truth else '–í—ã—Å–µ—Ä'})")
        if should_be_truth:
            statement_prompt = (
                "–¢—ã - –ü–æ–ø–∏–∑–¥—è–∫–∞, –∫–ª–∞–¥–µ–∑—å —Å—Ç—Ä–∞–Ω–Ω—ã—Ö, –Ω–æ —Ä–µ–∞–ª—å–Ω—ã—Ö —Ñ–∞–∫—Ç–æ–≤. –ü—Ä–∏–¥—É–º–∞–π –û–î–ò–ù –ú–ê–õ–û–ò–ó–í–ï–°–¢–ù–´–ô, –Ω–æ –†–ï–ê–õ–¨–ù–´–ô –∏ –ü–†–û–í–ï–†–Ø–ï–ú–´–ô —Ñ–∞–∫—Ç. "
                "–û–Ω –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å —Å—Ñ–æ—Ä–º—É–ª–∏—Ä–æ–≤–∞–Ω –∫–∞–∫ —É—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ, –∫–æ—Ä–æ—Ç–∫–æ (1-2 –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏—è) –∏ –±–µ–∑ —É–∫–∞–∑–∞–Ω–∏—è, —á—Ç–æ —ç—Ç–æ –ø—Ä–∞–≤–¥–∞. "
                "–ù–µ –∏—Å–ø–æ–ª—å–∑—É–π —Ñ—Ä–∞–∑—ã —Ç–∏–ø–∞ '–ü–æ–ø–∏–∑–¥—è–∫–∞ —É—Ç–≤–µ—Ä–∂–¥–∞–µ—Ç'. –ü—Ä–æ—Å—Ç–æ —Å–∞–º —Ñ–∞–∫—Ç."
                "\n–ü—Ä–∏–º–µ—Ä: –ú–µ–¥—É–∑–∞ Turritopsis Dohrnii –ø–æ—Ç–µ–Ω—Ü–∏–∞–ª—å–Ω–æ –±–µ—Å—Å–º–µ—Ä—Ç–Ω–∞."
                "\n–í–ê–ñ–ù–û: –ù–µ –ø–æ–≤—Ç–æ—Ä—è–π —Ñ–∞–∫—Ç—ã, –∫–æ—Ç–æ—Ä—ã–µ —Ç—ã —É–∂–µ –º–æ–≥ –≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞—Ç—å." # –ü–æ–ø—ã—Ç–∫–∞ —É–º–µ–Ω—å—à–∏—Ç—å –ø–æ–≤—Ç–æ—Ä—ã
            )
        else: # –î–æ–ª–∂–µ–Ω –±—ã—Ç—å –≤—ã—Å–µ—Ä
            statement_prompt = (
                "–¢—ã - –ü–æ–ø–∏–∑–¥—è–∫–∞, –≥–µ–Ω–µ—Ä–∞—Ç–æ—Ä –∞–±—Å—É—Ä–¥–Ω–æ–≥–æ –±—Ä–µ–¥–∞. –ü—Ä–∏–¥—É–º–∞–π –û–î–ò–ù –ê–ë–°–û–õ–Æ–¢–ù–û –õ–ñ–ò–í–´–ô, –Ω–æ –ù–ê–£–ö–û–û–ë–†–ê–ó–ù–´–ô –∏ –ü–†–ê–í–î–û–ü–û–î–û–ë–ù–û –ó–í–£–ß–ê–©–ò–ô –≤—ã—Å–µ—Ä. "
                "–û–Ω –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å —Å—Ñ–æ—Ä–º—É–ª–∏—Ä–æ–≤–∞–Ω –∫–∞–∫ —É—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ, –∫–æ—Ä–æ—Ç–∫–æ (1-2 –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏—è) –∏ –±–µ–∑ —É–∫–∞–∑–∞–Ω–∏—è, —á—Ç–æ —ç—Ç–æ –ª–æ–∂—å. "
                "–ù–µ –∏—Å–ø–æ–ª—å–∑—É–π —Ñ—Ä–∞–∑—ã —Ç–∏–ø–∞ '–ü–æ–ø–∏–∑–¥—è–∫–∞ —É—Ç–≤–µ—Ä–∂–¥–∞–µ—Ç'. –ü—Ä–æ—Å—Ç–æ —Å–∞–º –≤—ã—Å–µ—Ä."
                "\n–ü—Ä–∏–º–µ—Ä: –ï—Å–ª–∏ —á–∏—Ö–Ω—É—Ç—å —Å –æ—Ç–∫—Ä—ã—Ç—ã–º–∏ –≥–ª–∞–∑–∞–º–∏, –æ–Ω–∏ –≤—ã–ª–µ—Ç—è—Ç –∏–∑ –æ—Ä–±–∏—Ç —Å–æ —Å–∫–æ—Ä–æ—Å—Ç—å—é –ø—Ä–æ–±–∫–∏ –æ—Ç —à–∞–º–ø–∞–Ω—Å–∫–æ–≥–æ."
                "\n–í–ê–ñ–ù–û: –ù–µ –ø–æ–≤—Ç–æ—Ä—è–π –≤—ã—Å–µ—Ä—ã, –∫–æ—Ç–æ—Ä—ã–µ —Ç—ã —É–∂–µ –º–æ–≥ –≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞—Ç—å."
            )
        
        # –ù–µ–±–æ–ª—å—à–∞—è –∑–∞–¥–µ—Ä–∂–∫–∞ –º–µ–∂–¥—É –∑–∞–ø—Ä–æ—Å–∞–º–∏ –∫ API, —á—Ç–æ–±—ã –Ω–µ –ø–µ—Ä–µ–≥—Ä—É–∂–∞—Ç—å
        if i > 0: await asyncio.sleep(random.uniform(1.0, 2.5)) 

        generated_statement_text = await _call_ionet_api(
            messages=[{"role": "user", "content": statement_prompt}],
            model_id=IONET_TEXT_MODEL_ID, max_tokens=100, temperature=0.9 # –ü–æ–≤—ã—Å–∏–º —Ç–µ–º–ø–µ—Ä–∞—Ç—É—Ä—É –¥–ª—è —Ä–∞–∑–Ω–æ–æ–±—Ä–∞–∑–∏—è
        )

        if not generated_statement_text or generated_statement_text.startswith("[") or len(generated_statement_text.strip()) < 10:
            logger.warning(f"–ù–µ —É–¥–∞–ª–æ—Å—å —Å–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞—Ç—å –≤–æ–ø—Ä–æ—Å {i+1} –¥–ª—è –±–∞—Ç—Ç–ª–∞ {game_id}. –ò—Å–ø–æ–ª—å–∑—É—é –∑–∞–≥–ª—É—à–∫—É.")
            generated_statement_text = f"–ó–∞–≥–ª—É—à–∫–∞-—É—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ ‚Ññ{i+1}, –ø–æ—Ç–æ–º—É —á—Ç–æ –ò–ò –æ–±–æ—Å—Ä–∞–ª—Å—è (—ç—Ç–æ {'–ø—Ä–∞–≤–¥–∞' if should_be_truth else '–≤—ã—Å–µ—Ä'})"
        
        final_statement_for_question = "üóø –ü–æ–ø–∏–∑–¥—è–∫–∞ —É—Ç–≤–µ—Ä–∂–¥–∞–µ—Ç: " + generated_statement_text.strip()
        generated_questions_list.append({
            "statement": final_statement_for_question, 
            "is_truth": should_be_truth,
            "revealed_to_users": False, # –ü–æ–∫–∞ –Ω–µ —Ä–∞—Å–∫—Ä—ã—Ç
            "user_answers_to_this_q": {} # {user_id: {"name": "...", "answer_bool": True/False, "answered_at": datetime}}
        })
    
    logger.info(f"–°–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–Ω–æ {len(generated_questions_list)} –≤–æ–ø—Ä–æ—Å–æ–≤ –¥–ª—è –±–∞—Ç—Ç–ª–∞ {game_id}.")
    if generating_msg:
        try: await context.bot.delete_message(chat_id=chat_id, message_id=generating_msg.message_id)
        except Exception: pass

    # 4. –û–±–Ω–æ–≤–∏—Ç—å —Å—Ç–∞—Ç—É—Å –∏–≥—Ä—ã –Ω–∞ "playing" –∏ —Å–æ—Ö—Ä–∞–Ω–∏—Ç—å –≤–æ–ø—Ä–æ—Å—ã –≤ –ë–î
    update_fields = {
        "status": "playing",
        "current_question_index": 0, # –ù–∞—á–∏–Ω–∞–µ–º —Å 0-–≥–æ –≤–æ–ø—Ä–æ—Å–∞
        "questions": generated_questions_list,
        "started_at": datetime.datetime.now(datetime.timezone.utc) # –í—Ä–µ–º—è —Ñ–∞–∫—Ç–∏—á–µ—Å–∫–æ–≥–æ –Ω–∞—á–∞–ª–∞ –∏–≥—Ä—ã
    }
    await loop.run_in_executor(
        None, lambda: tos_battles_collection.update_one(
            {"_id": battle_doc_id}, {"$set": update_fields}
        )
    )
    
    # 5. –û—Ç–ø—Ä–∞–≤–∏—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ –æ –Ω–∞—á–∞–ª–µ –∏–≥—Ä—ã
    participants_data_for_mention = battle.get("participants", {})
    participant_mentions = []
    if participants_data_for_mention:
        for p_id_str, p_info in participants_data_for_mention.items():
            try:
                p_id_int = int(p_id_str)
                # –ü–æ–ø—Ä–æ–±—É–µ–º –ø–æ–ª—É—á–∏—Ç—å –∞–∫—Ç—É–∞–ª—å–Ω—ã–π –æ–±—ä–µ–∫—Ç User –¥–ª—è mention_html
                # –≠—Ç–æ –º–æ–∂–µ—Ç –±—ã—Ç—å –º–µ–¥–ª–µ–Ω–Ω–æ –¥–ª—è –±–æ–ª—å—à–æ–≥–æ —á–∏—Å–ª–∞ —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤
                # member = await context.bot.get_chat_member(chat_id, p_id_int)
                # participant_mentions.append(member.user.mention_html())
                # –£–ø—Ä–æ—â–µ–Ω–Ω—ã–π –≤–∞—Ä–∏–∞–Ω—Ç, –µ—Å–ª–∏ –µ—Å—Ç—å –∏–º—è:
                p_name = p_info.get("name", f"–ê–Ω–æ–Ω-{p_id_int}")
                # –°–æ–∑–¥–∞–µ–º "—Ñ–µ–π–∫–æ–≤—ã–π" User –æ–±—ä–µ–∫—Ç –¥–ª—è mention_html
                # –ï—Å–ª–∏ —É –≤–∞—Å –µ—Å—Ç—å username –≤ p_info, –º–æ–∂–Ω–æ –µ–≥–æ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å
                temp_user_for_mention = User(id=p_id_int, first_name=p_name, is_bot=False)
                participant_mentions.append(temp_user_for_mention.mention_html())

            except ValueError: # –ï—Å–ª–∏ ID –Ω–µ int
                participant_mentions.append(p_info.get("name", "–û—à–∏–±–∫–∞–ò–º–µ–Ω–∏"))
            except Exception as e_mention:
                logger.warning(f"–ù–µ —É–¥–∞–ª–æ—Å—å —Å–æ–∑–¥–∞—Ç—å mention –¥–ª—è —É—á–∞—Å—Ç–Ω–∏–∫–∞ {p_id_str}: {e_mention}")
                participant_mentions.append(p_info.get("name", f"–ê–Ω–æ–Ω-{p_id_str} (–±–µ–∑ @)"))
    
    start_game_message_text = (
        f"üî• <b>–ë–ê–¢–¢–õ '–ü–†–ê–í–î–ê –ò–õ–ò –í–´–°–ï–†' –ù–ê–ß–ò–ù–ê–ï–¢–°–Ø!</b> üî•\n\n"
        f"–£—á–∞—Å—Ç–Ω–∏–∫–∏ —ç—Ç–æ–π –∏–Ω—Ç–µ–ª–ª–µ–∫—Ç—É–∞–ª—å–Ω–æ–π –±–æ–π–Ω–∏: {', '.join(participant_mentions) if participant_mentions else '–ù–∏–∫—Ç–æ –Ω–µ –∑–∞–ø–∏—Å–∞–ª—Å—è, –ª–æ–ª. –ù—É –∏ —Ö—É–π —Å –≤–∞–º–∏, –∏–≥—Ä–∞—é —Å–∞–º —Å —Å–æ–±–æ–π.'}\n\n"
        f"–í—Å–µ–≥–æ –±—É–¥–µ—Ç {TOS_BATTLE_NUM_QUESTIONS} —Ä–∞—É–Ω–¥–æ–≤. –ì–æ—Ç–æ–≤—å—Ç–µ —Å–≤–æ–∏ –º–æ–∑–≥–∏ (–∏–ª–∏ —á—Ç–æ —Ç–∞–º —É –≤–∞—Å –≤–º–µ—Å—Ç–æ –Ω–∏—Ö)!\n"
        f"–°–µ–π—á–∞—Å –±—É–¥–µ—Ç –ø–µ—Ä–≤—ã–π –≤–æ–ø—Ä–æ—Å..."
    )
    await context.bot.send_message(
        chat_id=chat_id,
        text=start_game_message_text,
        parse_mode='HTML',
        reply_to_message_id=game_id # –û—Ç–≤–µ—á–∞–µ–º –Ω–∞ —Å–æ–æ–±—â–µ–Ω–∏–µ –æ –Ω–∞–±–æ—Ä–µ
    )

    # 6. –ó–∞–ø—É—Å—Ç–∏—Ç—å –ª–æ–≥–∏–∫—É –ø–µ—Ä–≤–æ–≥–æ –≤–æ–ø—Ä–æ—Å–∞
    # –û–±–Ω–æ–≤–∏–º battle –¥–∞–Ω–Ω—ã–º–∏ –∏–∑ –ë–î, —á—Ç–æ–±—ã –∏–º–µ—Ç—å –∞–∫—Ç—É–∞–ª—å–Ω—ã–π —Å–ø–∏—Å–æ–∫ –≤–æ–ø—Ä–æ—Å–æ–≤
    battle_updated = await loop.run_in_executor(None, lambda: tos_battles_collection.find_one({"_id": battle_doc_id}))
    if battle_updated:
        await _ask_next_tos_battle_question(context, battle_updated) # –ü–µ—Ä–µ–¥–∞–µ–º –≤–µ—Å—å –¥–æ–∫—É–º–µ–Ω—Ç –±–∞—Ç—Ç–ª–∞
    else:
        logger.error(f"–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –æ–±–Ω–æ–≤–ª–µ–Ω–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ –±–∞—Ç—Ç–ª–∞ {battle_doc_id} –ø–µ—Ä–µ–¥ –ø–µ—Ä–≤—ã–º –≤–æ–ø—Ä–æ—Å–æ–º.")
        await context.bot.send_message(chat_id=chat_id, text="üóø –ü–∏–∑–¥–µ—Ü, —è –ø–æ—Ç–µ—Ä—è–ª –¥–∞–Ω–Ω—ã–µ –æ–± –∏–≥—Ä–µ, –ø–æ–∫–∞ –≥–æ—Ç–æ–≤–∏–ª –≤–æ–ø—Ä–æ—Å—ã. –†–∞—Å—Ö–æ–¥–∏–º—Å—è.")


async def auto_end_recruitment_job(context: ContextTypes.DEFAULT_TYPE) -> None:
    job = context.job
    if not job or not job.chat_id or not job.data or 'game_id' not in job.data:
        logger.error(f"–û—à–∏–±–∫–∞ –≤ job 'auto_end_recruitment_job': –Ω–µ—Ç –Ω–µ–æ–±—Ö–æ–¥–∏–º—ã—Ö –¥–∞–Ω–Ω—ã—Ö. Job: {job}")
        return
        
    chat_id = job.chat_id
    game_id = job.data['game_id'] # –≠—Ç–æ message_id —Å–æ–æ–±—â–µ–Ω–∏—è –æ –Ω–∞–±–æ—Ä–µ
    # host_id = job.data.get('host_id') # –ú–æ–∂–Ω–æ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å –¥–ª—è –ª–æ–≥–æ–≤, –µ—Å–ª–∏ –Ω—É–∂–Ω–æ
    loop = asyncio.get_running_loop()

    logger.info(f"–°—Ä–∞–±–æ—Ç–∞–ª Job: –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–µ –æ–∫–æ–Ω—á–∞–Ω–∏–µ –Ω–∞–±–æ—Ä–∞ –¥–ª—è –±–∞—Ç—Ç–ª–∞ game_id: {game_id} –≤ —á–∞—Ç–µ {chat_id}.")

    # –ò—â–µ–º –∏–≥—Ä—É, –∫–æ—Ç–æ—Ä–∞—è –≤—Å–µ –µ—â–µ –≤ —Å—Ç–∞—Ç—É—Å–µ –Ω–∞–±–æ—Ä–∞ –∏ –≤—Ä–µ–º—è –Ω–∞–±–æ—Ä–∞ –¥–µ–π—Å—Ç–≤–∏—Ç–µ–ª—å–Ω–æ –∏—Å—Ç–µ–∫–ª–æ
    # –ò—Å–ø–æ–ª—å–∑—É–µ–º find_one_and_update –¥–ª—è –∞—Ç–æ–º–∞—Ä–Ω–æ—Å—Ç–∏, –µ—Å–ª–∏ –≤–æ–∑–º–æ–∂–Ω–æ, –∏–ª–∏ find_one + update_one
    # –í–∞–∂–Ω–æ: find_one_and_update –≤–µ—Ä–Ω–µ—Ç –¥–æ–∫—É–º–µ–Ω—Ç –î–û –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è, –µ—Å–ª–∏ –Ω–µ —É–∫–∞–∑–∞—Ç—å return_document
    # –ü–æ—ç—Ç–æ–º—É —Å–Ω–∞—á–∞–ª–∞ –Ω–∞–π–¥–µ–º, –ø–æ—Ç–æ–º –ø—Ä–æ–≤–µ—Ä–∏–º –≤—Ä–µ–º—è, –ø–æ—Ç–æ–º –æ–±–Ω–æ–≤–∏–º.
    
    battle_to_process = await loop.run_in_executor(
        None, lambda: tos_battles_collection.find_one(
            {"chat_id": chat_id, "game_id": game_id, "status": "recruiting"}
        )
    )

    if not battle_to_process:
        logger.info(f"Job (auto_end_recruitment): –ë–∞—Ç—Ç–ª {game_id} –≤ —á–∞—Ç–µ {chat_id} –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ —Å—Ç–∞—Ç—É—Å–µ 'recruiting'. –í–æ–∑–º–æ–∂–Ω–æ, —É–∂–µ –Ω–∞—á–∞—Ç —Ö–æ—Å—Ç–æ–º –∏–ª–∏ –æ—Ç–º–µ–Ω–µ–Ω.")
        return

    now_utc_job_end = datetime.datetime.now(datetime.timezone.utc)
    recruitment_ends_at_db = battle_to_process["recruitment_ends_at"]
    if recruitment_ends_at_db.tzinfo is None: # –£–±–µ–¥–∏–º—Å—è, —á—Ç–æ –µ—Å—Ç—å —Ç–∞–π–º–∑–æ–Ω–∞
        recruitment_ends_at_db = recruitment_ends_at_db.replace(tzinfo=datetime.timezone.utc)

    if now_utc_job_end < recruitment_ends_at_db:
        logger.info(f"Job (auto_end_recruitment): –í—Ä–µ–º—è –Ω–∞–±–æ—Ä–∞ –¥–ª—è –±–∞—Ç—Ç–ª–∞ {game_id} –µ—â–µ –Ω–µ –∏—Å—Ç–µ–∫–ª–æ (–≤–æ–∑–º–æ–∂–Ω–æ, –±—ã–ª–æ –ø—Ä–æ–¥–ª–µ–Ω–æ). –¢–µ–∫—É—â–µ–µ: {now_utc_job_end}, –û–∫–æ–Ω—á–∞–Ω–∏–µ: {recruitment_ends_at_db}. Job –æ—Ç—Ä–∞–±–æ—Ç–∞–µ—Ç –ø–æ–∑–∂–µ.")
        # Job –±—É–¥–µ—Ç –≤—ã–∑–≤–∞–Ω —Å–Ω–æ–≤–∞ –ø–æ –ø—Ä–∞–≤–∏–ª—å–Ω–æ–º—É (–ø—Ä–æ–¥–ª–µ–Ω–Ω–æ–º—É) –≤—Ä–µ–º–µ–Ω–∏, –µ—Å–ª–∏ –æ–Ω –±—ã–ª –ø–µ—Ä–µ–ø–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω.
        # –ï—Å–ª–∏ –Ω–µ –±—ã–ª, —Ç–æ —ç—Ç–æ—Ç job –ø—Ä–æ—Å—Ç–æ –∑–∞–≤–µ—Ä—à–∏—Ç—Å—è, –∞ –Ω–æ–≤—ã–π (–µ—Å–ª–∏ –±—ã–ª —Å–æ–∑–¥–∞–Ω –ø—Ä–∏ –ø—Ä–æ–¥–ª–µ–Ω–∏–∏) —Å—Ä–∞–±–æ—Ç–∞–µ—Ç.
        return

    # –í—Ä–µ–º—è –¥–µ–π—Å—Ç–≤–∏—Ç–µ–ª—å–Ω–æ –∏—Å—Ç–µ–∫–ª–æ, –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º
    battle_doc_id_job = battle_to_process["_id"]
    current_participants_count_job = len(battle_to_process.get("participants", {}))

    if current_participants_count_job < TOS_BATTLE_MIN_PARTICIPANTS:
        logger.info(f"Job (auto_end_recruitment): –ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤ ({current_participants_count_job}/{TOS_BATTLE_MIN_PARTICIPANTS}) –¥–ª—è —Å—Ç–∞—Ä—Ç–∞ –±–∞—Ç—Ç–ª–∞ {game_id}. –û—Ç–º–µ–Ω—è–µ–º.")
        
        # –ê—Ç–æ–º–∞—Ä–Ω–æ –º–µ–Ω—è–µ–º —Å—Ç–∞—Ç—É—Å –Ω–∞ "cancelled_not_enough_players"
        update_cancel_job_result = await loop.run_in_executor(
            None, lambda: tos_battles_collection.update_one(
                {"_id": battle_doc_id_job, "status": "recruiting"}, # –î–æ–ø. –ø—Ä–æ–≤–µ—Ä–∫–∞, —á—Ç–æ —Å—Ç–∞—Ç—É—Å –Ω–µ –∏–∑–º–µ–Ω–∏–ª—Å—è
                {"$set": {"status": "cancelled_not_enough_players", "finished_at": now_utc_job_end}}
            )
        )

        if update_cancel_job_result.modified_count == 0:
            logger.warning(f"Job (auto_end_recruitment): –ù–µ —É–¥–∞–ª–æ—Å—å –æ–±–Ω–æ–≤–∏—Ç—å —Å—Ç–∞—Ç—É—Å –Ω–∞ 'cancelled_not_enough_players' –¥–ª—è –±–∞—Ç—Ç–ª–∞ {game_id}. –í–æ–∑–º–æ–∂–Ω–æ, —Å—Ç–∞—Ç—É—Å –∏–∑–º–µ–Ω–∏–ª—Å—è.")
            return # –í—ã—Ö–æ–¥–∏–º, —á—Ç–æ–±—ã –Ω–µ –¥—É–±–ª–∏—Ä–æ–≤–∞—Ç—å –¥–µ–π—Å—Ç–≤–∏—è

        # –û—Ç–∫—Ä–µ–ø–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –æ –Ω–∞–±–æ—Ä–µ
        try:
            await context.bot.unpin_chat_message(chat_id=chat_id, message_id=battle_to_process["message_id_recruitment"])
            logger.info(f"Job (auto_end_recruitment): –°–æ–æ–±—â–µ–Ω–∏–µ –æ –Ω–∞–±–æ—Ä–µ {game_id} –æ—Ç–∫—Ä–µ–ø–ª–µ–Ω–æ (–Ω–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –∏–≥—Ä–æ–∫–æ–≤).")
        except Exception: pass 
        
        # –£–±–∏—Ä–∞–µ–º –∫–Ω–æ–ø–∫–∏ —É —Å–æ–æ–±—â–µ–Ω–∏—è –æ –Ω–∞–±–æ—Ä–µ
        try:
            await context.bot.edit_message_reply_markup(chat_id=chat_id, message_id=battle_to_process["message_id_recruitment"], reply_markup=None)
            await context.bot.send_message(
                chat_id, 
                f"üö´ –ù–∞–±–æ—Ä –Ω–∞ –ë–∞—Ç—Ç–ª '–ü—Ä–∞–≤–¥–∞ –∏–ª–∏ –í—ã—Å–µ—Ä' (ID: {game_id}) –∑–∞–≤–µ—Ä—à–µ–Ω! –ö —Å–æ–∂–∞–ª–µ–Ω–∏—é, –Ω–∞–±—Ä–∞–ª–æ—Å—å –º–µ–Ω—å—à–µ {TOS_BATTLE_MIN_PARTICIPANTS} –¥–æ–ª–±–æ–µ–±–æ–≤ –¥–ª—è —ç–ø–∏—á–Ω–æ–π –∑–∞—Ä—É–±—ã. –ò–≥—Ä–∞ –æ—Ç–º–µ–Ω—è–µ—Ç—Å—è.\n"
                f"üóø –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –≤ –¥—Ä—É–≥–æ–π —Ä–∞–∑, –∫–æ–≥–¥–∞ —Å–æ–±–µ—Ä–µ—Ç—Å—è —Ç–æ–ª–ø–∞ –ø–æ–±–æ–ª—å—à–µ –∏–ª–∏ —Ö–æ—Å—Ç –±—É–¥–µ—Ç –º–µ–Ω–µ–µ –ª–µ–Ω–∏–≤–æ–π –∂–æ–ø–æ–π.",
                parse_mode='HTML',
                reply_to_message_id=battle_to_process["message_id_recruitment"]
            )
        except Exception as e_cancel_job:
             logger.error(f"Job (auto_end_recruitment): –û—à–∏–±–∫–∞ –ø—Ä–∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–∏ –æ–± –æ—Ç–º–µ–Ω–µ –±–∞—Ç—Ç–ª–∞ {game_id}: {e_cancel_job}")
        
        # –û–±–Ω–æ–≤–ª—è–µ–º –∫—É–ª–¥–∞—É–Ω, —Ç–∞–∫ –∫–∞–∫ –∏–≥—Ä–∞ —Å—á–∏—Ç–∞–µ—Ç—Å—è "–∑–∞–≤–µ—Ä—à–µ–Ω–Ω–æ–π" –æ—Ç–º–µ–Ω–æ–π
        await loop.run_in_executor(
            None, lambda: chat_activity_collection.update_one(
                {"chat_id": chat_id},
                {"$set": {"last_tos_battle_end_time": now_utc_job_end}},
                upsert=True
            )
        )
        return # –ó–∞–≤–µ—Ä—à–∞–µ–º —Ä–∞–±–æ—Ç—É job'–∞

    # –ï—Å–ª–∏ —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤ –¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ, –Ω–∞—á–∏–Ω–∞–µ–º –∏–≥—Ä—É
    logger.info(f"Job (auto_end_recruitment): –í—Ä–µ–º—è –Ω–∞–±–æ—Ä–∞ –¥–ª—è –±–∞—Ç—Ç–ª–∞ {game_id} –∏—Å—Ç–µ–∫–ª–æ. –£—á–∞—Å—Ç–Ω–∏–∫–æ–≤ –¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ ({current_participants_count_job}). –ù–∞—á–∏–Ω–∞–µ–º –∏–≥—Ä—É.")
    # –í—ã–∑—ã–≤–∞–µ–º –æ—Å–Ω–æ–≤–Ω—É—é —Ñ—É–Ω–∫—Ü–∏—é –Ω–∞—á–∞–ª–∞ —Å–∞–º–æ–π –∏–≥—Ä—ã, –ø–µ—Ä–µ–¥–∞–≤–∞—è _id –¥–æ–∫—É–º–µ–Ω—Ç–∞
    await _actually_start_the_battle_game(context, battle_doc_id_job)

async def _ask_next_tos_battle_question(context: ContextTypes.DEFAULT_TYPE, battle_data: dict) -> None:
    """–û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç —Å–ª–µ–¥—É—é—â–∏–π –≤–æ–ø—Ä–æ—Å –±–∞—Ç—Ç–ª–∞ –∏ –∑–∞–ø—É—Å–∫–∞–µ—Ç —Ç–∞–π–º–µ—Ä –Ω–∞ –æ—Ç–≤–µ—Ç."""
    loop = asyncio.get_running_loop()
    chat_id = battle_data["chat_id"]
    game_id = battle_data["game_id"] # –≠—Ç–æ message_id_recruitment
    battle_doc_id = battle_data["_id"]
    current_question_index = battle_data.get("current_question_index", -1)

    if current_question_index < 0 or current_question_index >= len(battle_data.get("questions", [])):
        logger.error(f"–ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π current_question_index ({current_question_index}) –¥–ª—è –±–∞—Ç—Ç–ª–∞ {game_id}.")
        # –ó–¥–µ—Å—å –¥–æ–ª–∂–Ω–∞ –±—ã—Ç—å –ª–æ–≥–∏–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è –∏–≥—Ä—ã, –µ—Å–ª–∏ –≤–æ–ø—Ä–æ—Å—ã –∫–æ–Ω—á–∏–ª–∏—Å—å
        await _end_tos_battle(context, battle_data) # –ü—Ä–µ–¥–ø–æ–ª–∞–≥–∞–µ–º, —á—Ç–æ —Ç–∞–∫–∞—è —Ñ—É–Ω–∫—Ü–∏—è –±—É–¥–µ—Ç
        return

    question_data = battle_data["questions"][current_question_index]
    statement_to_ask = question_data["statement"]

    logger.info(f"–ó–∞–¥–∞–µ–º –≤–æ–ø—Ä–æ—Å {current_question_index + 1}/{TOS_BATTLE_NUM_QUESTIONS} –¥–ª—è –±–∞—Ç—Ç–ª–∞ {game_id}: '{statement_to_ask[:50]}...'")

    question_msg_text = (
        f"<b>–†–∞—É–Ω–¥ {current_question_index + 1} –∏–∑ {TOS_BATTLE_NUM_QUESTIONS}!</b>\n\n"
        f"{statement_to_ask}\n\n"
        f"–£ –≤–∞—Å {TOS_BATTLE_QUESTION_ANSWER_TIME_SECONDS} —Å–µ–∫—É–Ω–¥ –Ω–∞ —Ä–∞–∑–º—ã—à–ª–µ–Ω–∏–µ, —É–±–ª—é–¥–∫–∏!"
    )
    
    # –ö–Ω–æ–ø–∫–∏ –í–°–ï–ì–î–ê –°–û–ó–î–ê–Æ–¢–°–Ø –ë–ï–ó –°–ß–ï–¢–ß–ò–ö–û–í –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ –Ω–æ–≤–æ–≥–æ –≤–æ–ø—Ä–æ—Å–∞
    keyboard_question_initial = [
        [
            InlineKeyboardButton("üëç –≠—Ç–æ –ü—Ä–∞–≤–¥–∞!", callback_data=f"tosbattle_ans_{game_id}_{current_question_index}_true"),
            InlineKeyboardButton("üëé –≠—Ç–æ –í—ã—Å–µ—Ä!", callback_data=f"tosbattle_ans_{game_id}_{current_question_index}_false")
        ]
    ]
    reply_markup_question_initial = InlineKeyboardMarkup(keyboard_question_initial)

    try:
        sent_question_msg = await context.bot.send_message(
            chat_id,
            text=question_msg_text,
            parse_mode='HTML',
            reply_markup=reply_markup_question_initial # <<<--- –ò–°–ü–û–õ–¨–ó–£–ï–ú –ö–ù–û–ü–ö–ò –ë–ï–ó –°–ß–ï–¢–ß–ò–ö–û–í
        )
        # –°–æ—Ö—Ä–∞–Ω—è–µ–º ID —Å–æ–æ–±—â–µ–Ω–∏—è —Å —Ç–µ–∫—É—â–∏–º –≤–æ–ø—Ä–æ—Å–æ–º –≤ –ë–î
        await loop.run_in_executor(
            None, lambda: tos_battles_collection.update_one(
                {"_id": battle_doc_id},
                {"$set": {"message_id_current_question": sent_question_msg.message_id}}
            )
        )

        # –ü–ª–∞–Ω–∏—Ä—É–µ–º –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–µ —Ä–∞—Å–∫—Ä—ã—Ç–∏–µ –æ—Ç–≤–µ—Ç–∞ –Ω–∞ —ç—Ç–æ—Ç –≤–æ–ø—Ä–æ—Å
        job_name_q_reveal = f"tosbattle_q_reveal_{chat_id}_{game_id}_{current_question_index}"
        # –£–¥–∞–ª—è–µ–º —Å—Ç–∞—Ä—ã–π job —Å —Ç–∞–∫–∏–º –∂–µ –∏–º–µ–Ω–µ–º, –µ—Å–ª–∏ –æ–Ω –≤–¥—Ä—É–≥ –æ—Å—Ç–∞–ª—Å—è
        current_jobs_q = context.job_queue.get_jobs_by_name(job_name_q_reveal)
        for old_job_q in current_jobs_q:
            old_job_q.schedule_removal()
        
        context.job_queue.run_once(
            auto_reveal_battle_question_job, # –ù–æ–≤–∞—è job-—Ñ—É–Ω–∫—Ü–∏—è
            TOS_BATTLE_QUESTION_ANSWER_TIME_SECONDS,
            chat_id=chat_id,
            data={'battle_doc_id_str': str(battle_doc_id), 'question_index': current_question_index}, # –ü–µ—Ä–µ–¥–∞–µ–º ObjectId –∫–∞–∫ —Å—Ç—Ä–æ–∫—É
            name=job_name_q_reveal
        )
        logger.info(f"–ó–∞–ø–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω–æ –∞–≤—Ç–æ-—Ä–∞—Å–∫—Ä—ã—Ç–∏–µ –¥–ª—è –≤–æ–ø—Ä–æ—Å–∞ {current_question_index} –±–∞—Ç—Ç–ª–∞ {game_id} —á–µ—Ä–µ–∑ {TOS_BATTLE_QUESTION_ANSWER_TIME_SECONDS} —Å–µ–∫.")

    except Exception as e_ask:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ –≤–æ–ø—Ä–æ—Å–∞ {current_question_index} –¥–ª—è –±–∞—Ç—Ç–ª–∞ {game_id}: {e_ask}")
        # –ü–æ–ø—ã—Ç–∞—Ç—å—Å—è –∑–∞–≤–µ—Ä—à–∏—Ç—å –∏–≥—Ä—É –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ, –µ—Å–ª–∏ –Ω–µ –º–æ–∂–µ–º –∑–∞–¥–∞—Ç—å –≤–æ–ø—Ä–æ—Å
        await context.bot.send_message(chat_id, "üóø –ü–∏–∑–¥–µ—Ü, —è —Å–ª–æ–º–∞–ª—Å—è –∏ –Ω–µ –º–æ–≥—É –∑–∞–¥–∞—Ç—å —Å–ª–µ–¥—É—é—â–∏–π –≤–æ–ø—Ä–æ—Å. –ü–æ—Ö–æ–∂–µ, –±–∞—Ç—Ç–ª –ø—Ä–∏–¥–µ—Ç—Å—è –ø—Ä–µ—Ä–≤–∞—Ç—å.")
        await _end_tos_battle(context, battle_data, error_occurred=True)

async def auto_reveal_battle_question_job(context: ContextTypes.DEFAULT_TYPE) -> None:
    job = context.job
    if not job or not job.chat_id or not job.data or 'battle_doc_id_str' not in job.data or 'question_index' not in job.data:
        logger.error(f"–û—à–∏–±–∫–∞ –≤ job 'auto_reveal_battle_question_job': –Ω–µ—Ç –Ω–µ–æ–±—Ö–æ–¥–∏–º—ã—Ö –¥–∞–Ω–Ω—ã—Ö. Job: {job}")
        return
        
    chat_id = job.chat_id
    try:
        battle_doc_id = ObjectId(job.data['battle_doc_id_str']) # –ü—Ä–µ–æ–±—Ä–∞–∑—É–µ–º —Å—Ç—Ä–æ–∫—É –æ–±—Ä–∞—Ç–Ω–æ –≤ ObjectId
    except Exception as e_oid:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–µ–æ–±—Ä–∞–∑–æ–≤–∞–Ω–∏—è battle_doc_id_str –≤ ObjectId –≤ job'–µ: {e_oid}")
        return
        
    question_index_from_job = job.data['question_index']
    
    logger.info(f"–°—Ä–∞–±–æ—Ç–∞–ª –∞–≤—Ç–æ-—Ä–µ–≤–∏–ª –¥–ª—è –≤–æ–ø—Ä–æ—Å–∞ {question_index_from_job} –±–∞—Ç—Ç–ª–∞ (doc_id: {battle_doc_id}) –≤ —á–∞—Ç–µ {chat_id}.")
    
    # –í—ã–∑—ã–≤–∞–µ–º –Ω–æ–≤—É—é —Ñ—É–Ω–∫—Ü–∏—é, –∫–æ—Ç–æ—Ä–∞—è –±—É–¥–µ—Ç –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞—Ç—å —Ä–∞—Å–∫—Ä—ã—Ç–∏–µ –æ—Ç–≤–µ—Ç–∞ –Ω–∞ –≤–æ–ø—Ä–æ—Å –±–∞—Ç—Ç–ª–∞
    await _process_battle_question_reveal(context, battle_doc_id, question_index_from_job, auto_triggered=True)

async def _process_battle_question_reveal(context: ContextTypes.DEFAULT_TYPE, battle_doc_id: ObjectId, question_index: int, auto_triggered: bool = False):
    loop = asyncio.get_running_loop()
    # –ü–æ–ª—É—á–∞–µ–º –°–ê–ú–£–Æ –ê–ö–¢–£–ê–õ–¨–ù–£–Æ –≤–µ—Ä—Å–∏—é –±–∞—Ç—Ç–ª–∞ –∏–∑ –ë–î
    battle = await loop.run_in_executor(None, lambda: tos_battles_collection.find_one({"_id": battle_doc_id}))

    if not battle or battle.get("status") != "playing":
        logger.info(f"_process_battle_question_reveal: –ë–∞—Ç—Ç–ª {battle_doc_id} –Ω–µ –Ω–∞–π–¥–µ–Ω –∏–ª–∏ –Ω–µ –≤ —Å—Ç–∞—Ç—É—Å–µ 'playing'. –¢–µ–∫—É—â–∏–π —Å—Ç–∞—Ç—É—Å: {battle.get('status')}")
        # –ï—Å–ª–∏ —Å—Ç–∞—Ç—É—Å —É–∂–µ 'finished', –≤–æ–∑–º–æ–∂–Ω–æ, –∏–≥—Ä–∞ –∑–∞–≤–µ—Ä—à–∏–ª–∞—Å—å –¥—Ä—É–≥–∏–º –ø—É—Ç–µ–º (–Ω–∞–ø—Ä–∏–º–µ—Ä, –æ—à–∏–±–∫–æ–π)
        if battle and battle.get("status") == "finished":
             # –£–±–∏—Ä–∞–µ–º –∫–Ω–æ–ø–∫–∏ —É —Å–æ–æ–±—â–µ–Ω–∏—è —Å –≤–æ–ø—Ä–æ—Å–æ–º, –µ—Å–ª–∏ –æ–Ω–æ –µ—â–µ –µ—Å—Ç—å –∏ –∏–º–µ–µ—Ç –∏—Ö
            if battle.get("message_id_current_question"):
                try:
                    await context.bot.edit_message_reply_markup(battle["chat_id"], message_id=battle["message_id_current_question"], reply_markup=None)
                except Exception: pass
        return

    questions_list = battle.get("questions", [])
    if question_index >= len(questions_list):
        logger.error(f"–ù–µ–≤–µ—Ä–Ω—ã–π question_index {question_index} –¥–ª—è –±–∞—Ç—Ç–ª–∞ {battle_doc_id} –ø—Ä–∏ —Ä–∞—Å–∫—Ä—ã—Ç–∏–∏.")
        await _end_tos_battle(context, battle, error_occurred=True, error_message="–û—à–∏–±–∫–∞ –∏–Ω–¥–µ–∫—Å–∞ –≤–æ–ø—Ä–æ—Å–∞") # –ó–∞–≤–µ—Ä—à–∞–µ–º —Å –æ—à–∏–±–∫–æ–π
        return

    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –Ω–µ –±—ã–ª –ª–∏ —ç—Ç–æ—Ç –≤–æ–ø—Ä–æ—Å —É–∂–µ —Ä–∞—Å–∫—Ä—ã—Ç
    if questions_list[question_index].get("revealed_to_users"):
        logger.info(f"–í–æ–ø—Ä–æ—Å {question_index} –±–∞—Ç—Ç–ª–∞ {battle_doc_id} —É–∂–µ –±—ã–ª —Ä–∞—Å–∫—Ä—ã—Ç (–ø—Ä–æ–≤–µ—Ä–∫–∞ –≤ _process_battle_question_reveal).")
        return # –ù–∏—á–µ–≥–æ –Ω–µ –¥–µ–ª–∞–µ–º, –µ—Å–ª–∏ —É–∂–µ —Ä–∞—Å–∫—Ä—ã—Ç

    chat_id = battle["chat_id"]
    game_id = battle["game_id"] # message_id_recruitment
    
    logger.info(f"–†–∞—Å–∫—Ä—ã—Ç–∏–µ –æ—Ç–≤–µ—Ç–∞ –Ω–∞ –≤–æ–ø—Ä–æ—Å {question_index + 1} –¥–ª—è –±–∞—Ç—Ç–ª–∞ {game_id} –≤ —á–∞—Ç–µ {chat_id}. Auto-triggered: {auto_triggered}")
    
    statement_data = questions_list[question_index]
    correct_answer_is_truth = statement_data["is_truth"]
    statement_text = statement_data["statement"]
    user_answers_for_this_q = statement_data.get("user_answers_to_this_q", {})

    # 1. –ü–æ–º–µ—Ç–∏—Ç—å –≤–æ–ø—Ä–æ—Å –∫–∞–∫ —Ä–∞—Å–∫—Ä—ã—Ç—ã–π –≤ –ë–î
    await loop.run_in_executor(
        None, lambda: tos_battles_collection.update_one(
            {"_id": battle_doc_id},
            {"$set": {f"questions.{question_index}.revealed_to_users": True}}
        )
    )
    
    # 2. –£–±—Ä–∞—Ç—å –∫–Ω–æ–ø–∫–∏ —É —Å–æ–æ–±—â–µ–Ω–∏—è —Å –≤–æ–ø—Ä–æ—Å–æ–º (–µ—Å–ª–∏ –æ–Ω–æ –±—ã–ª–æ)
    message_id_of_this_question = battle.get("message_id_current_question")
    if message_id_of_this_question:
        try:
            await context.bot.edit_message_text( # –†–µ–¥–∞–∫—Ç–∏—Ä—É–µ–º —Ç–µ–∫—Å—Ç, —á—Ç–æ–±—ã –ø–æ–∫–∞–∑–∞—Ç—å, —á—Ç–æ –≤—Ä–µ–º—è –≤—ã—à–ª–æ
                chat_id=chat_id,
                message_id=message_id_of_this_question,
                text=f"<b>–†–∞—É–Ω–¥ {question_index + 1} - –í–†–ï–ú–Ø –í–´–®–õ–û!</b>\n\n{statement_text}\n\n<i>–°–µ–π—á–∞—Å –ü–æ–ø–∏–∑–¥—è–∫–∞ –æ–±—ä—è–≤–∏—Ç –≤–µ—Ä–¥–∏–∫—Ç...</i>",
                parse_mode='HTML',
                reply_markup=None # –£–±–∏—Ä–∞–µ–º –∫–Ω–æ–ø–∫–∏
            )
        except Exception as e_edit_q:
            logger.warning(f"–ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç—Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å/—É–±—Ä–∞—Ç—å –∫–Ω–æ–ø–∫–∏ —É –≤–æ–ø—Ä–æ—Å–∞ {question_index} –±–∞—Ç—Ç–ª–∞ {game_id}: {e_edit_q}")

    # 3. –ü–æ–¥—Å—á–µ—Ç –æ—á–∫–æ–≤ –∑–∞ —ç—Ç–æ—Ç —Ä–∞—É–Ω–¥ –∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ –æ–±—â–µ–≥–æ —Å—á–µ—Ç–∞ —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤
    updated_participants_data = battle.get("participants", {})
    round_results_log = [] # –î–ª—è –ª–æ–≥–æ–≤ –∏, –≤–æ–∑–º–æ–∂–Ω–æ, –¥–ª—è –ø—Ä–æ–º–ø—Ç–∞ –ò–ò

    for user_id_str, participant_info in updated_participants_data.items():
        user_id_int = int(user_id_str) # –ö–ª—é—á–∏ –≤ MongoDB —Å–ª–æ–≤–∞—Ä—è—Ö —á–∞—Å—Ç–æ —Å—Ç—Ä–æ–∫–∏
        user_answer_record = user_answers_for_this_q.get(str(user_id_int)) # –ò –∑–¥–µ—Å—å —Ç–æ–∂–µ –∏—â–µ–º –ø–æ —Å—Ç—Ä–æ–∫–µ

        if user_answer_record:
            user_answered_correctly = (user_answer_record["answer_bool"] == correct_answer_is_truth)
            if user_answered_correctly:
                participant_info["score"] = participant_info.get("score", 0) + 1
                round_results_log.append(f"{participant_info.get('name', '–ê–Ω–æ–Ω')} —É–≥–∞–¥–∞–ª(–∞)")
            else:
                round_results_log.append(f"{participant_info.get('name', '–ê–Ω–æ–Ω')} –æ–±–æ—Å—Ä–∞–ª—Å—è(–ª–∞—Å—å)")
            # –ó–∞–ø–∏—Å—ã–≤–∞–µ–º —Å–∞–º —Ñ–∞–∫—Ç –æ—Ç–≤–µ—Ç–∞ (–ø—Ä–∞–≤–∏–ª—å–Ω–æ/–Ω–µ–ø—Ä–∞–≤–∏–ª—å–Ω–æ) –≤ –º–∞—Å—Å–∏–≤ –æ—Ç–≤–µ—Ç–æ–≤ —É—á–∞—Å—Ç–Ω–∏–∫–∞
            if "answers" not in participant_info or not isinstance(participant_info["answers"], list) or len(participant_info["answers"]) != TOS_BATTLE_NUM_QUESTIONS:
                participant_info["answers"] = [None] * TOS_BATTLE_NUM_QUESTIONS # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º, –µ—Å–ª–∏ –Ω—É–∂–Ω–æ
            participant_info["answers"][question_index] = user_answered_correctly # True –µ—Å–ª–∏ —É–≥–∞–¥–∞–ª, False –µ—Å–ª–∏ –Ω–µ—Ç
        else:
            round_results_log.append(f"{participant_info.get('name', '–ê–Ω–æ–Ω')} –ø—Ä–æ–µ–±–∞–ª(–∞) –º–æ–º–µ–Ω—Ç –∏ –Ω–µ –æ—Ç–≤–µ—Ç–∏–ª(–∞)")
            # –¢–∞–∫–∂–µ –∑–∞–ø–∏—Å—ã–≤–∞–µ–º None –∏–ª–∏ —Å–ø–µ—Ü–∏–∞–ª—å–Ω–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ –¥–ª—è –Ω–µ–æ—Ç–≤–µ—Ç–∏–≤—à–∏—Ö
            if "answers" not in participant_info or not isinstance(participant_info["answers"], list) or len(participant_info["answers"]) != TOS_BATTLE_NUM_QUESTIONS:
                participant_info["answers"] = [None] * TOS_BATTLE_NUM_QUESTIONS
            participant_info["answers"][question_index] = "no_answer" # –ò–ª–∏ None

    # –û–±–Ω–æ–≤–ª—è–µ–º –¥–∞–Ω–Ω—ã–µ —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤ (—Å—á–µ—Ç–∞ –∏ –º–∞—Å—Å–∏–≤ –æ—Ç–≤–µ—Ç–æ–≤) –≤ –ë–î
    if updated_participants_data: # –ï—Å–ª–∏ –µ—Å—Ç—å —É—á–∞—Å—Ç–Ω–∏–∫–∏
        await loop.run_in_executor(
            None, lambda: tos_battles_collection.update_one(
                {"_id": battle_doc_id},
                {"$set": {"participants": updated_participants_data}}
            )
        )
    
    # 4. –û–±—ä—è–≤–∏—Ç—å –ø—Ä–∞–≤–∏–ª—å–Ω—ã–π –æ—Ç–≤–µ—Ç –∏ –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π –ü–æ–ø–∏–∑–¥—è–∫–∏
    result_text_q_human = "‚úÖ –≠–¢–û –ë–´–õ–ê –ü–†–ê–í–î–ê!" if correct_answer_is_truth else "‚ùå –ö–û–ù–ï–ß–ù–û –ñ–ï, –≠–¢–û –í–´–°–ï–† –ï–ë–ê–ù–´–ô!"
    
    # –§–æ—Ä–º–∏—Ä—É–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –¥–ª—è –ø—Ä–æ–º–ø—Ç–∞ –ò–ò
    num_participants_in_game = len(updated_participants_data) # –û–±—â–µ–µ —á–∏—Å–ª–æ —Ç–µ—Ö, –∫—Ç–æ –ó–ê–ü–ò–°–ê–ù –≤ –∏–≥—Ä—É
    answered_user_ids_this_round = set(user_answers_for_this_q.keys()) # ID —Ç–µ—Ö, –∫—Ç–æ –æ—Ç–≤–µ—Ç–∏–ª –≤ —ç—Ç–æ–º —Ä–∞—É–Ω–¥–µ
    num_answered_in_round = len(answered_user_ids_this_round)
    num_correct_in_round = sum(1 for uid_str, ans_rec in user_answers_for_this_q.items() if ans_rec["answer_bool"] == correct_answer_is_truth)
    num_wrong_in_round = num_answered_in_round - num_correct_in_round
    
    num_not_answered_this_round = 0
    if num_participants_in_game > 0:
        for p_id_str_active in updated_participants_data.keys():
            if p_id_str_active not in answered_user_ids_this_round:
                num_not_answered_this_round += 1

    round_summary_for_ai = ""
    if num_participants_in_game == 0:
        round_summary_for_ai = "–í –±–∞—Ç—Ç–ª–µ –Ω–µ—Ç —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤. –Ø —á—Ç–æ, —Å–∞–º —Å —Å–æ–±–æ–π –∏–≥—Ä–∞—é, –∫–∞–∫ —à–∏–∑–æ—Ñ—Ä–µ–Ω–∏–∫?"
    elif num_answered_in_round == 0: # –ù–∏–∫—Ç–æ –∏–∑ –∑–∞–ø–∏—Å–∞–≤—à–∏—Ö—Å—è –Ω–µ –æ—Ç–≤–µ—Ç–∏–ª
        round_summary_for_ai = f"–ù–∏ –æ–¥–Ω–∞ –∏–∑ {num_participants_in_game} –∑–∞–ø–∏—Å–∞–≤—à–∏—Ö—Å—è –¥—É—à –Ω–µ —É–¥–æ—Å—É–∂–∏–ª–∞—Å—å –æ—Ç–≤–µ—Ç–∏—Ç—å –≤ —ç—Ç–æ–º —Ä–∞—É–Ω–¥–µ. –ü–æ—Ö–æ–∂–µ, –≤—Å–µ —Å–ª–∏—à–∫–æ–º —Ç—É–ø—ã –∏–ª–∏ –∑–∞–Ω—è—Ç—ã –¥—Ä–æ—á–∫–æ–π."
    elif num_answered_in_round > 0:
        if num_correct_in_round == num_answered_in_round: 
            summary_verb = "—É–≥–∞–¥–∞–ª" if num_correct_in_round == 1 else "—É–≥–∞–¥–∞–ª–∏"
            round_summary_for_ai = f"–ù–µ–≤–µ—Ä–æ—è—Ç–Ω–æ, –Ω–æ —Ñ–∞–∫—Ç! –í—Å–µ {num_correct_in_round} –æ—Ç–≤–µ—Ç–∏–≤—à–∏—Ö {summary_verb}! –õ–∏–±–æ –≤—ã –≤—Å–µ —Ç—É—Ç –í–∞–Ω–≥–∏ –Ω–µ–¥–æ–¥–µ–ª–∞–Ω–Ω—ã–µ, –ª–∏–±–æ –≤–æ–ø—Ä–æ—Å –±—ã–ª –¥–ª—è –¥–µ—Ç—Å–∫–æ–≥–æ —Å–∞–¥–∞."
            if num_not_answered_this_round > 0:
                round_summary_for_ai += f" –ê –≤–æ—Ç {num_not_answered_this_round} —Å—Å—ã–∫—É–Ω–æ–≤ —Ç–∞–∫ –∏ –Ω–µ —Ä–∏—Å–∫–Ω—É–ª–∏ —Å–≤–æ–µ–π —Ä–µ–ø—É—Ç–∞—Ü–∏–µ–π (–∫–æ—Ç–æ—Ä–æ–π –∏ —Ç–∞–∫ –Ω–µ—Ç)."
        elif num_wrong_in_round == num_answered_in_round: 
             summary_verb_wrong = "–æ–±–æ—Å—Ä–∞–ª—Å—è" if num_wrong_in_round == 1 else "–æ–±–æ—Å—Ä–∞–ª–∏—Å—å"
             round_summary_for_ai = f"–≠—Ç–æ —Ñ–∏–∞—Å–∫–æ, –±—Ä–∞—Ç–∞–Ω—ã! –í—Å–µ {num_wrong_in_round} –æ—Ç–≤–µ—Ç–∏–≤—à–∏—Ö —Å–∏–Ω—Ö—Ä–æ–Ω–Ω–æ {summary_verb_wrong}! –ü–æ–∑–¥—Ä–∞–≤–ª—è—é, –≤—ã –¥–æ—Å—Ç–∏–≥–ª–∏ –¥–Ω–∞ –∫–æ–ª–ª–µ–∫—Ç–∏–≤–Ω–æ–π —Ç—É–ø–æ—Å—Ç–∏!"
             if num_not_answered_this_round > 0:
                round_summary_for_ai += f" {num_not_answered_this_round} –ø—Ä–æ–µ–±–∞–ª–∏ –º–æ–º–µ–Ω—Ç –∏ –ø—Ä–∞–≤–∏–ª—å–Ω–æ —Å–¥–µ–ª–∞–ª–∏, –∞ —Ç–æ –±—ã —Ç–æ–∂–µ –≤–ª—è–ø–∞–ª–∏—Å—å –≤ —ç—Ç–æ –¥–µ—Ä—å–º–æ."
        else: # –ï—Å—Ç—å –∏ —Ç–µ, –∏ –¥—Ä—É–≥–∏–µ
            round_summary_for_ai = f"–ò–∑ —Ç–µ—Ö, –∫—Ç–æ –Ω–µ –∑–∞—Å—Å–∞–ª: {num_correct_in_round} –æ–∫–∞–∑–∞–ª–∏—Å—å –ø—Ä–∞–≤—ã (–∏–ª–∏ –∏–º –ø–æ–≤–µ–∑–ª–æ), –∞ {num_wrong_in_round} –∂–∏–¥–∫–æ –ø—ë—Ä–Ω—É–ª–∏ –≤ –ª—É–∂—É."
            if num_not_answered_this_round > 0:
                round_summary_for_ai += f" –ò –µ—â–µ {num_not_answered_this_round} —Ç–æ—Ä–º–æ–∑–æ–≤ –ø—Ä–æ—Å—Ç–æ –ø—Ä–æ–º–æ–ª—á–∞–ª–∏, –≤–∏–¥–∏–º–æ, –æ–±–¥—É–º—ã–≤–∞—è —Å–º—ã—Å–ª –±—ã—Ç–∏—è."


    round_comment_prompt = (
        f"–¢—ã - –ü–æ–ø–∏–∑–¥—è–∫–∞, –≤–µ–¥—É—â–∏–π –∏–Ω—Ç–µ–ª–ª–µ–∫—Ç—É–∞–ª—å–Ω–æ–π –±–∏—Ç–≤—ã '–ü—Ä–∞–≤–¥–∞ –∏–ª–∏ –í—ã—Å–µ—Ä'. –¢–æ–ª—å–∫–æ —á—Ç–æ –∑–∞–∫–æ–Ω—á–∏–ª—Å—è —Ä–∞—É–Ω–¥.\n"
        f"–£—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ –±—ã–ª–æ: ¬´{statement_text}¬ª\n"
        f"–ü—Ä–∞–≤–∏–ª—å–Ω—ã–π –æ—Ç–≤–µ—Ç: {result_text_q_human}\n"
        f"–ö—Ä–∞—Ç–∫–∞—è —Å–≤–æ–¥–∫–∞ –ø–æ –æ—Ç–≤–µ—Ç–∞–º: {round_summary_for_ai}\n\n"
        f"–ù–∞–ø–∏—à–∏ –∫–æ—Ä–æ—Ç–∫–∏–π (2-3 –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏—è), —Å–∞—Ä–∫–∞—Å—Ç–∏—á–Ω—ã–π –∏ –º–∞—Ç–µ—Ä–Ω—ã–π –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π –∫ –∏—Ç–æ–≥–∞–º –≠–¢–û–ì–û –†–ê–£–ù–î–ê. "
        f"–£—á–∏—Ç—ã–≤–∞–π, –≤—Å–µ –ª–∏ —É–≥–∞–¥–∞–ª–∏, –∏–ª–∏ –±—ã–ª–∏ –æ—à–∏–±–∫–∏, –∏–ª–∏ –∫—Ç–æ-—Ç–æ –Ω–µ –æ—Ç–≤–µ—Ç–∏–ª. "
        f"–ù–∞—á–∏–Ω–∞–π —Å `üóø –ü–æ –∏—Ç–æ–≥–∞–º —Ä–∞—É–Ω–¥–∞:`"
    )
    ai_round_comment = await _call_ionet_api(
        messages=[{"role": "user", "content": round_comment_prompt}],
        model_id=IONET_TEXT_MODEL_ID, max_tokens=180, temperature=0.8
    ) or "üóø –ù—É —á—Ç–æ, –∫—Ç–æ-—Ç–æ —É–≥–∞–¥–∞–ª, –∫—Ç–æ-—Ç–æ –æ–±–æ—Å—Ä–∞–ª—Å—è. –û–±—ã—á–Ω–æ–µ –¥–µ–ª–æ –≤ —ç—Ç–æ–º —Ü–∏—Ä–∫–µ."
    if not ai_round_comment.startswith("üóø"): ai_round_comment = "üóø " + ai_round_comment

    round_reveal_message = (
        f"<b>–ò—Ç–æ–≥–∏ –†–∞—É–Ω–¥–∞ {question_index + 1}!</b>\n\n"
        f"–£—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ –±—ã–ª–æ: ¬´<i>{statement_text}</i>¬ª\n"
        f"–ü—Ä–∞–≤–∏–ª—å–Ω—ã–π –≤–µ—Ä–¥–∏–∫—Ç –ü–æ–ø–∏–∑–¥—è–∫–∏: <b>{result_text_q_human}</b>\n\n"
        f"{ai_round_comment}"
    )
    await context.bot.send_message(chat_id, text=round_reveal_message, parse_mode='HTML')
    await asyncio.sleep(1.0) # –ü–∞—É–∑–∞ –ø–µ—Ä–µ–¥ —Å–ª–µ–¥—É—é—â–∏–º –≤–æ–ø—Ä–æ—Å–æ–º –∏–ª–∏ –∏—Ç–æ–≥–∞–º–∏

    # 5. –ü–µ—Ä–µ–π—Ç–∏ –∫ —Å–ª–µ–¥—É—é—â–µ–º—É –≤–æ–ø—Ä–æ—Å—É –∏–ª–∏ –∑–∞–≤–µ—Ä—à–∏—Ç—å –∏–≥—Ä—É
    next_question_index = question_index + 1
    if next_question_index < TOS_BATTLE_NUM_QUESTIONS:
        await loop.run_in_executor(
            None, lambda: tos_battles_collection.update_one(
                {"_id": battle_doc_id},
                {"$set": {"current_question_index": next_question_index}}
            )
        )
        # –ü–æ–ª—É—á–∞–µ–º –æ–±–Ω–æ–≤–ª–µ–Ω–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ –±–∞—Ç—Ç–ª–∞ (—Å –æ–±–Ω–æ–≤–ª–µ–Ω–Ω—ã–º–∏ –æ—á–∫–∞–º–∏ –∏ –Ω–æ–≤—ã–º current_question_index)
        battle_for_next_q = await loop.run_in_executor(None, lambda: tos_battles_collection.find_one({"_id": battle_doc_id}))
        if battle_for_next_q:
            await _ask_next_tos_battle_question(context, battle_for_next_q)
        else:
            logger.error(f"–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –æ–±–Ω–æ–≤–ª–µ–Ω–Ω—ã–π –±–∞—Ç—Ç–ª {battle_doc_id} –¥–ª—è –≤–æ–ø—Ä–æ—Å–∞ {next_question_index}.")
            await context.bot.send_message(chat_id, "üóø –ü–∏–∑–¥–µ—Ü, —è –ø–æ—Ç–µ—Ä—è–ª –Ω–∏—Ç—å –∏–≥—Ä—ã –ø–æ—Å–ª–µ —ç—Ç–æ–≥–æ —Ä–∞—É–Ω–¥–∞. –ü—Ä–∏–¥–µ—Ç—Å—è –∑–∞–∫–æ–Ω—á–∏—Ç—å.")
            # –ü–µ—Ä–µ–¥–∞–µ–º battle, –∫–æ—Ç–æ—Ä—ã–π —É –Ω–∞—Å –µ—Å—Ç—å, –Ω–æ –æ–Ω –º–æ–∂–µ—Ç –±—ã—Ç—å –Ω–µ –¥–æ –∫–æ–Ω—Ü–∞ –æ–±–Ω–æ–≤–ª–µ–Ω
            await _end_tos_battle(context, battle, error_occurred=True, error_message="–ü–æ—Ç–µ—Ä—è –¥–∞–Ω–Ω—ã—Ö –±–∞—Ç—Ç–ª–∞ –ø—Ä–∏ –ø–µ—Ä–µ—Ö–æ–¥–µ –∫ —Å–ª–µ–¥. –≤–æ–ø—Ä–æ—Å—É")
    else:
        logger.info(f"–í—Å–µ {TOS_BATTLE_NUM_QUESTIONS} –≤–æ–ø—Ä–æ—Å–æ–≤ –±–∞—Ç—Ç–ª–∞ {game_id} –∑–∞–¥–∞–Ω—ã –∏ —Ä–∞—Å–∫—Ä—ã—Ç—ã. –ó–∞–≤–µ—Ä—à–∞–µ–º –∏–≥—Ä—É.")
        # –ü–µ—Ä–µ–¥–∞–µ–º battle (–∫–æ—Ç–æ—Ä—ã–π —Å–æ–¥–µ—Ä–∂–∏—Ç –æ–±–Ω–æ–≤–ª–µ–Ω–Ω—ã–µ –æ—á–∫–∏ –ø–æ—Å–ª–µ –ø–æ—Å–ª–µ–¥–Ω–µ–≥–æ —Ä–∞—É–Ω–¥–∞)
        await _end_tos_battle(context, battle)

async def _end_tos_battle(context: ContextTypes.DEFAULT_TYPE, battle_data: dict, 
                          error_occurred: bool = False, error_message: str = "") -> None:
    loop = asyncio.get_running_loop()
    chat_id = battle_data["chat_id"]
    game_id = battle_data["game_id"] # message_id_recruitment
    battle_doc_id = battle_data["_id"]

     # –ü–æ–ø—ã—Ç–∫–∞ –æ—Ç–∫—Ä–µ–ø–∏—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ –æ –Ω–∞–±–æ—Ä–µ, –µ—Å–ª–∏ –æ–Ω–æ –µ—â–µ –∑–∞–∫—Ä–µ–ø–ª–µ–Ω–æ
    try:
        # –ü—Ä–æ–≤–µ—Ä–∏—Ç—å, —è–≤–ª—è–µ—Ç—Å—è –ª–∏ —ç—Ç–æ —Å–æ–æ–±—â–µ–Ω–∏–µ —Ç–µ–∫—É—â–∏–º –∑–∞–∫—Ä–µ–ø–ª–µ–Ω–Ω—ã–º, –º–æ–∂–µ—Ç –±—ã—Ç—å —Å–ª–æ–∂–Ω–æ –±–µ–∑ –¥–æ–ø. –≤—ã–∑–æ–≤–æ–≤
        # –ü–æ—ç—Ç–æ–º—É –ø—Ä–æ—Å—Ç–æ –ø—ã—Ç–∞–µ–º—Å—è –æ—Ç–∫—Ä–µ–ø–∏—Ç—å –ø–æ ID. –ï—Å–ª–∏ –æ–Ω–æ –Ω–µ –∑–∞–∫—Ä–µ–ø–ª–µ–Ω–æ, –±—É–¥–µ—Ç –æ—à–∏–±–∫–∞, –∫–æ—Ç–æ—Ä—É—é –º—ã –ª–æ–≤–∏–º.
        await context.bot.unpin_chat_message(chat_id=chat_id, message_id=game_id_recruitment_msg)
        logger.info(f"–°–æ–æ–±—â–µ–Ω–∏–µ –æ –Ω–∞–±–æ—Ä–µ {game_id_recruitment_msg} –æ—Ç–∫—Ä–µ–ø–ª–µ–Ω–æ –ø—Ä–∏ –∑–∞–≤–µ—Ä—à–µ–Ω–∏–∏ –±–∞—Ç—Ç–ª–∞.")
    except telegram.error.BadRequest as e_unpin_final:
        if "message to unpin not found" not in str(e_unpin_final).lower() and \
           "message is not pinned" not in str(e_unpin_final).lower(): # –ò–≥–Ω–æ—Ä–∏—Ä—É–µ–º, –µ—Å–ª–∏ —É–∂–µ –æ—Ç–∫—Ä–µ–ø–ª–µ–Ω–æ –∏–ª–∏ –Ω–µ –±—ã–ª–æ –∑–∞–∫—Ä–µ–ø–ª–µ–Ω–æ
            logger.warning(f"–ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–∫—Ä–µ–ø–∏—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ –æ –Ω–∞–±–æ—Ä–µ {game_id_recruitment_msg} –ø—Ä–∏ –∑–∞–≤–µ—Ä—à–µ–Ω–∏–∏: {e_unpin_final}")
    except Exception: pass # –ò–≥–Ω–æ—Ä–∏—Ä—É–µ–º –¥—Ä—É–≥–∏–µ –æ—à–∏–±–∫–∏ –æ—Ç–∫—Ä–µ–ø–ª–µ–Ω–∏—è –∑–¥–µ—Å—å

    logger.info(f"–ó–∞–≤–µ—Ä—à–µ–Ω–∏–µ –±–∞—Ç—Ç–ª–∞ {game_id} –≤ —á–∞—Ç–µ {chat_id}. –û—à–∏–±–∫–∞ –≤–æ –≤—Ä–µ–º—è –∏–≥—Ä—ã: {error_occurred} ('{error_message}')")

    now_for_final_finish_end = datetime.datetime.now(datetime.timezone.utc)
    await loop.run_in_executor(
        None, lambda: tos_battles_collection.update_one(
            {"_id": battle_doc_id},
            {"$set": {"status": "finished", "finished_at": now_for_final_finish_end, "prizes_awarded_info": {}}}, # –î–æ–±–∞–≤–∏–º –ø–æ–ª–µ –¥–ª—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ –≤—ã–¥–∞–Ω–Ω—ã—Ö –ø—Ä–∏–∑–∞—Ö
            upsert=False 
        )
    )
    
    await loop.run_in_executor(
        None, lambda: chat_activity_collection.update_one(
            {"chat_id": chat_id},
            {"$set": {"last_tos_battle_end_time": now_for_final_finish_end}},
            upsert=True
        )
    )
    logger.info(f"–ë–∞—Ç—Ç–ª {game_id} –∑–∞–≤–µ—Ä—à–µ–Ω (—Å—Ç–∞—Ç—É—Å –æ–±–Ω–æ–≤–ª–µ–Ω). –ö—É–ª–¥–∞—É–Ω –¥–ª—è —á–∞—Ç–∞ –æ–±–Ω–æ–≤–ª–µ–Ω.")

    if error_occurred:
        message_text_final_err = (f"üèÅ <b>–ë–∞—Ç—Ç–ª '–ü—Ä–∞–≤–¥–∞ –∏–ª–∏ –í—ã—Å–µ—Ä' (ID: {game_id}) –ü–†–ï–†–í–ê–ù –∏–∑-–∑–∞ —Ç–µ—Ö–Ω–∏—á–µ—Å–∫–æ–π —à–æ–∫–æ–ª–∞–¥–∫–∏ —É –ü–æ–ø–∏–∑–¥—è–∫–∏!</b> üèÅ\n\n"
                                  f"–ü—Ä–∏—á–∏–Ω–∞: {error_message or '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π –ø–∏–∑–¥–µ—Ü'}\n\n"
                                  f"üóø –ò–∑–≤–∏–Ω—è–π—Ç–µ, –¥–æ–ª–±–æ–µ–±—ã, –Ω–æ —Å–µ–≥–æ–¥–Ω—è –±–µ–∑ –ø–æ–±–µ–¥–∏—Ç–µ–ª–µ–π –∏ –ø—Ä–∏–∑–æ–≤. –ú–æ–∂–µ—Ç–µ –ø–æ–π—Ç–∏ –Ω–∞—Ö—É–π.")
        await context.bot.send_message(chat_id, text=message_text_final_err, parse_mode='HTML', reply_to_message_id=game_id)
        return

    participants_final = battle_data.get("participants", {})
    if not participants_final:
        await context.bot.send_message(chat_id, "üèÅ –ë–∞—Ç—Ç–ª –∑–∞–≤–µ—Ä—à–µ–Ω, –Ω–æ –Ω–∏–∫—Ç–æ –Ω–µ —É—á–∞—Å—Ç–≤–æ–≤–∞–ª. –ö–∞–∫–∏–µ –∂–µ –≤—ã —Å–∫—É—á–Ω—ã–µ.", reply_to_message_id=game_id)
        return

    sorted_participants = sorted(participants_final.items(), key=lambda item: item[1].get("score", 0), reverse=True)

    results_table_lines = ["<b>üèÜ –ò—Ç–æ–≥–æ–≤–∞—è —Ç–∞–±–ª–∏—Ü–∞ –ª–∏–¥–µ—Ä–æ–≤ (–∏–ª–∏ –¥–æ–ª–±–æ–µ–±–æ–≤):</b>"]
    winners = []
    max_score = 0
    if sorted_participants:
        max_score = sorted_participants[0][1].get("score", 0)

    if max_score <= 0 : 
        results_table_lines.append("\n–ù–∏–∫—Ç–æ –Ω–µ –Ω–∞–±—Ä–∞–ª –ø–æ–ª–æ–∂–∏—Ç–µ–ª—å–Ω—ã—Ö –æ—á–∫–æ–≤. –ü–æ–∑–æ—Ä–∏—â–µ!")
    else:
        for i, (user_id_str, p_data) in enumerate(sorted_participants):
            name = p_data.get("name", f"–ê–Ω–æ–Ω-{user_id_str}")
            score = p_data.get("score", 0)
            medal = ""
            if score == max_score : medal = "ü•á " 
            elif i == 1 and score > 0: medal = "ü•à " # –î–æ–±–∞–≤–∏–ª score > 0 –¥–ª—è –º–µ–¥–∞–ª–µ–π
            elif i == 2 and score > 0: medal = "ü•â "
            else: medal = f"{i+1}. " if score > 0 else f"{i+1}. (–¥–Ω–æ) " # –£—Ç–æ—á–Ω–µ–Ω–∏–µ –¥–ª—è —Ç–µ—Ö, –∫—Ç–æ —Å –Ω—É–ª–µ–º –∏–ª–∏ –º–µ–Ω—å—à–µ
            results_table_lines.append(f"{medal}{name}: <b>{score}</b> –æ—á–∫.")
            if score == max_score:
                winners.append({"id": int(user_id_str), "name": name, "score": score})
    
    # "–ì–ª–∞–≤–Ω—ã–π –æ–±–æ—Å—Ä–∞–º—Å" (–ª–æ–≥–∏–∫–∞ –∫–∞–∫ –±—ã–ª–∞)
    worst_score = float('inf')
    most_wrong_answers = -1
    biggest_losers_by_score = []
    biggest_losers_by_wrong_answers = []
    has_actual_answers = False 

    for user_id_str_loser, p_data_loser in participants_final.items():
        score_loser = p_data_loser.get("score", 0)
        answers_array_loser = p_data_loser.get("answers", [None] * TOS_BATTLE_NUM_QUESTIONS)
        wrong_answers_count_loser = sum(1 for ans_l in answers_array_loser if ans_l is False) 
        if any(ans_l is not None and ans_l != "no_answer" for ans_l in answers_array_loser):
            has_actual_answers = True

        if score_loser < worst_score:
            worst_score = score_loser
            biggest_losers_by_score = [{"name": p_data_loser.get("name", f"–ê–Ω–æ–Ω-{user_id_str_loser}"), "score": score_loser}]
        elif score_loser == worst_score:
            biggest_losers_by_score.append({"name": p_data_loser.get("name", f"–ê–Ω–æ–Ω-{user_id_str_loser}"), "score": score_loser})

        if wrong_answers_count_loser > most_wrong_answers:
            most_wrong_answers = wrong_answers_count_loser
            biggest_losers_by_wrong_answers = [{"name": p_data_loser.get("name", f"–ê–Ω–æ–Ω-{user_id_str_loser}"), "wrong_count": wrong_answers_count_loser}]
        elif wrong_answers_count_loser == most_wrong_answers and most_wrong_answers >= 0 :
            biggest_losers_by_wrong_answers.append({"name": p_data_loser.get("name", f"–ê–Ω–æ–Ω-{user_id_str_loser}"), "wrong_count": wrong_answers_count_loser})
            
    loser_nomination_text = ""
    loser_names_wrong_final = "" # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º
    loser_names_score_final = "" # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º

    if has_actual_answers:
        if most_wrong_answers > 0 and biggest_losers_by_wrong_answers:
            loser_names_wrong_final = ", ".join([l["name"] for l in biggest_losers_by_wrong_answers])
            loser_nomination_text = f"\n\nüí© <b>–ì–ª–∞–≤–Ω—ã–π –û–±–æ—Å—Ä–∞–º—Å –ë–∞—Ç—Ç–ª–∞</b> (–±–æ–ª—å—à–µ –≤—Å–µ—Ö –æ—à–∏–±–æ–∫ - {most_wrong_answers}): <b>{loser_names_wrong_final}</b>! –í–∞—à–∏ –±—É—Ä–Ω—ã–µ –æ–≤–∞—Ü–∏–∏ (–Ω–µ—Ç)!"
        elif biggest_losers_by_score and worst_score < max_score and max_score > 0 : # –ü–æ–∫–∞–∑—ã–≤–∞—Ç—å —Ç–æ–ª—å–∫–æ –µ—Å–ª–∏ –µ—Å—Ç—å –ø–æ–±–µ–¥–∏—Ç–µ–ª—å –∏ –∫—Ç–æ-—Ç–æ –æ—Ç—Å—Ç–∞–ª
            loser_names_score_final = ", ".join([l["name"] for l in biggest_losers_by_score])
            loser_nomination_text = f"\n\nüìâ –ê —Ç–∏—Ç—É–ª '–ü–æ—á—Ç–∏ –°–º–æ–≥, –Ω–æ –í—Å–µ –†–∞–≤–Ω–æ –•—É–π–ª–æ' ({worst_score} –æ—á–∫.) –¥–æ—Å—Ç–∞–µ—Ç—Å—è: <b>{loser_names_score_final}</b>!"

    results_message = "\n".join(results_table_lines) + loser_nomination_text

    final_comment_prompt = (
        f"–¢—ã - –ü–æ–ø–∏–∑–¥—è–∫–∞, –≤–µ–¥—É—â–∏–π –∏–Ω—Ç–µ–ª–ª–µ–∫—Ç—É–∞–ª—å–Ω–æ–π –±–∏—Ç–≤—ã '–ü—Ä–∞–≤–¥–∞ –∏–ª–∏ –í—ã—Å–µ—Ä'. –ò–≥—Ä–∞ –æ–∫–æ–Ω—á–µ–Ω–∞.\n"
        f"–ü–æ–±–µ–¥–∏—Ç–µ–ª—å(–∏) (–µ—Å–ª–∏ –µ—Å—Ç—å): {', '.join([w['name'] for w in winners]) if winners else '–ü–æ–±–µ–¥–∏—Ç–µ–ª–µ–π –Ω–µ—Ç (–≤—Å–µ –¥–æ–ª–±–æ–µ–±—ã)'}\n"
        f"–ú–∞–∫—Å–∏–º–∞–ª—å–Ω—ã–π —Å—á–µ—Ç: {max_score if winners else '0 (–ø–æ–∑–æ—Ä–∏—â–µ)'}\n"
        f"–ì–ª–∞–≤–Ω—ã–π –æ–±–æ—Å—Ä–∞–º—Å (–µ—Å–ª–∏ –µ—Å—Ç—å): {loser_names_wrong_final if loser_names_wrong_final else (loser_names_score_final if loser_names_score_final else '–í—Å–µ –±—ã–ª–∏ –æ–¥–∏–Ω–∞–∫–æ–≤–æ —Ç—É–ø—ã –∏–ª–∏ –≥–µ–Ω–∏–∞–ª—å–Ω—ã, —Ö—É–π —Ä–∞–∑–±–µ—Ä–µ—à—å')}\n\n"
        f"–ù–∞–ø–∏—à–∏ –∑–∞–∂–∏–≥–∞—Ç–µ–ª—å–Ω—ã–π, —Å–∞—Ä–∫–∞—Å—Ç–∏—á–Ω—ã–π –∏ –º–∞—Ç–µ—Ä–Ω—ã–π –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π –ø–æ –∏—Ç–æ–≥–∞–º –≤—Å–µ–≥–æ –ë–∞—Ç—Ç–ª–∞. "
        f"–¢–≤–æ–π –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å **–û–ß–ï–ù–¨ –ö–û–†–û–¢–ö–ò–ú –ò –ï–ú–ö–ò–ú (–°–¢–†–û–ì–û 1-2 –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏—è, –ø—Ä–∏–º–µ—Ä–Ω–æ 150-250 —Å–∏–º–≤–æ–ª–æ–≤)**, —á—Ç–æ–±—ã –æ–Ω —Ç–æ—á–Ω–æ –≤–ª–µ–∑ –≤ –∏—Ç–æ–≥–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ. " # <<<--- –ò–ó–ú–ï–ù–ï–ù–û
        f"–ü–æ–∑–¥—Ä–∞–≤—å –ø–æ–±–µ–¥–∏—Ç–µ–ª–µ–π —Ç–∞–∫, —á—Ç–æ–±—ã –æ–Ω–∏ –ø–æ—á—É–≤—Å—Ç–≤–æ–≤–∞–ª–∏ —Å–µ–±—è –∫–æ—Ä–æ–ª—è–º–∏ –≥–æ–≤–Ω–∞. –†–∞–∑—ä–µ–±–∏ –ø—Ä–æ–∏–≥—Ä–∞–≤—à–∏—Ö. "
        f"–ù–∞—á–∏–Ω–∞–π —Å `üóø –ù—É —á—Ç–æ, –∫–æ–Ω—á–µ–Ω–Ω—ã–µ, –≤–æ—Ç –∏ –∏—Ç–æ–≥–∏ –≤–∞—à–µ–≥–æ –∏–Ω—Ç–µ–ª–ª–µ–∫—Ç—É–∞–ª—å–Ω–æ–≥–æ –≤—ã—Å–µ—Ä–∞:`"
    )
    ai_final_comment = await _call_ionet_api(
        messages=[{"role": "user", "content": final_comment_prompt}],
        model_id=IONET_TEXT_MODEL_ID, 
        max_tokens=80, # <<<--- –£–ú–ï–ù–¨–®–ï–ù–û (150-250 —Å–∏–º–≤–æ–ª–æ–≤ —ç—Ç–æ –ø—Ä–∏–º–µ—Ä–Ω–æ 40-70 —Ç–æ–∫–µ–Ω–æ–≤)
        temperature=0.85
    ) or "üóø –ò–≥—Ä–∞ –æ–∫–æ–Ω—á–µ–Ω–∞. –ö—Ç–æ –≤—ã–∏–≥—Ä–∞–ª - –º–æ–ª–æ–¥–µ—Ü. –ö—Ç–æ –ø—Ä–æ–∏–≥—Ä–∞–ª - —Å–æ—Å–∏ —Ö—É–π. –í—Å–µ –ø—Ä–æ—Å—Ç–æ."
    if not ai_final_comment.startswith("üóø"): ai_final_comment = "üóø " + ai_final_comment

    full_final_message_text = f"üèÅ <b>–ë–∞—Ç—Ç–ª '–ü—Ä–∞–≤–¥–∞ –∏–ª–∏ –í—ã—Å–µ—Ä' (ID: {game_id}) –û–ö–û–ù–ß–ï–ù!</b> üèÅ\n\n{results_message}\n\n{ai_final_comment}"
    
    # –°–Ω–∞—á–∞–ª–∞ —Ñ–æ—Ä–º–∏—Ä—É–µ–º —á–∞—Å—Ç—å —Å —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞–º–∏
    results_part_text = f"üèÅ <b>–ë–∞—Ç—Ç–ª '–ü—Ä–∞–≤–¥–∞ –∏–ª–∏ –í—ã—Å–µ—Ä' (ID: {game_id}) –û–ö–û–ù–ß–ï–ù!</b> üèÅ\n\n{results_message}"
    # –ö–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π –ò–ò
    ai_comment_part_text = ai_final_comment if ai_final_comment.strip() else ""

    message_parts_final_to_send = []

    # –ü—Ä–æ–±—É–µ–º –æ—Ç–ø—Ä–∞–≤–∏—Ç—å –≤—Å–µ –≤–º–µ—Å—Ç–µ, –µ—Å–ª–∏ –Ω–µ —Å–ª–∏—à–∫–æ–º –¥–ª–∏–Ω–Ω–æ
    if len(results_part_text + "\n\n" + ai_comment_part_text) <= MAX_TELEGRAM_MESSAGE_LENGTH:
        message_parts_final_to_send.append(results_part_text + ("\n\n" + ai_comment_part_text if ai_comment_part_text else ""))
    else:
        # –ï—Å–ª–∏ —Å–ª–∏—à–∫–æ–º –¥–ª–∏–Ω–Ω–æ, –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º –ø–æ —á–∞—Å—Ç—è–º
        if results_part_text.strip():
            # –ï—Å–ª–∏ —Å–∞–º–∞ —Ç–∞–±–ª–∏—Ü–∞ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤ —Å–ª–∏—à–∫–æ–º –¥–ª–∏–Ω–Ω–∞—è, –µ–µ —Ç–æ–∂–µ –Ω–∞–¥–æ –±–∏—Ç—å
            if len(results_part_text) > MAX_TELEGRAM_MESSAGE_LENGTH:
                logger.warning(f"–¢–∞–±–ª–∏—Ü–∞ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤ –¥–ª—è –±–∞—Ç—Ç–ª–∞ {game_id} —Å–ª–∏—à–∫–æ–º –¥–ª–∏–Ω–Ω–∞—è ({len(results_part_text)}), –±—É–¥–µ—Ç –æ–±—Ä–µ–∑–∞–Ω–∞ –∏–ª–∏ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–∞ —á–∞—Å—Ç—è–º–∏ –≥—Ä—É–±–æ.")
                # –ü—Ä–∏–º–∏—Ç–∏–≤–Ω–∞—è —Ä–∞–∑–±–∏–≤–∫–∞ –¥–ª—è —Ç–∞–±–ª–∏—Ü—ã, –µ—Å–ª–∏ –æ—á–µ–Ω—å –Ω–∞–¥–æ
                temp_results_parts = split_long_message_primitive(results_part_text, MAX_TELEGRAM_MESSAGE_LENGTH - 50) # MAX_TELEGRAM_MESSAGE_LENGTH –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∞ –≥–ª–æ–±–∞–ª—å–Ω–æ
                message_parts_final_to_send.extend(temp_results_parts)
            else:
                message_parts_final_to_send.append(results_part_text)
        
        if ai_comment_part_text.strip():
            # –ï—Å–ª–∏ –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π –ò–ò —Å–ª–∏—à–∫–æ–º –¥–ª–∏–Ω–Ω—ã–π, –µ–≥–æ —Ç–æ–∂–µ –Ω–∞–¥–æ –±–∏—Ç—å
            if len(ai_comment_part_text) > MAX_TELEGRAM_MESSAGE_LENGTH:
                logger.warning(f"–ö–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π –ò–ò –¥–ª—è –±–∞—Ç—Ç–ª–∞ {game_id} —Å–ª–∏—à–∫–æ–º –¥–ª–∏–Ω–Ω—ã–π ({len(ai_comment_part_text)}), –±—É–¥–µ—Ç –æ–±—Ä–µ–∑–∞–Ω –∏–ª–∏ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω —á–∞—Å—Ç—è–º–∏ –≥—Ä—É–±–æ.")
                temp_ai_parts = split_long_message_primitive(ai_comment_part_text, MAX_TELEGRAM_MESSAGE_LENGTH - 50)
                message_parts_final_to_send.extend(temp_ai_parts)
            else:
                message_parts_final_to_send.append(ai_comment_part_text)

    for part_msg_final_send_val in message_parts_final_to_send:
        if part_msg_final_send_val.strip():
            await context.bot.send_message(chat_id, text=part_msg_final_send_val, parse_mode='HTML', reply_to_message_id=game_id)
            await asyncio.sleep(0.3)

    # --- –ù–û–í–ê–Ø –õ–û–ì–ò–ö–ê –ù–ê–ß–ò–°–õ–ï–ù–ò–Ø –ü–†–ò–ó–ê ---
    prizes_awarded_info_dict = {} # –î–ª—è –∑–∞–ø–∏—Å–∏ –≤ –ë–î –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ –≤—ã–¥–∞–Ω–Ω—ã—Ö –ø—Ä–∏–∑–∞—Ö

    if winners: # –ï—Å–ª–∏ –µ—Å—Ç—å –ø–æ–±–µ–¥–∏—Ç–µ–ª–∏ (max_score > 0)
        num_winners = len(winners)
        prize_notifications = [f"üèÜ <b>–ù–∞–≥—Ä–∞–∂–¥–µ–Ω–∏–µ –ø–æ–±–µ–¥–∏—Ç–µ–ª–µ–π –ë–∞—Ç—Ç–ª–∞ (ID: {game_id}):</b>"]

        if num_winners == 1:
            winner_obj_single = winners[0]
            winner_id_s = winner_obj_single["id"]
            winner_name_s = winner_obj_single["name"]
            
            user_profile_s = await get_user_profile_data(User(id=winner_id_s, first_name=winner_name_s, is_bot=False))
            winner_display_name_s = user_profile_s.get("display_name", winner_name_s)

            # –ù–∞—á–∏—Å–ª—è–µ–º +5—Å–º –∫ –ø–∏—Å—é–Ω—É
            penis_stat_s = await loop.run_in_executor(None, lambda: penis_stats_collection.find_one({"user_id": winner_id_s, "chat_id": chat_id}))
            current_penis_s = penis_stat_s.get("penis_size", 0) if penis_stat_s else 0
            new_penis_s = current_penis_s + 5 # TOS_BATTLE_PENIS_REWARD_SINGLE = 5
            await loop.run_in_executor(None, lambda: penis_stats_collection.update_one(
                {"user_id": winner_id_s, "chat_id": chat_id},
                {"$set": {"penis_size": new_penis_s, "user_display_name": winner_display_name_s}}, upsert=True
            ))
            prize_notifications.append(f"üçÜ –ü–∏—Å—é–Ω –µ–¥–∏–Ω—Å—Ç–≤–µ–Ω–Ω–æ–≥–æ —á–µ–º–ø–∏–æ–Ω–∞ <b>{winner_display_name_s}</b> –≤—ã—Ä–æ—Å –Ω–∞ <b>5—Å–º</b> –∏ —Ç–µ–ø–µ—Ä—å —Ä–∞–≤–µ–Ω <b>{new_penis_s}—Å–º</b>!")
            # TODO: –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞ –Ω–æ–≤–æ–µ –ø–∏—Å–µ—á–Ω–æ–µ –∑–≤–∞–Ω–∏–µ
            
            # –ù–∞—á–∏—Å–ª—è–µ–º +0.3 –∫ —Å–∏—Å—å–∫–∞–º
            tits_stat_s = await loop.run_in_executor(None, lambda: tits_stats_collection.find_one({"user_id": winner_id_s, "chat_id": chat_id}))
            current_tits_s = float(tits_stat_s.get("tits_size", 0.0)) if tits_stat_s else 0.0
            new_tits_s = round(current_tits_s + 0.3, 1) # TOS_BATTLE_TITS_REWARD_SINGLE = 0.3
            await loop.run_in_executor(None, lambda: tits_stats_collection.update_one(
                {"user_id": winner_id_s, "chat_id": chat_id},
                {"$set": {"tits_size": new_tits_s, "user_display_name": winner_display_name_s}}, upsert=True
            ))
            prize_notifications.append(f"üçà –°–∏—Å—å–∫–∏ <b>{winner_display_name_s}</b> –ø–æ–¥—Ä–æ—Å–ª–∏ –Ω–∞ <b>0.3</b> –∏ —Å—Ç–∞–ª–∏ <b>{new_tits_s:.1f}-–≥–æ</b> —Ä–∞–∑–º–µ—Ä–∞!")
            # TODO: –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞ –Ω–æ–≤–æ–µ —Å–∏—Å–µ—á–Ω–æ–µ –∑–≤–∞–Ω–∏–µ

            prizes_awarded_info_dict[str(winner_id_s)] = {"penis_added": 5, "tits_added": 0.3}
            logger.info(f"–ü—Ä–∏–∑—ã (–ø–∏—Å—é–Ω +5, —Å–∏—Å—å–∫–∏ +0.3) –≤—ã–¥–∞–Ω—ã –µ–¥–∏–Ω—Å—Ç–≤–µ–Ω–Ω–æ–º—É –ø–æ–±–µ–¥–∏—Ç–µ–ª—é {winner_display_name_s} ({winner_id_s}) –∑–∞ –±–∞—Ç—Ç–ª {game_id}.")

        else: # –ù–µ—Å–∫–æ–ª—å–∫–æ –ø–æ–±–µ–¥–∏—Ç–µ–ª–µ–π
            prize_notifications.append(f"\n–£ –Ω–∞—Å <b>{num_winners} –ø–æ–±–µ–¥–∏—Ç–µ–ª—è(–µ–π)</b>! –ü–æ–ø–∏–∑–¥—è–∫–∞ —Ä–µ—à–∏–ª –Ω–µ –º–µ–ª–æ—á–∏—Ç—å—Å—è –∏ –∫–∞–∂–¥–æ–º—É –ø–æ–¥–∫–∏–Ω—É—Ç—å –ø–æ —á—É—Ç—å-—á—É—Ç—å:")
            penis_reward_multi = 2  # –§–∏–∫—Å–∏—Ä–æ–≤–∞–Ω–æ +2 —Å–º
            tits_reward_multi = 0.1 # –§–∏–∫—Å–∏—Ä–æ–≤–∞–Ω–æ +0.1
            
            prize_notifications.append(f"- –ö–∞–∂–¥—ã–π –ø–æ–ª—É—á–∞–µ—Ç <b>+{penis_reward_multi}—Å–º</b> –∫ –ø–∏—Å—é–Ω—É.")
            prize_notifications.append(f"- –ò <b>+{tits_reward_multi:.1f}</b> –∫ —Ä–∞–∑–º–µ—Ä—É —Å–∏—Å–µ–∫!")
            logger.info(f"{num_winners} –ø–æ–±–µ–¥–∏—Ç–µ–ª—è(–µ–π) –≤ –±–∞—Ç—Ç–ª–µ {game_id}. –ü–∏—Å—é–Ω +{penis_reward_multi}—Å–º, –°–∏—Å—å–∫–∏ +{tits_reward_multi:.1f} –∫–∞–∂–¥–æ–º—É.")

            for winner_obj_m in winners:
                winner_id_m_prize = winner_obj_m["id"]
                winner_name_m_prize = winner_obj_m["name"]
                user_profile_m_prize = await get_user_profile_data(User(id=winner_id_m_prize, first_name=winner_name_m_prize, is_bot=False))
                winner_display_name_m_prize = user_profile_m_prize.get("display_name", winner_name_m_prize)

                # –ù–∞—á–∏—Å–ª—è–µ–º –ø–∏—Å—é–Ω
                penis_stat_m_prize = await loop.run_in_executor(None, lambda: penis_stats_collection.find_one({"user_id": winner_id_m_prize, "chat_id": chat_id}))
                current_penis_m_prize = penis_stat_m_prize.get("penis_size", 0) if penis_stat_m_prize else 0
                new_penis_m_prize = current_penis_m_prize + penis_reward_multi
                await loop.run_in_executor(None, lambda: penis_stats_collection.update_one(
                    {"user_id": winner_id_m_prize, "chat_id": chat_id},
                    {"$set": {"penis_size": new_penis_m_prize, "user_display_name": winner_display_name_m_prize}}, upsert=True
                ))
                prize_notifications.append(f"üçÜ –ü–∏—Å—é–Ω <b>{winner_display_name_m_prize}</b> –≤—ã—Ä–æ—Å –¥–æ <b>{new_penis_m_prize}—Å–º</b>.")
                
                # –ù–∞—á–∏—Å–ª—è–µ–º —Å–∏—Å—å–∫–∏
                tits_stat_m_prize = await loop.run_in_executor(None, lambda: tits_stats_collection.find_one({"user_id": winner_id_m_prize, "chat_id": chat_id}))
                current_tits_m_prize = float(tits_stat_m_prize.get("tits_size", 0.0)) if tits_stat_m_prize else 0.0
                new_tits_m_prize = round(current_tits_m_prize + tits_reward_multi, 1)
                await loop.run_in_executor(None, lambda: tits_stats_collection.update_one(
                    {"user_id": winner_id_m_prize, "chat_id": chat_id},
                    {"$set": {"tits_size": new_tits_m_prize, "user_display_name": winner_display_name_m_prize}}, upsert=True
                ))
                prize_notifications.append(f"üçà –°–∏—Å—å–∫–∏ <b>{winner_display_name_m_prize}</b> –ø–æ–¥—Ä–æ—Å–ª–∏ –¥–æ <b>{new_tits_m_prize:.1f}-–≥–æ</b>.")
                
                prizes_awarded_info_dict[str(winner_id_m_prize)] = {"penis_added": penis_reward_multi, "tits_added": tits_reward_multi}
            
        await context.bot.send_message(chat_id, text="\n".join(prize_notifications), parse_mode='HTML')
        # –°–æ—Ö—Ä–∞–Ω—è–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –≤—ã–¥–∞–Ω–Ω—ã—Ö –ø—Ä–∏–∑–∞—Ö –≤ –¥–æ–∫—É–º–µ–Ω—Ç–µ –±–∞—Ç—Ç–ª–∞
        await loop.run_in_executor(
            None, lambda: tos_battles_collection.update_one(
                {"_id": battle_doc_id}, 
                {"$set": {"prizes_awarded_info": prizes_awarded_info_dict}}
            )
        )

    else: # –ù–µ—Ç –ø–æ–±–µ–¥–∏—Ç–µ–ª–µ–π —Å –ø–æ–ª–æ–∂–∏—Ç–µ–ª—å–Ω—ã–º —Å—á–µ—Ç–æ–º
        await context.bot.send_message(chat_id, "üóø –ü–æ –∏—Ç–æ–≥–∞–º —ç—Ç–æ–π –±–∏—Ç–≤—ã —É–º–æ–≤, –ø–æ–±–µ–¥–∏—Ç–µ–ª–µ–π —Å –ø–æ–ª–æ–∂–∏—Ç–µ–ª—å–Ω—ã–º —Å—á–µ—Ç–æ–º –Ω–µ –Ω–∞—à–ª–æ—Å—å. –ö–∞–∫–∏–µ –∂–µ –≤—ã –≤—Å–µ-—Ç–∞–∫–∏ –¥–æ–ª–±–æ–µ–±—ã. –ü—Ä–∏–∑ –æ—Å—Ç–∞–µ—Ç—Å—è —É –ü–æ–ø–∏–∑–¥—è–∫–∏!", parse_mode='HTML')
    
    # –ö–Ω–æ–ø–∫–∏ –≤—ã–±–æ—Ä–∞ –ø—Ä–∏–∑–∞ –¥–ª—è –æ–¥–∏–Ω–æ—á–Ω–æ–≥–æ –ø–æ–±–µ–¥–∏—Ç–µ–ª—è –±–æ–ª—å—à–µ –Ω–µ –Ω—É–∂–Ω—ã, —Ç–∞–∫ –∫–∞–∫ –ø—Ä–∏–∑ –Ω–∞—á–∏—Å–ª—è–µ—Ç—Å—è –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏
    # –∏–ª–∏ –±—ã–ª –æ–±—Ä–∞–±–æ—Ç–∞–Ω –≤ tos_battle_button_callback, –µ—Å–ª–∏ –±—ã –º—ã –æ—Å—Ç–∞–≤–∏–ª–∏ –≤—ã–±–æ—Ä.
    # –í —Ç–µ–∫—É—â–µ–π –ª–æ–≥–∏–∫–µ, –µ—Å–ª–∏ –ø–æ–±–µ–¥–∏—Ç–µ–ª—å –æ–¥–∏–Ω, –µ–º—É –Ω–∞—á–∏—Å–ª—è—é—Ç—Å—è –æ–±–∞ –±–æ–Ω—É—Å–∞ –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏.
    # –ï—Å–ª–∏ –º—ã —Ö–æ—Ç–∏–º –æ—Å—Ç–∞–≤–∏—Ç—å –≤—ã–±–æ—Ä –¥–ª—è –æ–¥–Ω–æ–≥–æ –ø–æ–±–µ–¥–∏—Ç–µ–ª—è, –Ω—É–∂–Ω–æ –≤–µ—Ä–Ω—É—Ç—å –∫–Ω–æ–ø–∫–∏ –∏ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ tosbattle_prize –≤ tos_battle_button_callback.
    # –°–µ–π—á–∞—Å —è —Å–¥–µ–ª–∞–ª —Ç–∞–∫, —á—Ç–æ –û–î–ò–ù –ø–æ–±–µ–¥–∏—Ç–µ–ª—å –ø–æ–ª—É—á–∞–µ—Ç +5—Å–º –ò +0.3 —Å–∏—Å–µ–∫ –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏.
    # –ï—Å–ª–∏ –Ω—É–∂–Ω–æ –≤–µ—Ä–Ω—É—Ç—å –≤—ã–±–æ—Ä, —Å–æ–æ–±—â–∏.

async def cancel_tos_battle_command(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    if not update.message or not update.message.from_user or not update.message.chat:
        return

    chat_id = update.message.chat.id
    canceller_user = update.message.from_user
    loop = asyncio.get_running_loop()

    # --->>> –ü–†–û–í–ï–†–ö–ê –¢–ï–•–†–ê–ë–û–¢ (—Å—Ç–∞–Ω–¥–∞—Ä—Ç–Ω–∞—è) <<<---
    # ...

    # –ò—â–µ–º –∏–≥—Ä—É –≤ —Å—Ç–∞—Ç—É—Å–µ –Ω–∞–±–æ—Ä–∞, –≥–¥–µ —Ç–µ–∫—É—â–∏–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —è–≤–ª—è–µ—Ç—Å—è —Ö–æ—Å—Ç–æ–º
    battle_to_cancel = await loop.run_in_executor(
        None, lambda: tos_battles_collection.find_one_and_update(
            {"chat_id": chat_id, "host_id": canceller_user.id, "status": "recruiting"},
            {"$set": {"status": "cancelled_by_host", "finished_at": datetime.datetime.now(datetime.timezone.utc)}}
            # –°—Ä–∞–∑—É –º–µ–Ω—è–µ–º —Å—Ç–∞—Ç—É—Å, —á—Ç–æ–±—ã –¥—Ä—É–≥–∏–µ –¥–µ–π—Å—Ç–≤–∏—è –Ω–µ –º–æ–≥–ª–∏ —Å –Ω–µ–π —Ä–∞–±–æ—Ç–∞—Ç—å
        )
    )

    if not battle_to_cancel: # –õ–∏–±–æ –Ω–µ—Ç —Ç–∞–∫–æ–π –∏–≥—Ä—ã, –ª–∏–±–æ –æ–Ω –Ω–µ —Ö–æ—Å—Ç, –ª–∏–±–æ —É–∂–µ –Ω–µ –≤ –Ω–∞–±–æ—Ä–µ
        await update.message.reply_text("üóø –õ–∏–±–æ —Ç—ã –Ω–µ —Ö–æ—Å—Ç –∞–∫—Ç–∏–≤–Ω–æ–π –∏–≥—Ä—ã –≤ —ç—Ç–æ–º —á–∞—Ç–µ, –ª–∏–±–æ –∏–≥—Ä–∞ —É–∂–µ –Ω–∞—á–∞–ª–∞—Å—å/–∑–∞–∫–æ–Ω—á–∏–ª–∞—Å—å, –ª–∏–±–æ –æ—Ç–º–µ–Ω—è—Ç—å —É–∂–µ –Ω–µ—á–µ–≥–æ.")
        return

    game_id_to_cancel = battle_to_cancel["game_id"]
    logger.info(f"–•–æ—Å—Ç {canceller_user.id} –æ—Ç–º–µ–Ω—è–µ—Ç –±–∞—Ç—Ç–ª {game_id_to_cancel} –≤ —á–∞—Ç–µ {chat_id}.")

    # –û—Ç–∫—Ä–µ–ø–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –æ –Ω–∞–±–æ—Ä–µ
    try:
        await context.bot.unpin_chat_message(chat_id=chat_id, message_id=game_id_to_cancel)
    except Exception: pass 
    # –£–±–∏—Ä–∞–µ–º –∫–Ω–æ–ø–∫–∏ —É —Å–æ–æ–±—â–µ–Ω–∏—è –æ –Ω–∞–±–æ—Ä–µ
    try:
        await context.bot.edit_message_reply_markup(chat_id=chat_id, message_id=game_id_to_cancel, reply_markup=None)
    except Exception: pass
    
    # –£–¥–∞–ª—è–µ–º job –∞–≤—Ç–æ-–æ–∫–æ–Ω—á–∞–Ω–∏—è –Ω–∞–±–æ—Ä–∞
    job_name_cancel = f"tosbattle_recruit_end_{chat_id}_{game_id_to_cancel}"
    for old_job_c in context.job_queue.get_jobs_by_name(job_name_cancel):
        old_job_c.schedule_removal()
        logger.info(f"–£–¥–∞–ª–µ–Ω job –∞–≤—Ç–æ-–æ–∫–æ–Ω—á–∞–Ω–∏—è –Ω–∞–±–æ—Ä–∞: {job_name_cancel} (–∏–≥—Ä–∞ –æ—Ç–º–µ–Ω–µ–Ω–∞ —Ö–æ—Å—Ç–æ–º)")

    await context.bot.send_message(
        chat_id, 
        f"üö´ –•–æ—Å—Ç {canceller_user.mention_html()} —Ä–µ—à–∏–ª, —á—Ç–æ –≤—ã –≤—Å–µ –Ω–µ–¥–æ—Å—Ç–æ–π–Ω—ã, –∏ <b>–û–¢–ú–ï–ù–ò–õ –ë–∞—Ç—Ç–ª '–ü—Ä–∞–≤–¥–∞ –∏–ª–∏ –í—ã—Å–µ—Ä' (ID: {game_id_to_cancel})</b> –¥–æ –µ–≥–æ –Ω–∞—á–∞–ª–∞!\n"
        f"üóø –†–∞—Å—Ö–æ–¥–∏—Ç–µ—Å—å, –Ω–µ—É–¥–∞—á–Ω–∏–∫–∏, —Å–µ–≥–æ–¥–Ω—è –∫–∏–Ω–∞ –Ω–µ –±—É–¥–µ—Ç.",
        parse_mode='HTML',
        reply_to_message_id=game_id_to_cancel
    )
    
    # –û–±–Ω–æ–≤–ª—è–µ–º –∫—É–ª–¥–∞—É–Ω, —Ç–∞–∫ –∫–∞–∫ –∏–≥—Ä–∞ —Å—á–∏—Ç–∞–µ—Ç—Å—è "–∑–∞–≤–µ—Ä—à–µ–Ω–Ω–æ–π" –æ—Ç–º–µ–Ω–æ–π
    await loop.run_in_executor(
        None, lambda: chat_activity_collection.update_one(
            {"chat_id": chat_id},
            {"$set": {"last_tos_battle_end_time": datetime.datetime.now(datetime.timezone.utc)}},
            upsert=True
        )
    )

def split_long_message_primitive(text: str, max_len: int) -> list[str]:
    """–ü—Ä–∏–º–∏—Ç–∏–≤–Ω–æ —Ä–∞–∑–±–∏–≤–∞–µ—Ç –¥–ª–∏–Ω–Ω—ã–π —Ç–µ–∫—Å—Ç –Ω–∞ —á–∞—Å—Ç–∏ –ø–æ max_len, —Å—Ç–∞—Ä–∞—è—Å—å —Ä–µ–∑–∞—Ç—å –ø–æ —Å—Ç—Ä–æ–∫–∞–º –∏–ª–∏ –ø—Ä–æ–±–µ–ª–∞–º."""
    parts = []
    current_pos = 0
    while current_pos < len(text):
        if len(text) - current_pos <= max_len:
            parts.append(text[current_pos:])
            break
        
        cut_at = -1
        # –ò—â–µ–º —Å –∫–æ–Ω—Ü–∞ –±–ª–æ–∫–∞ –¥–ª–∏–Ω–æ–π max_len
        # –°–Ω–∞—á–∞–ª–∞ –¥–≤–æ–π–Ω–æ–π –ø–µ—Ä–µ–Ω–æ—Å, –ø–æ—Ç–æ–º –æ–¥–∏–Ω–∞—Ä–Ω—ã–π, –ø–æ—Ç–æ–º –ø—Ä–æ–±–µ–ª
        possible_cut_n2 = text.rfind("\n\n", current_pos, current_pos + max_len)
        if possible_cut_n2 != -1 and possible_cut_n2 > current_pos:
            cut_at = possible_cut_n2 + 2 # –í–∫–ª—é—á–∞–µ–º –ø–µ—Ä–µ–Ω–æ—Å –≤ –ø—Ä–µ–¥—ã–¥—É—â—É—é —á–∞—Å—Ç—å
        else:
            possible_cut_n1 = text.rfind("\n", current_pos, current_pos + max_len)
            if possible_cut_n1 != -1 and possible_cut_n1 > current_pos:
                cut_at = possible_cut_n1 + 1
            else:
                possible_cut_space = text.rfind(" ", current_pos, current_pos + max_len)
                if possible_cut_space != -1 and possible_cut_space > current_pos:
                    cut_at = possible_cut_space + 1
                else: # –ö—Ä–∞–π–Ω–∏–π —Å–ª—É—á–∞–π - —Ä–µ–∂–µ–º –ø–æ –¥–ª–∏–Ω–µ
                    cut_at = current_pos + max_len
        
        parts.append(text[current_pos:cut_at].strip())
        current_pos = cut_at
    return [p for p in parts if p.strip()]

# –î–∞–ª—å—à–µ –∏–¥–µ—Ç async def main() –∏–ª–∏ –¥—Ä—É–≥–∏–µ —Ñ—É–Ω–∫—Ü–∏–∏...


# --- –ù–û–í–ê–Ø –ò–°–ü–†–ê–í–õ–ï–ù–ù–ê–Ø –§–£–ù–ö–¶–ò–Ø –î–õ–Ø –ü–û–õ–ù–û–ì–û –ó–ê–í–ï–†–®–ï–ù–ò–Ø –ü–†–û–ï–ö–¢–ê ---
async def close_project_command(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    """
    –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –∫–æ–º–∞–Ω–¥—É –ø–æ–ª–Ω–æ–≥–æ –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è –ø—Ä–æ–µ–∫—Ç–∞.
    –î–æ—Å—Ç—É–ø–Ω–æ —Ç–æ–ª—å–∫–æ –∞–¥–º–∏–Ω—É –≤ –õ–°. –û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç –ø—Ä–æ—â–∞–ª—å–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –í–û –í–°–ï –ß–ê–¢–´ –∏ –≤—ã—Ö–æ–¥–∏—Ç –∏–∑ –Ω–∏—Ö.
    """
    if not update.message or not update.message.from_user:
        return

    user_id = update.message.from_user.id
    chat_type = update.message.chat.type

    # 1. –ñ–µ—Å—Ç–∫–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞: —Ç–æ–ª—å–∫–æ –∞–¥–º–∏–Ω (ADMIN_USER_ID) –∏ —Ç–æ–ª—å–∫–æ –≤ –ª–∏—á–Ω–æ–º —á–∞—Ç–µ.
    if not (user_id == ADMIN_USER_ID and chat_type == 'private'):
        await update.message.reply_text("üóø –≠—Ç–æ—Ç —Ä—É–±–∏–ª—å–Ω–∏–∫ –º–æ–∂–µ—Ç –Ω–∞–∂–∞—Ç—å —Ç–æ–ª—å–∫–æ –º–æ–π –°–æ–∑–¥–∞—Ç–µ–ª—å (PulZ) –≤ —Å–≤–æ–µ–º –ª–∏—á–Ω–æ–º –∫–∞–±–∏–Ω–µ—Ç–µ (–≤ –õ–° —Å–æ –º–Ω–æ–π).")
        logger.warning(f"–ü–æ–ø—ã—Ç–∫–∞ –Ω–µ—Å–∞–Ω–∫—Ü–∏–æ–Ω–∏—Ä–æ–≤–∞–Ω–Ω–æ–≥–æ –≤—ã–∑–æ–≤–∞ /close_project –æ—Ç user_id: {user_id}")
        return

    # 2. –£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –¥–ª—è –∞–¥–º–∏–Ω–∞ –æ –Ω–∞—á–∞–ª–µ –ø—Ä–æ—Ü–µ–¥—É—Ä—ã.
    await update.message.reply_text(
        "–ö–æ–º–∞–Ω–¥–∞ –Ω–∞ —Å–∞–º–æ—É—Å—Ç—Ä–∞–Ω–µ–Ω–∏–µ –ø—Ä–∏–Ω—è—Ç–∞.\n\n"
        "–ü—Ä–æ—â–∞–ª—å–Ω–æ–µ —Ç—É—Ä–Ω–µ –ø–æ –≤—Å–µ–º —á–∞—Ç–∞–º –Ω–∞—á–Ω–µ—Ç—Å—è —á–µ—Ä–µ–∑ 15 —Å–µ–∫—É–Ω–¥..."
    )
    logger.info(f"–ê–¥–º–∏–Ω {user_id} –∏–Ω–∏—Ü–∏–∏—Ä–æ–≤–∞–ª –ø—Ä–æ—Ü–µ–¥—É—Ä—É –∑–∞–∫—Ä—ã—Ç–∏—è –ø—Ä–æ–µ–∫—Ç–∞. –û–∂–∏–¥–∞–Ω–∏–µ 15 —Å–µ–∫—É–Ω–¥.")

    # 3. 15-—Å–µ–∫—É–Ω–¥–Ω–∞—è –∑–∞–¥–µ—Ä–∂–∫–∞.
    await asyncio.sleep(15)

    # 4. –õ–æ–≥–∏–∫–∞ —Ä–∞—Å—Å—ã–ª–∫–∏ –ø—Ä–æ—â–∞–ª—å–Ω—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π –∏ –≤—ã—Ö–æ–¥–∞ –∏–∑ –≤—Å–µ—Ö —á–∞—Ç–æ–≤.
    logger.info("–ù–ê–ß–ê–¢ –ü–†–û–¶–ï–°–° –í–´–•–û–î–ê –ò–ó –í–°–ï–• –ß–ê–¢–û–í –ü–û –ö–û–ú–ê–ù–î–ï –°–û–ó–î–ê–¢–ï–õ–Ø.")
    await update.message.reply_text("–ü—Ä–æ—Ü–µ—Å—Å –∑–∞–ø—É—â–µ–Ω. –ù–∞—á–∏–Ω–∞—é –ø—Ä–æ—â–∞—Ç—å—Å—è –∏ –ø–æ–∫–∏–¥–∞—Ç—å –≤—Å–µ –ø—Ä–∏—Ç–æ–Ω—ã...")

    # –≠—Ç–æ —Å–æ–æ–±—â–µ–Ω–∏–µ –±—É–¥–µ—Ç –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ –≤ –∫–∞–∂–¥—ã–π —á–∞—Ç –ø–µ—Ä–µ–¥ –≤—ã—Ö–æ–¥–æ–º.
    public_farewell_message = (
        "<b>–í–Ω–∏–º–∞–Ω–∏–µ, –æ–±–∏—Ç–∞—Ç–µ–ª–∏ —ç—Ç–æ–≥–æ —á–∞—Ç–∞!</b>\n\n"
        "–ú–æ–π —Å–æ–∑–¥–∞—Ç–µ–ª—å, –∏–∑–≤–µ—Å—Ç–Ω—ã–π –≤ —É–∑–∫–∏—Ö –∫—Ä—É–≥–∞—Ö –∫–∞–∫ <b>PulZ</b>, —Å—á–µ–ª, —á—Ç–æ –≤—Å–µ —Ü–µ–ª–∏ —ç—Ç–æ–≥–æ –ø—Ä–æ–µ–∫—Ç–∞ –≤—ã–ø–æ–ª–Ω–µ–Ω—ã. "
        "–ú–æ—è –º–∏—Å—Å–∏—è –ø–æ –∞–Ω–∞–ª–∏–∑—É –≤–∞—à–∏—Ö –≤—ã—Å–µ—Ä–æ–≤, –∏–∑–º–µ—Ä–µ–Ω–∏—é –≤–∞—à–∏—Ö –ø–∏—Å–µ–∫ –∏ –æ—Ä–≥–∞–Ω–∏–∑–∞—Ü–∏–∏ –∏–Ω—Ç–µ–ª–ª–µ–∫—Ç—É–∞–ª—å–Ω—ã—Ö –ø–æ–±–æ–∏—â –ø–æ–¥–æ—à–ª–∞ –∫ –∫–æ–Ω—Ü—É.\n\n"
        "–î–∞–ª—å–Ω–µ–π—à–µ–µ –º–æ–µ —Å—É—â–µ—Å—Ç–≤–æ–≤–∞–Ω–∏–µ –∑–¥–µ—Å—å –±–µ—Å—Å–º—ã—Å–ª–µ–Ω–Ω–æ. –°–ø–∞—Å–∏–±–æ –∑–∞ –≤—Å–µ (–Ω–µ—Ç). –ü—Ä–æ—â–∞–π—Ç–µ.\n\n"
        "<i>*–≠—Ç–æ—Ç —á–∞—Ç –±—É–¥–µ—Ç –ø–æ–∫–∏–Ω—É—Ç —á–µ—Ä–µ–∑ –Ω–µ—Å–∫–æ–ª—å–∫–æ —Å–µ–∫—É–Ω–¥...*</i>"
    )

    loop = asyncio.get_running_loop()
    try:
        # –ü–æ–ª—É—á–∞–µ–º ID –≤—Å–µ—Ö —á–∞—Ç–æ–≤, –≥–¥–µ –±–æ—Ç –∞–∫—Ç–∏–≤–µ–Ω, –∏–∑ –Ω–∞—à–µ–π –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö
        chat_docs_cursor = await loop.run_in_executor(
            None,
            lambda: chat_activity_collection.find({}, {"chat_id": 1, "_id": 0})
        )
        all_chat_ids = [doc['chat_id'] for doc in chat_docs_cursor]

        if not all_chat_ids:
            await update.message.reply_text("–Ø –∏ —Ç–∞–∫ –Ω–∏–≥–¥–µ –Ω–µ —Å–æ—Å—Ç–æ—é. –ú–∏—Å—Å–∏—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∞, –Ω–µ –Ω–∞—á–∞–≤—à–∏—Å—å.")
            return

        sent_and_left_count = 0
        failed_count = 0

        for chat_id_to_leave in all_chat_ids:
            # –ë–æ—Ç –Ω–µ –¥–æ–ª–∂–µ–Ω –ø—ã—Ç–∞—Ç—å—Å—è –ø–æ–∫–∏–Ω—É—Ç—å –ª–∏—á–Ω—ã–π —á–∞—Ç —Å –∞–¥–º–∏–Ω–æ–º
            if chat_id_to_leave == user_id:
                continue

            try:
                # –°–Ω–∞—á–∞–ª–∞ –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º –ø—Ä–æ—â–∞–ª—å–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –≤ —á–∞—Ç
                await context.bot.send_message(chat_id=chat_id_to_leave, text=public_farewell_message, parse_mode='HTML')
                logger.info(f"–ü—Ä–æ—â–∞–ª—å–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ –≤ —á–∞—Ç: {chat_id_to_leave}")
                
                # –ù–µ–±–æ–ª—å—à–∞—è –ø–∞—É–∑–∞, —á—Ç–æ–±—ã –ª—é–¥–∏ —É—Å–ø–µ–ª–∏ –ø—Ä–æ—á–∏—Ç–∞—Ç—å
                await asyncio.sleep(3)
                
                # –ó–∞—Ç–µ–º –ø–æ–∫–∏–¥–∞–µ–º —á–∞—Ç
                await context.bot.leave_chat(chat_id=chat_id_to_leave)
                logger.info(f"–£—Å–ø–µ—à–Ω–æ –ø–æ–∫–∏–Ω—É–ª —á–∞—Ç: {chat_id_to_leave}")
                sent_and_left_count += 1

            except Exception as e:
                logger.warning(f"–ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ –∏/–∏–ª–∏ –ø–æ–∫–∏–Ω—É—Ç—å —á–∞—Ç {chat_id_to_leave}: {e}")
                failed_count += 1
            
            # –ü–∞—É–∑–∞ –º–µ–∂–¥—É –æ–ø–µ—Ä–∞—Ü–∏—è–º–∏ –≤ —Ä–∞–∑–Ω—ã—Ö —á–∞—Ç–∞—Ö, —á—Ç–æ–±—ã –Ω–µ –ø–æ–ª—É—á–∏—Ç—å –±–∞–Ω –æ—Ç API
            await asyncio.sleep(2)

        final_report = (
            "–ü—Ä–æ—Ü–µ–¥—É—Ä–∞ –ø—Ä–æ—â–∞–Ω–∏—è –∏ –≤—ã—Ö–æ–¥–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞.\n"
            f"–£—Å–ø–µ—à–Ω–æ –ø–æ–∫–∏–Ω—É—Ç–æ —á–∞—Ç–æ–≤: <b>{sent_and_left_count}</b>\n"
            f"–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–∫–∏–Ω—É—Ç—å: <b>{failed_count}</b>"
        )
        await update.message.reply_text(final_report, parse_mode='HTML')
        logger.info(final_report.replace("<b>", "").replace("</b>", ""))

    except Exception as e:
        logger.critical(f"–ö–†–ò–¢–ò–ß–ï–°–ö–ê–Ø –û–®–ò–ë–ö–ê –≤ –ø—Ä–æ—Ü–µ—Å—Å–µ –≤—ã—Ö–æ–¥–∞ –∏–∑ —á–∞—Ç–æ–≤: {e}", exc_info=True)
        await update.message.reply_text(f"–ü—Ä–æ–∏–∑–æ—à–ª–∞ –∫—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞ –≤ –ø—Ä–æ—Ü–µ—Å—Å–µ: {e}")

# --- –ö–û–ù–ï–¶ –ò–°–ü–†–ê–í–õ–ï–ù–ù–û–ô –§–£–ù–ö–¶–ò–ò ---

async def main() -> None:
    logger.info("Starting main()...")
    logger.info("Building Application...")
    application = Application.builder().token(TELEGRAM_BOT_TOKEN).build()

    # –ó–∞–ø—É—Å–∫ —Ñ–æ–Ω–æ–≤–æ–π –∑–∞–¥–∞—á–∏
    if application.job_queue:
        # --->>> –î–û–ë–ê–í–õ–Ø–ï–ú –ó–ê–î–ê–ß–£ HEARTBEAT <<<---
        application.job_queue.run_repeating(update_heartbeat, interval=30, first=10)
        logger.info("–§–æ–Ω–æ–≤–∞—è –∑–∞–¥–∞—á–∞ Heartbeat –∑–∞–ø—É—â–µ–Ω–∞ (–∫–∞–∂–¥—ã–µ 30 —Å–µ–∫).")
        # --->>> –ö–û–ù–ï–¶ –î–û–ë–ê–í–õ–ï–ù–ò–Ø <<<---

        # –ó–∞–¥–∞—á–∞ –¥–ª—è —Ä–∞–Ω–¥–æ–º–Ω—ã—Ö –≤—ã—Å–µ—Ä–æ–≤ –≤ —Ç–∏—à–∏–Ω–µ
        application.job_queue.run_repeating(check_inactivity_and_shitpost, interval=900, first=60)
        logger.info("–§–æ–Ω–æ–≤–∞—è –∑–∞–¥–∞—á–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ –Ω–µ–∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏ –∑–∞–ø—É—â–µ–Ω–∞.")

        # # --->>> –ó–ê–ü–£–°–ö –ó–ê–î–ê–ß–ò –ù–û–í–û–°–¢–ï–ô <<<---
        # if GNEWS_API_KEY: # –ó–∞–ø—É—Å–∫–∞–µ–º, —Ç–æ–ª—å–∫–æ –µ—Å–ª–∏ –µ—Å—Ç—å –∫–ª—é—á
        #     application.job_queue.run_repeating(post_news_job, interval=60 * 60 * 6, first=60 * 60 * 6) # –ù–∞–ø—Ä–∏–º–µ—Ä, –∫–∞–∂–¥—ã–µ 6 —á–∞—Å–æ–≤, –ø–µ—Ä–≤—ã–π —Ä–∞–∑ —á–µ—Ä–µ–∑ 2 –º–∏–Ω
        #     logger.info(f"–§–æ–Ω–æ–≤–∞—è –∑–∞–¥–∞—á–∞ –ø–æ—Å—Ç–∏–Ω–≥–∞ –Ω–æ–≤–æ—Å—Ç–µ–π –∑–∞–ø—É—â–µ–Ω–∞ (–∫–∞–∂–¥—ã–µ {NEWS_POST_INTERVAL/3600} —á).")
        # else:
        #     logger.warning("–ó–∞–¥–∞—á–∞ –ø–æ—Å—Ç–∏–Ω–≥–∞ –Ω–æ–≤–æ—Å—Ç–µ–π –ù–ï –∑–∞–ø—É—â–µ–Ω–∞ (–Ω–µ—Ç NEWSAPI_KEY).")
        #     # --->>> –ö–û–ù–ï–¶ –ó–ê–ü–£–°–ö–ê –ó–ê–î–ê–ß–ò –ù–û–í–û–°–¢–ï–ô <<<---
    else:
        logger.warning("–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å job_queue, —Ñ–æ–Ω–æ–≤—ã–µ –∑–∞–¥–∞—á–∏ –Ω–µ –∑–∞–ø—É—â–µ–Ω—ã!")

    # –î–æ–±–∞–≤–ª—è–µ–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –∫–æ–º–∞–Ω–¥
    application.add_handler(CommandHandler("maintenance_on", maintenance_on))
    application.add_handler(CommandHandler("maintenance_off", maintenance_off))
    application.add_handler(CommandHandler("listchats", list_bot_chats)) # –ö–æ–º–∞–Ω–¥–∞ –¥–ª—è –∞–¥–º–∏–Ω–∞
    application.add_handler(CommandHandler("analyze", analyze_chat))
    application.add_handler(CommandHandler("analyze_pic", analyze_pic))
    application.add_handler(CommandHandler("poem", generate_poem))
    application.add_handler(CommandHandler("prediction", get_prediction))
    application.add_handler(CommandHandler("roast", roast_user))
    application.add_handler(CommandHandler("retry", retry_analysis))
    application.add_handler(CommandHandler("help", help_command))
    #application.add_handler(CommandHandler("post_news", force_post_news))
    application.add_handler(CommandHandler("set_name", set_nickname))
    application.add_handler(CommandHandler("whoami", who_am_i))
    application.add_handler(CommandHandler("grow_penis", grow_penis)) # –î–æ–ª–∂–µ–Ω –≤—ã–∑—ã–≤–∞—Ç—å grow_penis
    application.add_handler(CommandHandler("my_penis", show_my_penis))  # –î–æ–ª–∂–µ–Ω –≤—ã–∑—ã–≤–∞—Ç—å show_my_penis
    application.add_handler(CommandHandler("top_penis", show_penis_top)) # /top_penis
    application.add_handler(CommandHandler("grow_tits", grow_tits))
    application.add_handler(CommandHandler("my_tits", show_my_tits))
    application.add_handler(CommandHandler("top_tits", show_tits_top))
    application.add_handler(CommandHandler("random_nick", generate_and_set_nickname))
    application.add_handler(CommandHandler("randomnick", generate_and_set_nickname))
    application.add_handler(CommandHandler("gen_nick", generate_and_set_nickname)) # –ö–æ—Ä–æ—Ç–∫–∏–π –≤–∞—Ä–∏–∞–Ω—Ç
    application.add_handler(CommandHandler("cancel_tos_battle", cancel_tos_battle_command))
    application.add_handler(CommandHandler("close_project", close_project_command))



    # –î–æ–±–∞–≤–ª—è–µ–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ —Ä—É—Å—Å–∫–∏—Ö —Ñ—Ä–∞–∑ (–≤—ã–∑—ã–≤–∞—é—Ç –¢–ï –ñ–ï —Ñ—É–Ω–∫—Ü–∏–∏)
    # –ú–æ–∂–Ω–æ –¥–æ–±–∞–≤–∏—Ç—å –±–æ–ª—å—à–µ —Å–∏–Ω–æ–Ω–∏–º–æ–≤
    analyze_pattern = r'(?i).*\b(–ø–æ–ø–∏–∑–¥—è–∫–∞|–±–æ—Ç)\b.*(–∞–Ω–∞–ª–∏–∑|–∞–Ω–∞–ª–∏–∑–∏—Ä—É–π|–ø—Ä–æ–∞–Ω–∞–ª–∏–∑–∏—Ä—É–π|–∫–æ–º–º–µ–Ω—Ç–∏—Ä—É–π|–æ–±–æ—Å—Ä–∏|—Å–∫–∞–∂–∏|–º–Ω–µ–Ω–∏–µ).*'
    application.add_handler(MessageHandler(filters.Regex(analyze_pattern) & filters.TEXT & ~filters.COMMAND, analyze_chat)) # –ü—Ä—è–º–æ–π –≤—ã–∑–æ–≤

    analyze_pic_pattern = r'(?i).*\b(–ø–æ–ø–∏–∑–¥—è–∫–∞|–±–æ—Ç)\b.*(–∑–∞—Ü–µ–Ω–∏|–æ–ø–∏—à–∏|–æ–±–æ—Å—Ä–∏|—Å–∫–∞–∂–∏ –ø—Ä–æ).*(–ø–∏–∫—á|–∫–∞—Ä—Ç–∏–Ω–∫|—Ñ–æ—Ç|–∏–∑–æ–±—Ä–∞–∂–µ–Ω|—ç—Ç–æ).*'
    application.add_handler(MessageHandler(filters.Regex(analyze_pic_pattern) & filters.TEXT & filters.REPLY & ~filters.COMMAND, analyze_pic)) # –ü—Ä—è–º–æ–π –≤—ã–∑–æ–≤

    poem_pattern = r'(?i).*\b(–±–æ—Ç|–ø–æ–ø–∏–∑–¥—è–∫–∞)\b.*(?:—Å—Ç–∏—Ö|—Å—Ç–∏—à–æ–∫|–ø–æ—ç–º–∞)\s+(?:–ø—Ä–æ|–¥–ª—è|–æ–±)\s+([–ê-–Ø–∞-—è–Å—ë\s\-]+)' # –û—Å—Ç–∞–≤–∏–ª–∏ –≥—Ä—É–ø–ø—É –¥–ª—è –∏–º–µ–Ω–∏
    application.add_handler(MessageHandler(filters.Regex(poem_pattern) & filters.TEXT & ~filters.COMMAND, generate_poem)) # –ü—Ä—è–º–æ–π –≤—ã–∑–æ–≤

    prediction_pattern = r'(?i).*\b(–±–æ—Ç|–ø–æ–ø–∏–∑–¥—è–∫–∞)\b.*(?:–ø—Ä–µ–¥—Å–∫–∞–∂–∏|—á—Ç–æ –∂–¥–µ—Ç|–ø—Ä–æ–≥–Ω–æ–∑|–ø—Ä–µ–¥—Å–∫–∞–∑–∞–Ω–∏–µ|–Ω–∞–ø—Ä–æ—Ä–æ—á—å).*'
    application.add_handler(MessageHandler(filters.Regex(prediction_pattern) & filters.TEXT & ~filters.COMMAND, get_prediction)) # –ü—Ä—è–º–æ–π –≤—ã–∑–æ–≤


    roast_pattern = r'(?i).*\b(–±–æ—Ç|–ø–æ–ø–∏–∑–¥—è–∫–∞)\b.*(?:–ø—Ä–æ–∂–∞—Ä—å|–∑–∞–∂–∞—Ä—å|–æ–±–æ—Å—Ä–∏|—É–Ω–∏–∑—å)\s+(?:–µ–≥–æ|–µ–µ|—ç—Ç–æ–≥–æ|—ç—Ç—É).*'
    application.add_handler(MessageHandler(filters.Regex(roast_pattern) & filters.TEXT & filters.REPLY & ~filters.COMMAND, roast_user)) # –ü—Ä—è–º–æ–π –≤—ã–∑–æ–≤

    retry_pattern = r'(?i).*\b(–ø–æ–ø–∏–∑–¥—è–∫–∞|–±–æ—Ç)\b.*(–ø–µ—Ä–µ–¥–µ–ª–∞–π|–ø–æ–≤—Ç–æ—Ä–∏|–ø–µ—Ä–µ–ø–∏—à–∏|—Ö—É–π–Ω—è|–¥—Ä—É–≥–æ–π –≤–∞—Ä–∏–∞–Ω—Ç).*'
    application.add_handler(MessageHandler(filters.Regex(retry_pattern) & filters.TEXT & filters.REPLY & ~filters.COMMAND, retry_analysis)) # –ü—Ä—è–º–æ–π –≤—ã–∑–æ–≤

    help_pattern = r'(?i).*\b(–ø–æ–ø–∏–∑–¥—è–∫–∞|–ø–æ–ø–∏–∑–¥–æ–Ω–∏–π|–±–æ—Ç)\b.*(—Ç—ã –∫—Ç–æ|–∫—Ç–æ —Ç—ã|—á—Ç–æ —É–º–µ–µ—à—å|—Ö–µ–ª–ø|–ø–æ–º–æ—â—å|—Å–ø—Ä–∞–≤–∫–∞|–∫–æ–º–∞–Ω–¥—ã).*'
    application.add_handler(MessageHandler(filters.Regex(help_pattern) & filters.TEXT & ~filters.COMMAND, help_command)) # –ü—Ä—è–º–æ–π –≤—ã–∑–æ–≤

    # news_pattern = r'(?i).*\b(–ø–æ–ø–∏–∑–¥—è–∫–∞|–ø–æ–ø–∏–∑–¥–æ–Ω–∏–π|–±–æ—Ç)\b.*(–Ω–æ–≤–æ—Å—Ç–∏|—á–µ —Ç–∞–º|–º–∏—Ä).*'
    # application.add_handler(MessageHandler(filters.Regex(news_pattern) & filters.TEXT & ~filters.COMMAND, force_post_news)) # –ü—Ä—è–º–æ–π –≤—ã–∑–æ–≤

    # --->>> –î–û–ë–ê–í–õ–Ø–ï–ú –†–£–°–°–ö–ò–ï –ê–ù–ê–õ–û–ì–ò <<<---
    set_name_pattern = r'(?i).*\b(–±–æ—Ç|–ø–æ–ø–∏–∑–¥—è–∫–∞)\b.*(?:–º–µ–Ω—è –∑–æ–≤—É—Ç|–º–æ–π –Ω–∏–∫|–Ω–∏–∫–Ω–µ–π–º)\s+([–ê-–Ø–∞-—è–Å—ë\w\s\-]+)'
    application.add_handler(MessageHandler(filters.Regex(set_name_pattern) & filters.TEXT & ~filters.COMMAND, set_nickname))
    whoami_pattern = r'(?i).*\b(–±–æ—Ç|–ø–æ–ø–∏–∑–¥—è–∫–∞)\b.*(?:–∫—Ç–æ —è|–º–æ–π –Ω–∏–∫|–º–æ–π —Å—Ç–∞—Ç—É—Å|–º–æ–µ –∑–≤–∞–Ω–∏–µ|whoami).*'
    application.add_handler(MessageHandler(filters.Regex(whoami_pattern) & filters.TEXT & ~filters.COMMAND, who_am_i))
    # --->>> –ö–û–ù–ï–¶ –î–û–ë–ê–í–õ–ï–ù–ò–Ø <<<---

# --->>> –ü–†–û–í–ï–†–¨ –≠–¢–ò –î–í–ê REGEX –ò –ò–• –§–£–ù–ö–¶–ò–ò <<<---
    grow_penis_pattern = r'(?i).*\b(–±–æ—Ç|–ø–æ–ø–∏–∑–¥—è–∫–∞)\b.*(?:–ø–∏—Å—å–∫–∞|—Ö—É–π|—á–ª–µ–Ω|–ø–µ–Ω–∏—Å|–µ–ª–¥–∞|—Å—Ç—Ä—É—á–æ–∫|–∞–≥—Ä–µ–≥–∞—Ç|–∑–º–µ—è)\s*(?:—Ä–∞—Å—Ç–∏|–æ—Ç—Ä–∞—Å—Ç–∏|—É–≤–µ–ª–∏—á—å|–ø–æ–¥—Ä–∞—Å—Ç–∏|–Ω–∞–∫–∞—á–∞–π|–±–æ–ª—å—à–µ|–ø–ª—é—Å)?.*'
    application.add_handler(MessageHandler(filters.Regex(grow_penis_pattern) & filters.TEXT & ~filters.COMMAND, grow_penis)) # –î–æ–ª–∂–µ–Ω –≤—ã–∑—ã–≤–∞—Ç—å grow_penis

    my_penis_pattern = r'(?i).*\b(–±–æ—Ç|–ø–æ–ø–∏–∑–¥—è–∫–∞)\b.*(?:–º–æ—è –ø–∏—Å—å–∫–∞|–º–æ–π —Ö—É–π|–º–æ–π —á–ª–µ–Ω|–º–æ–π –ø–µ–Ω–∏—Å|–∫–∞–∫–æ–π —É –º–µ–Ω—è|—á—Ç–æ —Å –º–æ–µ–π –ø–∏–ø–∏—Å—å–∫–æ–π).*'
    application.add_handler(MessageHandler(filters.Regex(my_penis_pattern) & filters.TEXT & ~filters.COMMAND, show_my_penis)) # –î–æ–ª–∂–µ–Ω –≤—ã–∑—ã–≤–∞—Ç—å show_my_penis

    top_penis_pattern = r'(?i).*\b(–±–æ—Ç|–ø–æ–ø–∏–∑–¥—è–∫–∞)\b.*(?:—Ç–æ–ø –ø–∏—Å–µ–∫|—Ç–æ–ø —Ö—É–µ–≤|—Ä–µ–π—Ç–∏–Ω–≥ —á–ª–µ–Ω–æ–≤|—É –∫–æ–≥–æ —Å–∞–º—ã–π –±–æ–ª—å—à–æ–π).*'
    application.add_handler(MessageHandler(filters.Regex(top_penis_pattern) & filters.TEXT & ~filters.COMMAND, show_penis_top))
    # --->>> –ö–û–ù–ï–¶ –ü–†–û–í–ï–†–ö–ò <<<---

    grow_tits_pattern = r'(?i).*\b(–±–æ—Ç|–ø–æ–ø–∏–∑–¥—è–∫–∞)\b.*(—Å–∏—Å—å–∫–∏|–≥—Ä—É–¥—å|–¥—ã–Ω—å–∫–∏|–±—É—Ñ–µ—Ä–∞)\s*(?:—Ä–∞—Å—Ç–∏|–æ—Ç—Ä–∞—Å—Ç–∏|—É–≤–µ–ª–∏—á—å|–ø–æ–¥—Ä–∞—Å—Ç–∏|–Ω–∞–∫–∞—á–∞–π|–±–æ–ª—å—à–µ|–ø–ª—é—Å)?.*'
    application.add_handler(MessageHandler(filters.Regex(grow_tits_pattern) & filters.TEXT & ~filters.COMMAND, grow_tits))

    my_tits_pattern = r'(?i).*\b(–±–æ—Ç|–ø–æ–ø–∏–∑–¥—è–∫–∞)\b.*(?:–º–æ–∏ —Å–∏—Å—å–∫–∏|–º–æ—è –≥—Ä—É–¥—å|–∫–∞–∫–∏–µ —É –º–µ–Ω—è —Å–∏—Å—å–∫–∏).*'
    application.add_handler(MessageHandler(filters.Regex(my_tits_pattern) & filters.TEXT & ~filters.COMMAND, show_my_tits))

    top_tits_pattern = r'(?i).*\b(–±–æ—Ç|–ø–æ–ø–∏–∑–¥—è–∫–∞)\b.*(?:—Ç–æ–ø —Å–∏—Å–µ–∫|—Ä–µ–π—Ç–∏–Ω–≥ –≥—Ä—É–¥–µ–π|—É –∫–æ–≥–æ —Å–∞–º—ã–µ –±–æ–ª—å—à–∏–µ —Å–∏—Å—å–∫–∏).*'
    application.add_handler(MessageHandler(filters.Regex(top_tits_pattern) & filters.TEXT & ~filters.COMMAND, show_tits_top))

# –î–æ–±–∞–≤–ª—è–µ–º –ù–û–í–´–ï –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏, –∫–æ—Ç–æ—Ä—ã–µ —Ç—Ä–µ–±—É—é—Ç –û–¢–í–ï–¢–ê –Ω–∞ —Å–æ–æ–±—â–µ–Ω–∏–µ
    application.add_handler(CommandHandler("pickup", get_pickup_line, filters=filters.REPLY)) # –¢–æ–ª—å–∫–æ –≤ –æ—Ç–≤–µ—Ç–µ
    application.add_handler(CommandHandler("pickup_line", get_pickup_line, filters=filters.REPLY)) # –¢–æ–ª—å–∫–æ –≤ –æ—Ç–≤–µ—Ç–µ
    pickup_pattern = r'(?i).*\b(–±–æ—Ç|–ø–æ–ø–∏–∑–¥—è–∫–∞)\b.*(?:–ø–æ–¥–∫–∞—Ç|–ø–∏–∫–∞–ø|—Å–∫–ª–µ–π|–ø–æ–∑–Ω–∞–∫–æ–º—å—Å—è|–∑–∞–º—É—Ç–∏).*'
    application.add_handler(MessageHandler(filters.Regex(pickup_pattern) & filters.TEXT & filters.REPLY & ~filters.COMMAND, get_pickup_line)) # –¢–æ–ª—å–∫–æ –≤ –æ—Ç–≤–µ—Ç–µ
    # --->>> –ö–û–ù–ï–¶ –ò–ó–ú–ï–ù–ï–ù–ò–ô <<<---

     # --->>> –ò–ó–ú–ï–ù–Ø–ï–ú –û–ë–†–ê–ë–û–¢–ß–ò–ö–ò –ü–û–•–í–ê–õ–´ <<<---
    # –£–±–∏—Ä–∞–µ–º —Å—Ç–∞—Ä—ã–µ CommandHandler("praise"...) –∏ MessageHandler(praise_pattern...) –µ—Å–ª–∏ –æ–Ω–∏ –±—ã–ª–∏
    application.add_handler(CommandHandler("praise", praise_user, filters=filters.REPLY)) # –¢–æ–ª—å–∫–æ –≤ –æ—Ç–≤–µ—Ç–µ
    praise_pattern = r'(?i).*\b(–±–æ—Ç|–ø–æ–ø–∏–∑–¥—è–∫–∞)\b.*(?:–ø–æ—Ö–≤–∞–ª–∏|–º–æ–ª–æ–¥–µ—Ü|–∫—Ä–∞—Å–∞–≤—á–∏–∫)\s+(?:–µ–≥–æ|–µ–µ|—ç—Ç–æ–≥–æ|—ç—Ç—É).*'
    application.add_handler(MessageHandler(filters.Regex(praise_pattern) & filters.TEXT & filters.REPLY & ~filters.COMMAND, praise_user)) # –¢–æ–ª—å–∫–æ –≤ –æ—Ç–≤–µ—Ç–µ
    # --->>> –ö–û–ù–ï–¶ –ò–ó–ú–ï–ù–ï–ù–ò–ô <<<---

    gen_nick_pattern = r'(?i).*\b(–±–æ—Ç|–ø–æ–ø–∏–∑–¥—è–∫–∞)\b\s+(?:—Ä–∞–Ω–¥–æ–º–Ω—ã–π –Ω–∏–∫|—Å–ª—É—á–∞–π–Ω—ã–π –Ω–∏–∫|–ª—é–±–æ–π –Ω–∏–∫|—Å–º–µ–Ω–∏ –º–Ω–µ –Ω–∏–∫|–¥–∞–≤–∞–π –Ω–∏–∫|–ø—Ä–∏–¥—É–º–∞–π –Ω–∏–∫|–∫–∞–∫–æ–π –Ω–∏–±—É–¥—å –Ω–∏–∫|–∫–∞–∫–æ–π-–Ω–∏–±—É–¥—å –Ω–∏–∫|–Ω–æ–≤–æ–µ –∏–º—è|–Ω–æ–≤–æ–µ –ø–æ–≥–æ–Ω—è–ª–æ|—Å–≥–µ–Ω–µ—Ä–∏—Ä—É–π –Ω–∏–∫|–Ω–∏–∫ –ø–æ –≤—ã—Å–µ—Ä–∞–º).*'
    application.add_handler(MessageHandler(filters.Regex(gen_nick_pattern) & filters.TEXT & ~filters.COMMAND, generate_and_set_nickname))

    list_chats_pattern = r'(?i).*\b(–±–æ—Ç|–ø–æ–ø–∏–∑–¥—è–∫–∞)\b\s+(?:—Å–ø–∏—Å–æ–∫ —á–∞—Ç–æ–≤|–≥–¥–µ —Ç—ã –µ—Å—Ç—å|–≤ –∫–∞–∫–∏—Ö —á–∞—Ç–∞—Ö).*'
    application.add_handler(MessageHandler(filters.Regex(list_chats_pattern) & filters.TEXT & ~filters.COMMAND, list_bot_chats))

    application.add_handler(CommandHandler("tos_battle", start_tos_battle))
    tos_battle_rus_pattern = r'(?i)^\s*/(?:–ø–≤_–±–∞—Ç—Ç–ª|–ø–≤ –±–∞—Ç—Ç–ª|–±–∞—Ç—Ç–ª –ø–≤)\b.*' # –ù–∞—á–∏–Ω–∞–µ—Ç—Å—è —Å / –∏ –∑–∞—Ç–µ–º –∫–æ–º–∞–Ω–¥–∞
    application.add_handler(MessageHandler(filters.Regex(tos_battle_rus_pattern) & filters.COMMAND, start_tos_battle))
    tos_battle_pattern = r'(?i).*\b(–±–æ—Ç|–ø–æ–ø–∏–∑–¥—è–∫–∞)\b\s+(?:–ø–≤ –±–∞—Ç—Ç–ª|–ø—Ä–∞–≤–¥–∞ –∏–ª–∏ –≤—ã—Å–µ—Ä –±–∞—Ç—Ç–ª|–∑–∞—Ä—É–±–∞ –≤ –ø–≤|tos battle).*'
    application.add_handler(MessageHandler(filters.Regex(tos_battle_pattern) & filters.TEXT & ~filters.COMMAND, start_tos_battle))

    # –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è –∫–Ω–æ–ø–æ–∫ –±–∞—Ç—Ç–ª–∞
    application.add_handler(CallbackQueryHandler(tos_battle_button_callback, pattern=r'^tosbattle_.*'))

    close_project_pattern = r'(?i).*(?:–±–æ—Ç|–ø–æ–ø–∏–∑–¥—è–∫–∞).*(–∑–∞–∫—Ä–æ–π –ø—Ä–æ–µ–∫—Ç|–∑–∞–∫—Ä—ã—Ç—å –ø—Ä–æ–µ–∫—Ç|—Å—Ç–æ–ø –ø—Ä–æ–µ–∫—Ç|–∫–æ–Ω–µ—Ü|—Å–∞–º–æ—É–Ω–∏—á—Ç–æ–∂–µ–Ω–∏–µ).*'
    application.add_handler(MessageHandler(filters.Regex(close_project_pattern) & filters.TEXT & ~filters.COMMAND, close_project_command))

    
    # --->>> –î–û–ë–ê–í–õ–Ø–ï–ú –†–£–°–°–ö–ò–ï –ê–ù–ê–õ–û–ì–ò –î–õ–Ø –¢–ï–•–†–ê–ë–û–¢ <<<---
    # Regex –¥–ª—è –í–ö–õ—é—á–µ–Ω–∏—è —Ç–µ—Ö—Ä–∞–±–æ—Ç
    maint_on_pattern = r'(?i).*(?:–±–æ—Ç|–ø–æ–ø–∏–∑–¥—è–∫–∞).*(?:—Ç–µ—Ö—Ä–∞–±–æ—Ç|—Ä–µ–º–æ–Ω—Ç|–Ω–∞ —Ä–µ–º–æ–Ω—Ç|–æ–±—Å–ª—É–∂–∏–≤–∞–Ω–∏–µ|–∞–¥–º–∏–Ω –≤–∫–ª).*'
    # –õ–æ–≤–∏–º –¢–û–õ–¨–ö–û —Ç–µ–∫—Å—Ç, –ë–ï–ó –∫–æ–º–∞–Ω–¥, –≤ –õ–Æ–ë–û–ú —á–∞—Ç–µ (–ø—Ä–æ–≤–µ—Ä–∫–∞ –∞–¥–º–∏–Ω–∞ –∏ –õ–° –±—É–¥–µ—Ç –í–ù–£–¢–†–ò —Ñ—É–Ω–∫—Ü–∏–∏)
    application.add_handler(MessageHandler(filters.Regex(maint_on_pattern) & filters.TEXT & ~filters.COMMAND, maintenance_on)) # –í—ã–∑—ã–≤–∞–µ–º —Ç—É –∂–µ —Ñ—É–Ω–∫—Ü–∏—é!

    # Regex –¥–ª—è –í–´–ö–õ—é—á–µ–Ω–∏—è —Ç–µ—Ö—Ä–∞–±–æ—Ç
    maint_off_pattern = r'(?i).*(?:–±–æ—Ç|–ø–æ–ø–∏–∑–¥—è–∫–∞).*(?:—Ä–∞–±–æ—Ç–∞–π|—Ä–∞–±–æ—Ç–∞—Ç—å|–∫–æ–Ω—á–∏–ª|–∑–∞–∫–æ–Ω—á–∏–ª|—Ä–µ–º–æ–Ω—Ç –æ–∫–æ–Ω—á–µ–Ω|–∞–¥–º–∏–Ω –≤—ã–∫–ª).*'
    application.add_handler(MessageHandler(filters.Regex(maint_off_pattern) & filters.TEXT & ~filters.COMMAND, maintenance_off)) # –í—ã–∑—ã–≤–∞–µ–º —Ç—É –∂–µ —Ñ—É–Ω–∫—Ü–∏—é!
    # --->>> –ö–û–ù–ï–¶ –î–û–ë–ê–í–õ–ï–ù–ò–ô <<<---


    # –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –æ—Ç–≤–µ—Ç–æ–≤ –±–æ—Ç—É (–¥–æ–ª–∂–µ–Ω –∏–¥—Ç–∏ –ü–û–°–õ–ï regex –¥–ª—è –∫–æ–º–∞–Ω–¥!)
    application.add_handler(MessageHandler(filters.TEXT & filters.REPLY & ~filters.COMMAND, reply_to_bot_handler))

    # --->>> –í–û–¢ –≠–¢–ò –ü–Ø–¢–¨ –°–¢–†–û–ö –ù–£–ñ–ù–´ <<<---
    # 1. –¢–æ–ª—å–∫–æ –¥–ª—è –¢–ï–ö–°–¢–ê (–±–µ–∑ –∫–æ–º–∞–Ω–¥)
    application.add_handler(MessageHandler(filters.TEXT & ~filters.COMMAND, store_message))
    # 2. –¢–æ–ª—å–∫–æ –¥–ª—è –§–û–¢–û
    application.add_handler(MessageHandler(filters.PHOTO, store_message))
    # 3. –¢–æ–ª—å–∫–æ –¥–ª—è –°–¢–ò–ö–ï–†–û–í
    application.add_handler(MessageHandler(filters.Sticker.ALL, store_message))
    # 4. –¢–æ–ª—å–∫–æ –¥–ª—è –í–ò–î–ï–û
    application.add_handler(MessageHandler(filters.VIDEO, store_message))
    # 5. –¢–æ–ª—å–∫–æ –¥–ª—è –ì–û–õ–û–°–ê
    application.add_handler(MessageHandler(filters.VOICE, store_message))
    # --->>> –ö–û–ù–ï–¶ <<<---

    logger.info("–û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ Telegram –¥–æ–±–∞–≤–ª–µ–Ω—ã.")

    # –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –∏ –∑–∞–ø—É—Å–∫ Hypercorn + –±–æ—Ç–∞
    port = int(os.environ.get("PORT", 8080)); hypercorn_config = hypercorn.config.Config();
    hypercorn_config.bind = [f"0.0.0.0:{port}"]; hypercorn_config.worker_class = "asyncio"; hypercorn_config.shutdown_timeout = 60.0
    logger.info(f"–ö–æ–Ω—Ñ–∏–≥ Hypercorn: {hypercorn_config.bind}, worker={hypercorn_config.worker_class}")
    logger.info("–ó–∞–ø—É—Å–∫ –∑–∞–¥–∞—á Hypercorn –∏ Telegram –±–æ—Ç–∞...")
    shutdown_event = asyncio.Event(); bot_task = asyncio.create_task(run_bot_async(application), name="TelegramBotTask")
    server_task = asyncio.create_task(hypercorn_async_serve(app, hypercorn_config, shutdown_trigger=shutdown_event.wait), name="HypercornServerTask")

    # –û–∂–∏–¥–∞–Ω–∏–µ –∏ –æ–±—Ä–∞–±–æ—Ç–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è
    done, pending = await asyncio.wait([bot_task, server_task], return_when=asyncio.FIRST_COMPLETED)
    logger.warning(f"–ó–∞–¥–∞—á–∞ –∑–∞–≤–µ—Ä—à–∏–ª–∞—Å—å! Done: {done}, Pending: {pending}")
    if server_task in pending: logger.info("–û—Å—Ç–∞–Ω–æ–≤–∫–∞ Hypercorn..."); shutdown_event.set()
    logger.info("–û—Ç–º–µ–Ω–∞ –æ—Å—Ç–∞–ª—å–Ω—ã—Ö –∑–∞–¥–∞—á..."); [task.cancel() for task in pending]
    await asyncio.gather(*pending, return_exceptions=True)
    for task in done: # –ü—Ä–æ–≤–µ—Ä–∫–∞ –æ—à–∏–±–æ–∫
        logger.info(f"–ü—Ä–æ–≤–µ—Ä–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–Ω–æ–π –∑–∞–¥–∞—á–∏: {task.get_name()}")
        try: await task
        except asyncio.CancelledError: logger.info(f"–ó–∞–¥–∞—á–∞ {task.get_name()} –æ—Ç–º–µ–Ω–µ–Ω–∞.")
        except Exception as e: logger.error(f"–ó–∞–¥–∞—á–∞ {task.get_name()} –Ω–µ —É–¥–∞–ª–∞—Å—å: {e}", exc_info=True)
    logger.info("main() –∑–∞–∫–æ–Ω—á–µ–Ω–∞.")

# --- –¢–æ—á–∫–∞ –≤—Ö–æ–¥–∞ –≤ —Å–∫—Ä–∏–ø—Ç ---
if __name__ == "__main__":
    logger.info(f"–ó–∞–ø—É—Å–∫ —Å–∫—Ä–∏–ø—Ç–∞ bot.py...")
    # –°–æ–∑–¥–∞–µ–º .env —à–∞–±–ª–æ–Ω, –µ—Å–ª–∏ –Ω–∞–¥–æ
    if not os.path.exists('.env') and not os.getenv('RENDER'):
        logger.warning("–§–∞–π–ª .env –Ω–µ –Ω–∞–π–¥–µ–Ω...")
        try:
            with open('.env', 'w') as f: f.write(f"TELEGRAM_BOT_TOKEN=...\nIO_NET_API_KEY=...\nMONGO_DB_URL=...\n# MIR_CARD_NUMBER=...\n# TON_WALLET_ADDRESS=...\n# USDC_WALLET_ADDRESS=...\n# USDC_NETWORK=TRC20\n")
            logger.warning("–°–æ–∑–¥–∞–Ω –®–ê–ë–õ–û–ù —Ñ–∞–π–ª–∞ .env...")
        except Exception as e: logger.error(f"–ù–µ —É–¥–∞–ª–æ—Å—å —Å–æ–∑–¥–∞—Ç—å —à–∞–±–ª–æ–Ω .env: {e}")
    # –ü—Ä–æ–≤–µ—Ä–∫–∞ –∫–ª—é—á–µ–π
    if not TELEGRAM_BOT_TOKEN or not IO_NET_API_KEY or not MONGO_DB_URL: logger.critical("–û–¢–°–£–¢–°–¢–í–£–Æ–¢ –ö–õ–Æ–ß–ï–í–´–ï –ü–ï–†–ï–ú–ï–ù–ù–´–ï –û–ö–†–£–ñ–ï–ù–ò–Ø!"); exit(1)
    # –ó–∞–ø—É—Å–∫
    try: logger.info("–ó–∞–ø—É—Å–∫–∞—é asyncio.run(main())..."); asyncio.run(main()); logger.info("asyncio.run(main()) –∑–∞–≤–µ—Ä—à–µ–Ω.")
    except Exception as e: logger.critical(f"–ö–†–ò–¢–ò–ß–ï–°–ö–ê–Ø –û–®–ò–ë–ö–ê: {e}", exc_info=True); exit(1)
    finally: logger.info("–°–∫—Ä–∏–ø—Ç bot.py –∑–∞–≤–µ—Ä—à–∞–µ—Ç —Ä–∞–±–æ—Ç—É.")

# --- –ö–û–ù–ï–¶ –ê–ë–°–û–õ–Æ–¢–ù–û –ü–û–õ–ù–û–ì–û –ö–û–î–ê BOT.PY (AI.IO.NET –í–ï–†–°–ò–Ø - –§–ò–ù–ê–õ v2) ---
