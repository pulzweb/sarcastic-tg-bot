# --- –ù–ê–ß–ê–õ–û –ü–û–õ–ù–û–ì–û –ö–û–î–ê BOT.PY (–î–µ—Ç–µ–∫—Ç–∏–≤–Ω–æ–µ –ê–≥–µ–Ω—Ç—Å—Ç–≤–æ "–®–µ—Ä–ª–æ–∫ –ë–æ–ª–º—Å" v2.0 —Å –ö–ù–û–ü–ö–ê–ú–ò) ---
import logging
import os
import asyncio
import re
import datetime
import json
from flask import Flask, Response
import hypercorn.config
from hypercorn.asyncio import serve as hypercorn_async_serve
import pymongo
from pymongo.errors import PyMongoError
from bson.objectid import ObjectId

# –ò–º–ø–æ—Ä—Ç—ã –¥–ª—è AI.IO.NET
from openai import AsyncOpenAI, BadRequestError

# –ò–º–ø–æ—Ä—Ç—ã Telegram (–î–û–ë–ê–í–õ–ï–ù–´ –ö–ù–û–ü–ö–ò)
from telegram import Update, Bot, User, InlineKeyboardButton, InlineKeyboardMarkup
from telegram.ext import Application, CommandHandler, MessageHandler, filters, ContextTypes, CallbackQueryHandler
import telegram.error

from dotenv import load_dotenv

load_dotenv()

# --- –ù–ê–°–¢–†–û–ô–ö–ò ---
TELEGRAM_BOT_TOKEN = os.getenv("TELEGRAM_BOT_TOKEN")
IO_NET_API_KEY = os.getenv("IO_NET_API_KEY")
MONGO_DB_URL = os.getenv("MONGO_DB_URL")
ADMIN_USER_ID = int(os.getenv("ADMIN_USER_ID", "0"))

if not TELEGRAM_BOT_TOKEN: raise ValueError("–ù–ï –ù–ê–ô–î–ï–ù TELEGRAM_BOT_TOKEN!")
if not IO_NET_API_KEY: raise ValueError("–ù–ï –ù–ê–ô–î–ï–ù IO_NET_API_KEY!")
if not MONGO_DB_URL: raise ValueError("–ù–ï –ù–ê–ô–î–ï–ù–ê MONGO_DB_URL!")
if ADMIN_USER_ID == 0: print("–ü–†–ï–î–£–ü–†–ï–ñ–î–ï–ù–ò–ï: ADMIN_USER_ID –Ω–µ –∑–∞–¥–∞–Ω!")

# --- –õ–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ ---
logging.basicConfig(format="%(asctime)s - %(name)s - %(levelname)s - %(message)s", level=logging.INFO)
logging.getLogger("httpx").setLevel(logging.WARNING)
logging.getLogger("hypercorn").setLevel(logging.WARNING)
logger = logging.getLogger(__name__)

# --- –ü–û–î–ö–õ–Æ–ß–ï–ù–ò–ï –ö MONGODB ATLAS ---
try:
    mongo_client = pymongo.MongoClient(MONGO_DB_URL, serverSelectionTimeoutMS=5000)
    mongo_client.admin.command('ping')
    logger.info("–£—Å–ø–µ—à–Ω–æ–µ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ MongoDB Atlas!")
    db = mongo_client['sherlock_bolms_db']
    cases_collection = db['detective_cases']
    cases_collection.create_index([("chat_id", 1), ("status", 1)])
    logger.info("–ö–æ–ª–ª–µ–∫—Ü–∏—è detective_cases –≥–æ—Ç–æ–≤–∞.")
except Exception as e:
    logger.critical(f"–ü–ò–ó–î–ï–¶ –ø—Ä–∏ –Ω–∞—Å—Ç—Ä–æ–π–∫–µ MongoDB: {e}", exc_info=True)
    raise SystemExit(f"–û—à–∏–±–∫–∞ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ MongoDB: {e}")

# --- –ù–ê–°–¢–†–û–ô–ö–ê –ö–õ–ò–ï–ù–¢–ê AI.IO.NET API ---
try:
    ionet_client = AsyncOpenAI(api_key=IO_NET_API_KEY, base_url="https://api.intelligence.io.solutions/api/v1/")
    IONET_TEXT_MODEL_ID = "mistralai/Mistral-Large-Instruct-2411"
    logger.info(f"–ö–ª–∏–µ–Ω—Ç AsyncOpenAI –¥–ª—è ai.io.net API –Ω–∞—Å—Ç—Ä–æ–µ–Ω. –ú–æ–¥–µ–ª—å: {IONET_TEXT_MODEL_ID}")
except Exception as e:
     logger.critical(f"–ü–ò–ó–î–ï–¶ –ø—Ä–∏ –Ω–∞—Å—Ç—Ä–æ–π–∫–µ –∫–ª–∏–µ–Ω—Ç–∞ ai.io.net: {e}", exc_info=True)
     raise SystemExit(f"–ù–µ —É–¥–∞–ª–æ—Å—å –Ω–∞—Å—Ç—Ä–æ–∏—Ç—å –∫–ª–∏–µ–Ω—Ç–∞ ai.io.net: {e}")

# --- –í–°–ü–û–ú–û–ì–ê–¢–ï–õ–¨–ù–´–ï –§–£–ù–ö–¶–ò–ò ---

async def _call_ionet_api(messages: list, model_id: str, max_tokens: int, temperature: float) -> str | None:
    try:
        response = await ionet_client.chat.completions.create(model=model_id, messages=messages, max_tokens=max_tokens, temperature=temperature)
        if response.choices and response.choices[0].message and response.choices[0].message.content:
            return response.choices[0].message.content.strip()
        else: 
            logger.warning(f"–û—Ç–≤–µ—Ç –æ—Ç {model_id} –ø—É—Å—Ç/–Ω–µ–∫–æ—Ä—Ä–µ–∫—Ç–µ–Ω: {response}")
            return None
    except BadRequestError as e:
        logger.error(f"–û—à–∏–±–∫–∞ BadRequest –æ—Ç ai.io.net API ({model_id}): {e.status_code} - {e.body}", exc_info=False)
        return f"[–û—à–∏–±–∫–∞ API: {e.status_code}]"
    except Exception as e:
        logger.error(f"–ü–ò–ó–î–ï–¶ –ø—Ä–∏ –≤—ã–∑–æ–≤–µ ai.io.net API ({model_id}): {e}", exc_info=True)
        return f"[–ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞ API: {type(e).__name__}]"

async def _get_active_case(chat_id: int) -> dict | None:
    loop = asyncio.get_running_loop()
    return await loop.run_in_executor(None, lambda: cases_collection.find_one({"chat_id": chat_id, "status": "active"}))

# --- –ù–û–í–ê–Ø –¶–ï–ù–¢–†–ê–õ–¨–ù–ê–Ø –§–£–ù–ö–¶–ò–Ø –î–õ–Ø –û–¢–û–ë–†–ê–ñ–ï–ù–ò–Ø –ò–ù–§–û –ò –ö–ù–û–ü–û–ö ---
async def show_or_update_case_info(context: ContextTypes.DEFAULT_TYPE, chat_id: int, message_id: int | None = None):
    """
    –û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç –∏–ª–∏ –æ–±–Ω–æ–≤–ª—è–µ—Ç –≥–ª–∞–≤–Ω–æ–µ –∏–≥—Ä–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ, —Å–æ–¥–µ—Ä–∂–∞—â–µ–µ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –¥–µ–ª–µ –∏ –∫–Ω–æ–ø–∫–∏ –¥–µ–π—Å—Ç–≤–∏–π.
    """
    case = await _get_active_case(chat_id)
    if not case:
        try:
            if message_id:
                await context.bot.edit_message_text(chat_id=chat_id, message_id=message_id, text="üóø –≠—Ç–æ –¥–µ–ª–æ —É–∂–µ –∑–∞–∫—Ä—ã—Ç–æ –∏–ª–∏ –Ω–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç.")
                await context.bot.edit_message_reply_markup(chat_id=chat_id, message_id=message_id, reply_markup=None)
        except Exception:
            pass
        return

    case_data = case.get("case_data", {})
    
    # –§–æ—Ä–º–∏—Ä—É–µ–º —Ç–µ–∫—Å—Ç–æ–≤—É—é —á–∞—Å—Ç—å
    suspects_text = ", ".join([s['name'] for s in case_data.get("suspects", [])])
    locations_text = ", ".join([l['name'] for l in case_data.get("locations", [])])
    found_clues_text = "\n".join([f"  ‚Ä¢ {clue}" for clue in case.get("found_clues", [])]) or "–ù–∏ –æ–¥–Ω–æ–π —Å—Ä–∞–Ω–æ–π —É–ª–∏–∫–∏ –ø–æ–∫–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ."
    info_text = (
        f"<b>–°–≤–æ–¥–∫–∞ –ø–æ –¥–µ–ª—É ‚Ññ{case['case_id']}</b>\n\n"
        f"<b>–°—Ç–∞—Ç—É—Å:</b> –í –ø—Ä–æ—Ü–µ—Å—Å–µ, –∏ –≤—ã, –∫–∞–∫ –æ–±—ã—á–Ω–æ, —Ç—É–ø–∏—Ç–µ.\n\n"
        f"<b>–ü–æ–¥–æ–∑—Ä–µ–≤–∞–µ–º—ã–µ:</b> {suspects_text}\n"
        f"<b>–õ–æ–∫–∞—Ü–∏–∏:</b> {locations_text}\n\n"
        f"<b><u>–ù–∞–π–¥–µ–Ω–Ω—ã–µ —É–ª–∏–∫–∏:</u></b>\n{found_clues_text}\n\n"
        f"üóø <b>–í–∞—à–∏ –¥–µ–π—Å—Ç–≤–∏—è, —Å–∞–ª–∞–≥–∏?</b>"
    )

    # –§–æ—Ä–º–∏—Ä—É–µ–º –∫–Ω–æ–ø–∫–∏
    keyboard = []
    
    # –ö–Ω–æ–ø–∫–∏ –¥–æ–ø—Ä–æ—Å–∞
    suspects_buttons = [
        InlineKeyboardButton(f"–î–æ–ø—Ä–æ—Å–∏—Ç—å: {s['name']}", callback_data=f"detective:interrogate:{s['name']}")
        for s in case_data.get("suspects", [])
    ]
    # –î–µ–ª–∞–µ–º —Ä—è–¥—ã –ø–æ 2 –∫–Ω–æ–ø–∫–∏, –µ—Å–ª–∏ –ø–æ–¥–æ–∑—Ä–µ–≤–∞–µ–º—ã—Ö –º–Ω–æ–≥–æ
    for i in range(0, len(suspects_buttons), 2):
        keyboard.append(suspects_buttons[i:i + 2])
        
    # –ö–Ω–æ–ø–∫–∏ –æ–±—ã—Å–∫–∞
    locations_buttons = [
        InlineKeyboardButton(f"–û–±—ã—Å–∫–∞—Ç—å: {l['name']}", callback_data=f"detective:search:{l['name']}")
        for l in case_data.get("locations", [])
    ]
    for i in range(0, len(locations_buttons), 2):
        keyboard.append(locations_buttons[i:i + 2])
        
    # –ö–Ω–æ–ø–∫–∞ –æ–±–≤–∏–Ω–µ–Ω–∏—è
    keyboard.append([InlineKeyboardButton(" –≤—ã–¥–≤–∏–Ω—É—Ç—å –æ–±–≤–∏–Ω–µ–Ω–∏–µ!", callback_data="detective:accuse_menu")])
    
    reply_markup = InlineKeyboardMarkup(keyboard)

    try:
        if message_id:
            # –û–±–Ω–æ–≤–ª—è–µ–º —Å—É—â–µ—Å—Ç–≤—É—é—â–µ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
            await context.bot.edit_message_text(chat_id=chat_id, message_id=message_id, text=info_text, parse_mode='HTML', reply_markup=reply_markup)
        else:
            # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –Ω–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
            await context.bot.send_message(chat_id=chat_id, text=info_text, parse_mode='HTML', reply_markup=reply_markup)
    except telegram.error.BadRequest as e:
        if "message is not modified" not in str(e).lower():
            logger.warning(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏ –∏–≥—Ä–æ–≤–æ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è: {e}")
    except Exception as e:
        logger.error(f"–ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ/–æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏ –∏–≥—Ä–æ–≤–æ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è: {e}", exc_info=True)


# --- –õ–û–ì–ò–ö–ê –ì–ï–ù–ï–†–ê–¶–ò–ò –î–ï–õ–ê (–±–µ–∑ –∏–∑–º–µ–Ω–µ–Ω–∏–π) ---
async def _generate_new_case_data(context: ContextTypes.DEFAULT_TYPE) -> dict | None:
    logger.info("–ó–∞–ø—Ä–æ—Å –∫ –ò–ò –Ω–∞ –≥–µ–Ω–µ—Ä–∞—Ü–∏—é –Ω–æ–≤–æ–≥–æ –¥–µ—Ç–µ–∫—Ç–∏–≤–Ω–æ–≥–æ –¥–µ–ª–∞...")
    prompt = (
        "–¢—ã ‚Äî –≥–µ–Ω–∏–∞–ª—å–Ω—ã–π, –Ω–æ —Ü–∏–Ω–∏—á–Ω—ã–π —Å—Ü–µ–Ω–∞—Ä–∏—Å—Ç –¥–µ—Ç–µ–∫—Ç–∏–≤–Ω—ã—Ö –∏—Å—Ç–æ—Ä–∏–π –≤ —Å—Ç–∏–ª–µ –Ω—É–∞—Ä. "
        "–°–æ–∑–¥–∞–π –∫–æ—Ä–æ—Ç–∫–æ–µ –¥–µ—Ç–µ–∫—Ç–∏–≤–Ω–æ–µ –¥–µ–ª–æ –¥–ª—è –≥—Ä—É–ø–ø—ã –∏–≥—Ä–æ–∫–æ–≤. "
        "–ü—Ä–∏–¥—É–º–∞–π –ø—Ä–µ—Å—Ç—É–ø–ª–µ–Ω–∏–µ, 3-—Ö –∫–æ–ª–æ—Ä–∏—Ç–Ω—ã—Ö –ø–æ–¥–æ–∑—Ä–µ–≤–∞–µ–º—ã—Ö —Å –æ–ø–∏—Å–∞–Ω–∏–µ–º –∏ –º–æ—Ç–∏–≤–∞–º–∏, –∏ —Ç–∞–π–Ω–æ —Ä–µ—à–∏, –∫—Ç–æ –∏–∑ –Ω–∏—Ö –≤–∏–Ω–æ–≤–µ–Ω. "
        "–ü—Ä–∏–¥—É–º–∞–π 3-4 —É–Ω–∏–∫–∞–ª—å–Ω—ã–µ —É–ª–∏–∫–∏ (–æ–¥–Ω–∞ –∏–∑ –Ω–∏—Ö –º–æ–∂–µ—Ç –±—ã—Ç—å –ª–æ–∂–Ω–æ–π) –∏ —Ä–∞–∑–±—Ä–æ—Å–∞–π –∏—Ö –ø–æ 2-3 –ª–æ–∫–∞—Ü–∏—è–º. "
        "–¢–≤–æ–π –æ—Ç–≤–µ—Ç –î–û–õ–ñ–ï–ù –ë–´–¢–¨ —Å—Ç—Ä–æ–≥–æ –≤ —Ñ–æ—Ä–º–∞—Ç–µ JSON. –ù–∏–∫–∞–∫–æ–≥–æ —Ç–µ–∫—Å—Ç–∞ –¥–æ –∏–ª–∏ –ø–æ—Å–ª–µ JSON. "
        "–ü—Ä–∏–º–µ—Ä —Ñ–æ—Ä–º–∞—Ç–∞ JSON:\n"
        "{\n"
        "  \"crime_description\": \"–í—á–µ—Ä–∞ –Ω–æ—á—å—é –∏–∑ —Å–µ–π—Ñ–∞ –∏–∑–≤–µ—Å—Ç–Ω–æ–≥–æ —Ñ–∏–ª–∞—Ç–µ–ª–∏—Å—Ç–∞ –ì–µ–Ω—Ä–∏—Ö–∞ –®—Ç–∞–º–ø–∞ –±—ã–ª–∞ —É–∫—Ä–∞–¥–µ–Ω–∞ —Ä–µ–¥—á–∞–π—à–∞—è –º–∞—Ä–∫–∞ '–ì–æ–ª—É–±–æ–π –ú–∞–≤—Ä–∏–∫–∏–π'.\",\n"
        "  \"victim\": \"–ì–µ–Ω—Ä–∏—Ö –®—Ç–∞–º–ø (–µ–≥–æ –æ–≥—Ä–∞–±–∏–ª–∏)\",\n"
        "  \"guilty_suspect_name\": \"–î–≤–æ—Ä–µ—Ü–∫–∏–π –î–∂–µ–π–º—Å\",\n"
        "  \"suspects\": [\n"
        "    {\"name\": \"–î–≤–æ—Ä–µ—Ü–∫–∏–π –î–∂–µ–π–º—Å\", \"description\": \"–í–µ—Ä–Ω—ã–π —Å–ª—É–≥–∞ —Å —Å–æ—Ä–æ–∫–∞–ª–µ—Ç–Ω–∏–º —Å—Ç–∞–∂–µ–º, –Ω–æ —Å –æ–≥—Ä–æ–º–Ω—ã–º–∏ –∏–≥–æ—Ä–Ω—ã–º–∏ –¥–æ–ª–≥–∞–º–∏.\", \"alibi\": \"–£—Ç–≤–µ—Ä–∂–¥–∞–µ—Ç, —á—Ç–æ –≤—Å—é –Ω–æ—á—å –ø–æ–ª–∏—Ä–æ–≤–∞–ª —Ñ–∞–º–∏–ª—å–Ω–æ–µ —Å–µ—Ä–µ–±—Ä–æ –≤ –ø–æ–¥–≤–∞–ª–µ.\", \"dialogue_hint\": \"–ì–æ–≤–æ—Ä–∏—Ç —Å–±–∏–≤—á–∏–≤–æ, –ø–æ—Å—Ç–æ—è–Ω–Ω–æ –æ–≥–ª—è–¥—ã–≤–∞–µ—Ç—Å—è.\"},\n"
        "    {\"name\": \"–ü–ª–µ–º—è–Ω–Ω–∏—Ü–∞ –í–µ—Ä–æ–Ω–∏–∫–∞\", \"description\": \"–ï–¥–∏–Ω—Å—Ç–≤–µ–Ω–Ω–∞—è –Ω–∞—Å–ª–µ–¥–Ω–∏—Ü–∞, –∫–æ—Ç–æ—Ä–æ–π –¥—è–¥—è –≥—Ä–æ–∑–∏–ª—Å—è —É—Ä–µ–∑–∞—Ç—å —Å–æ–¥–µ—Ä–∂–∞–Ω–∏–µ.\", \"alibi\": \"–ë—ã–ª–∞ –Ω–∞ —Å–≤–µ—Ç—Å–∫–æ–º —Ä–∞—É—Ç–µ, –Ω–æ —É—à–ª–∞ —Å –Ω–µ–≥–æ –ø–æ—Ä–∞–Ω—å—à–µ.\", \"dialogue_hint\": \"–í–µ–¥–µ—Ç —Å–µ–±—è –≤—ã—Å–æ–∫–æ–º–µ—Ä–Ω–æ, –Ω–æ –≤ –≥–ª–∞–∑–∞—Ö —Å—Ç—Ä–∞—Ö.\"},\n"
        "    {\"name\": \"–ö–æ–Ω–∫—É—Ä–µ–Ω—Ç-–∫–æ–ª–ª–µ–∫—Ü–∏–æ–Ω–µ—Ä –ë–æ–±–±–∏\", \"description\": \"–î–∞–≤–Ω–æ –ø—ã—Ç–∞–ª—Å—è –≤—ã–∫—É–ø–∏—Ç—å –º–∞—Ä–∫—É —É –ì–µ–Ω—Ä–∏—Ö–∞, –Ω–æ –ø–æ–ª—É—á–∞–ª –æ—Ç–∫–∞–∑.\", \"alibi\": \"–°–∏–¥–µ–ª –≤ –±–∞—Ä–µ, —á—Ç–æ –º–æ–≥—É—Ç –ø–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç—å –¥–≤–∞ —Å–æ–±—É—Ç—ã–ª—å–Ω–∏–∫–∞.\", \"dialogue_hint\": \"–ß—Ä–µ–∑–º–µ—Ä–Ω–æ —É–≤–µ—Ä–µ–Ω –≤ —Å–µ–±–µ, –Ω–∞—Å–º–µ—Ö–∞–µ—Ç—Å—è –Ω–∞–¥ —Å–ª–µ–¥—Å—Ç–≤–∏–µ–º.\"}\n"
        "  ],\n"
        "  \"locations\": [\n"
        "    {\"name\": \"–ö–∞–±–∏–Ω–µ—Ç –ì–µ–Ω—Ä–∏—Ö–∞\", \"description\": \"–†–æ—Å–∫–æ—à–Ω—ã–π –∫–∞–±–∏–Ω–µ—Ç —Å –¥—É–±–æ–≤—ã–º —Å—Ç–æ–ª–æ–º –∏ –≤—Å–∫—Ä—ã—Ç—ã–º —Å–µ–π—Ñ–æ–º.\", \"clues_here\": [\"–ì—Ä—è–∑–Ω—ã–π —Å–ª–µ–¥ –æ—Ç –±–æ—Ç–∏–Ω–∫–∞ 45-–≥–æ —Ä–∞–∑–º–µ—Ä–∞\", \"–û–≥–∞—Ä–æ–∫ –¥–µ—à–µ–≤–æ–π —Å–∏–≥–∞—Ä–µ—Ç—ã –≤ –ø–µ–ø–µ–ª—å–Ω–∏—Ü–µ\"]},\n"
        "    {\"name\": \"–ö–æ–º–Ω–∞—Ç–∞ –î–≤–æ—Ä–µ—Ü–∫–æ–≥–æ\", \"description\": \"–°–∫—Ä–æ–º–Ω–∞—è –∫–∞–º–æ—Ä–∫–∞ –ø–æ–¥ –ª–µ—Å—Ç–Ω–∏—Ü–µ–π.\", \"clues_here\": [\"–°–≤–µ–∂–∞—è –∫–≤–∏—Ç–∞–Ω—Ü–∏—è –∏–∑ –ª–æ–º–±–∞—Ä–¥–∞ –Ω–∞ –∫—Ä—É–ø–Ω—É—é —Å—É–º–º—É\"]},\n"
        "    {\"name\": \"–û—Ä–∞–Ω–∂–µ—Ä–µ—è\", \"description\": \"–¢–∏—Ö–æ–µ –º–µ—Å—Ç–æ —Å —ç–∫–∑–æ—Ç–∏—á–µ—Å–∫–∏–º–∏ —Ä–∞—Å—Ç–µ–Ω–∏—è–º–∏.\", \"clues_here\": [\"–°–ª–æ–º–∞–Ω–Ω—ã–π –∫–∞–±–ª—É–∫ –æ—Ç –∂–µ–Ω—Å–∫–æ–π —Ç—É—Ñ–µ–ª—å–∫–∏ (–ª–æ–∂–Ω–∞—è —É–ª–∏–∫–∞)\"]}\n"
        "  ]\n"
        "}"
    )
    try:
        response = await _call_ionet_api([{"role": "user", "content": prompt}], IONET_TEXT_MODEL_ID, 2048, 0.85)
        if not response or response.startswith("["):
            logger.error(f"–ò–ò –≤–µ—Ä–Ω—É–ª –æ—à–∏–±–∫—É –ø—Ä–∏ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –¥–µ–ª–∞: {response}")
            return None
        json_match = re.search(r"\{.*\}", response, re.DOTALL)
        if not json_match:
            logger.error(f"–ù–µ —É–¥–∞–ª–æ—Å—å –Ω–∞–π—Ç–∏ JSON –≤ –æ—Ç–≤–µ—Ç–µ –ò–ò. –û—Ç–≤–µ—Ç –±—ã–ª: {response}")
            return None
        case_data = json.loads(json_match.group(0))
        required_keys = ["crime_description", "guilty_suspect_name", "suspects", "locations"]
        if not all(key in case_data for key in required_keys):
            logger.error(f"–°–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–Ω–Ω—ã–π JSON –Ω–µ —Å–æ–¥–µ—Ä–∂–∏—Ç –≤—Å–µ—Ö –æ–±—è–∑–∞—Ç–µ–ª—å–Ω—ã—Ö –∫–ª—é—á–µ–π. –ü–æ–ª—É—á–µ–Ω–æ: {case_data.keys()}")
            return None
        return case_data
    except json.JSONDecodeError as e:
        logger.error(f"–û—à–∏–±–∫–∞ –¥–µ–∫–æ–¥–∏—Ä–æ–≤–∞–Ω–∏—è JSON –æ—Ç –ò–ò: {e}\n–û—Ç–≤–µ—Ç –ò–ò –±—ã–ª: {response}")
        return None
    except Exception as e:
        logger.error(f"–ù–µ–ø—Ä–µ–¥–≤–∏–¥–µ–Ω–Ω–∞—è –æ—à–∏–±–∫–∞ –ø—Ä–∏ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –¥–µ–ª–∞: {e}", exc_info=True)
        return None

# --- –ö–û–ú–ê–ù–î–´-–û–ë–†–ê–ë–û–¢–ß–ò–ö–ò ---

async def help_command(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    help_text = (
        "üóø –ê–≥–µ–Ω—Ç—Å—Ç–≤–æ \"–®–µ—Ä–ª–æ–∫ –ë–æ–ª–º—Å\" —Å–ª—É—à–∞–µ—Ç. –Ø –∑–¥–µ—Å—å, —á—Ç–æ–±—ã —Ä–∞—Å–ø—É—Ç—ã–≤–∞—Ç—å —Å–∞–º—ã–µ –≥—Ä—è–∑–Ω—ã–µ –¥–µ–ª–∏—à–∫–∏. "
        "–ê –≤—ã, —Å–∞–ª–∞–≥–∏, ‚Äî –º–æ–∏ –≥–ª–∞–∑–∞ –∏ —É—à–∏. –í–æ—Ç —á—Ç–æ –≤—ã –º–æ–∂–µ—Ç–µ –¥–µ–ª–∞—Ç—å:\n\n"
        "<b>/new_case</b> ‚Äî –ù–∞—á–∞—Ç—å –Ω–æ–≤–æ–µ —Ä–∞—Å—Å–ª–µ–¥–æ–≤–∞–Ω–∏–µ.\n\n"
        "<b>/case_info</b> ‚Äî –ü–æ–∫–∞–∑–∞—Ç—å –ø–∞–Ω–µ–ª—å —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è —Ç–µ–∫—É—â–∏–º –¥–µ–ª–æ–º, –µ—Å–ª–∏ –æ–Ω–∞ –∫—É–¥–∞-—Ç–æ –ø—Ä–æ–ø–∞–ª–∞.\n\n"
        "–í—Å–µ –æ—Å—Ç–∞–ª—å–Ω—ã–µ –¥–µ–π—Å—Ç–≤–∏—è –≤—ã–ø–æ–ª–Ω—è—é—Ç—Å—è —á–µ—Ä–µ–∑ <b>–∫–Ω–æ–ø–∫–∏</b> –ø–æ–¥ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–æ–Ω–Ω—ã–º —Å–æ–æ–±—â–µ–Ω–∏–µ–º. "
        "–ï—Å–ª–∏ –≤—ã –∏—Ö –Ω–µ –≤–∏–¥–∏—Ç–µ, –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ <code>/case_info</code>."
    )
    await update.message.reply_text(help_text, parse_mode='HTML')

async def start_new_case(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    chat_id = update.message.chat_id
    if await _get_active_case(chat_id):
        await update.message.reply_text("üóø –≠–π, —Ç–æ—Ä–º–æ–∑–∏. –û–¥–Ω–æ –¥–µ–ª–æ –∑–∞ —Ä–∞–∑. –°–Ω–∞—á–∞–ª–∞ –∑–∞–∫–æ–Ω—á–∏—Ç–µ —Å —Ç–µ–∫—É—â–∏–º. –ò—Å–ø–æ–ª—å–∑—É–π /case_info, —á—Ç–æ–±—ã —É–≤–∏–¥–µ—Ç—å –∫–Ω–æ–ø–∫–∏.")
        return

    thinking_msg = await update.message.reply_text("üóø –ü—Ä–∏–Ω—è–ª. –ö–æ–ø–∞—é—Å—å –≤ –∞—Ä—Ö–∏–≤–∞—Ö, –∏—â—É –¥–ª—è –≤–∞—Å –ø–æ–¥—Ö–æ–¥—è—â—É—é –≥—Ä—è–∑—å... –≠—Ç–æ –º–æ–∂–µ—Ç –∑–∞–Ω—è—Ç—å –º–∏–Ω—É—Ç—É.")

    case_data = await _generate_new_case_data(context)
    try:
        await context.bot.delete_message(chat_id=chat_id, message_id=thinking_msg.message_id)
    except Exception: pass

    if not case_data:
        await update.message.reply_text("üóø –ü–∏–∑–¥–µ—Ü. –í–¥–æ—Ö–Ω–æ–≤–µ–Ω–∏–µ –ø–æ–∫–∏–Ω—É–ª–æ –º–µ–Ω—è, –∏–ª–∏ –º–æ–π –∏–Ω—Ñ–æ—Ä–º–∞—Ç–æ—Ä —É—à–µ–ª –≤ –∑–∞–ø–æ–π. –ù–µ –º–æ–≥—É —Å–µ–π—á–∞—Å –ø—Ä–∏–¥—É–º–∞—Ç—å –¥–µ–ª–æ. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.")
        return

    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –ø–µ—Ä–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –æ –¥–µ–ª–µ (–æ–Ω–æ –±—É–¥–µ—Ç –±–µ–∑ –∫–Ω–æ–ø–æ–∫)
    start_message_text = (
        f"üö® <b>–ù–û–í–û–ï –î–ï–õ–û –ê–ì–ï–ù–¢–°–¢–í–ê \"–®–ï–†–õ–û–ö –ë–û–õ–ú–°\"</b> üö®\n\n"
        f"<b><u>–§–∞–±—É–ª–∞:</u></b>\n{case_data['crime_description']}"
    )
    case_msg = await update.message.reply_text(start_message_text, parse_mode='HTML')

    db_document = {
        "chat_id": chat_id, "case_id": case_msg.message_id, "status": "active",
        "start_time": datetime.datetime.now(datetime.timezone.utc),
        "case_data": case_data, "found_clues": [], "interrogation_log": {}
    }
    cases_collection.insert_one(db_document)
    logger.info(f"–ù–æ–≤–æ–µ –¥–µ–ª–æ {case_msg.message_id} —Å–æ–∑–¥–∞–Ω–æ –¥–ª—è —á–∞—Ç–∞ {chat_id}.")
    
    # –°—Ä–∞–∑—É –ø–æ—Å–ª–µ —ç—Ç–æ–≥–æ –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º –ø–∞–Ω–µ–ª—å —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è
    await show_or_update_case_info(context, chat_id)

async def case_info_command(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /case_info."""
    chat_id = update.message.chat_id
    case = await _get_active_case(chat_id)
    if not case:
        await update.message.reply_text("üóø –£ –Ω–∞—Å –Ω–µ—Ç –∞–∫—Ç–∏–≤–Ω—ã—Ö –¥–µ–ª. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ `/new_case`.")
        return
    await show_or_update_case_info(context, chat_id)


# --- –ù–û–í–´–ô –ï–î–ò–ù–´–ô –û–ë–†–ê–ë–û–¢–ß–ò–ö –ö–ù–û–ü–û–ö ---
async def detective_button_callback(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    query = update.callback_query
    await query.answer() # –û–±—è–∑–∞—Ç–µ–ª—å–Ω–æ –æ—Ç–≤–µ—á–∞–µ–º –Ω–∞ callback

    chat_id = query.message.chat_id
    message_id = query.message.message_id
    
    # –ü–∞—Ä—Å–∏–º –¥–∞–Ω–Ω—ã–µ –∫–Ω–æ–ø–∫–∏: detective:action:data
    try:
        _, action, *data_parts = query.data.split(':')
        data = ":".join(data_parts) # –ù–∞ —Å–ª—É—á–∞–π, –µ—Å–ª–∏ –≤ –¥–∞–Ω–Ω—ã—Ö (–∏–º–µ–Ω–∏) –µ—Å—Ç—å –¥–≤–æ–µ—Ç–æ—á–∏–µ
    except ValueError:
        logger.error(f"–ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π callback_data: {query.data}")
        return

    case = await _get_active_case(chat_id)
    if not case:
        await context.bot.edit_message_text(chat_id=chat_id, message_id=message_id, text="üóø –≠—Ç–æ –¥–µ–ª–æ —É–∂–µ –∑–∞–∫—Ä—ã—Ç–æ.")
        await context.bot.edit_message_reply_markup(chat_id=chat_id, message_id=message_id, reply_markup=None)
        return

    # --- –ú–∞—Ä—à—Ä—É—Ç–∏–∑–∞—Ü–∏—è –¥–µ–π—Å—Ç–≤–∏–π –ø–æ –∫–Ω–æ–ø–∫–∞–º ---
    
    if action == 'interrogate':
        target_name = data
        suspect_data = next((s for s in case["case_data"].get("suspects", []) if s["name"] == target_name), None)
        if not suspect_data: return
        
        is_guilty = (suspect_data["name"] == case["case_data"]["guilty_suspect_name"])
        prompt = (f"–¢—ã ‚Äî –∞–∫—Ç–µ—Ä, –∏–≥—Ä–∞—é—â–∏–π —Ä–æ–ª—å –ø–µ—Ä—Å–æ–Ω–∞–∂–∞ –ø–æ –∏–º–µ–Ω–∏ {suspect_data['name']}... [–ø—Ä–æ–º–ø—Ç –∫–∞–∫ —Ä–∞–Ω—å—à–µ]") # –°–æ–∫—Ä–∞—â–µ–Ω–æ –¥–ª—è –∫—Ä–∞—Ç–∫–æ—Å—Ç–∏
        response = await _call_ionet_api([{"role": "user", "content": prompt}], IONET_TEXT_MODEL_ID, 300, 0.9) or "..."
        final_text = f"<b>–î–æ–ø—Ä–æ—Å: {suspect_data['name']}</b>\n\n<i>{response}</i>"
        await context.bot.send_message(chat_id=chat_id, text=final_text, parse_mode='HTML')
        # –û–±–Ω–æ–≤–ª—è–µ–º –ø–∞–Ω–µ–ª—å —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –ø–æ—Å–ª–µ –¥–µ–π—Å—Ç–≤–∏—è
        await show_or_update_case_info(context, chat_id, message_id)

    elif action == 'search':
        target_location_name = data
        location_data = next((loc for loc in case["case_data"].get("locations", []) if loc["name"] == target_location_name), None)
        if not location_data: return

        clues_in_location = location_data.get("clues_here", [])
        found_clues_in_db = case.get("found_clues", [])
        newly_found_clues = [clue for clue in clues_in_location if clue not in found_clues_in_db]

        result_text = f"<b>–û–±—ã—Å–∫: {location_data['name']}</b>\n\n"
        if not newly_found_clues:
            result_text += "–í—ã –≤—Å–µ —Ç—É—Ç —É–∂–µ –ø–µ—Ä–µ—Ä—ã–ª–∏. –ë–æ–ª—å—à–µ –Ω–∏—á–µ–≥–æ –∏–Ω—Ç–µ—Ä–µ—Å–Ω–æ–≥–æ."
        else:
            for clue in newly_found_clues:
                result_text += f"üîç –ù–∞–π–¥–µ–Ω–∞ —É–ª–∏–∫–∞: <b>{clue}</b>\n"
            cases_collection.update_one({"_id": case["_id"]}, {"$push": {"found_clues": {"$each": newly_found_clues}}})
        
        await context.bot.send_message(chat_id=chat_id, text=result_text, parse_mode='HTML')
        # –û–±–Ω–æ–≤–ª—è–µ–º –ø–∞–Ω–µ–ª—å —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –ø–æ—Å–ª–µ –¥–µ–π—Å—Ç–≤–∏—è
        await show_or_update_case_info(context, chat_id, message_id)

    elif action == 'accuse_menu':
        # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –º–µ–Ω—é —Å –≤—ã–±–æ—Ä–æ–º, –∫–æ–≥–æ –æ–±–≤–∏–Ω–∏—Ç—å
        suspects = case["case_data"].get("suspects", [])
        keyboard = [
            [InlineKeyboardButton(f"–í–∏–Ω–æ–≤–µ–Ω: {s['name']}", callback_data=f"detective:accuse_confirm:{s['name']}")] for s in suspects
        ]
        keyboard.append([InlineKeyboardButton("–û—Ç–º–µ–Ω–∞", callback_data="detective:info")])
        await query.edit_message_text(text="üóø –ö–æ–≥–æ –≤—ã –æ–±–≤–∏–Ω—è–µ—Ç–µ? –≠—Ç–æ –≤–∞—à —Ñ–∏–Ω–∞–ª—å–Ω—ã–π –æ—Ç–≤–µ—Ç.", reply_markup=InlineKeyboardMarkup(keyboard))
        
    elif action == 'accuse_confirm':
        # –ó–∞–≤–µ—Ä—à–∞–µ–º –¥–µ–ª–æ
        accused_name = data
        guilty_suspect_name = case["case_data"]["guilty_suspect_name"]
        is_correct = (accused_name.lower() == guilty_suspect_name.lower())
        final_status = "solved_success" if is_correct else "solved_fail"
        
        cases_collection.update_one({"_id": case["_id"]}, {"$set": {"status": final_status}})
        try:
            await context.bot.unpin_chat_message(chat_id=chat_id, message_id=case["case_id"])
        except Exception: pass

        prompt = (f"–¢—ã ‚Äî –≥–µ–Ω–∏–∞–ª—å–Ω—ã–π –¥–µ—Ç–µ–∫—Ç–∏–≤... [–ø—Ä–æ–º–ø—Ç –∫–∞–∫ —Ä–∞–Ω—å—à–µ]")
        final_reveal = await _call_ionet_api([{"role": "user", "content": prompt}], IONET_TEXT_MODEL_ID, 1024, 0.7)
        header = "üèÜ –î–ï–õ–û –†–ê–°–ö–†–´–¢–û! üèÜ" if is_correct else "ü§¶ –î–ï–õ–û –ü–†–û–í–ê–õ–ï–ù–û! ü§¶"
        final_message = f"<b>{header}</b>\n\n–í—ã –æ–±–≤–∏–Ω–∏–ª–∏: <b>{accused_name}</b>\n\n{final_reveal}"
        
        # –†–µ–¥–∞–∫—Ç–∏—Ä—É–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –∫–Ω–æ–ø–∫–∞–º–∏, —á—Ç–æ–±—ã –ø–æ–∫–∞–∑–∞—Ç—å —Ñ–∏–Ω–∞–ª
        await query.edit_message_text(text=final_message, parse_mode='HTML', reply_markup=None)

    elif action == 'info':
        # –í–æ–∑–≤—Ä–∞—â–∞–µ–º—Å—è –∫ –≥–ª–∞–≤–Ω–æ–º—É –º–µ–Ω—é
        await show_or_update_case_info(context, chat_id, message_id)


# --- –¢–û–ß–ö–ê –í–•–û–î–ê –ò –ó–ê–ü–£–°–ö ---
app = Flask(__name__)
@app.route('/')
def index(): return "Sherlock Bolms Detective Agency is running.", 200
@app.route('/healthz')
def health_check(): return "OK", 200

async def run_bot_async(application: Application) -> None:
    await application.initialize()
    await application.start()
    if application.updater:
        await application.updater.start_polling()
    logger.info("–ë–æ—Ç –∑–∞–ø—É—â–µ–Ω –∏ —Ä–∞–±–æ—Ç–∞–µ—Ç –≤ —Ä–µ–∂–∏–º–µ polling...")
    await asyncio.Future()

async def main() -> None:
    application = Application.builder().token(TELEGRAM_BOT_TOKEN).build()

    # –û—Å–Ω–æ–≤–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã
    application.add_handler(CommandHandler("start", help_command))
    application.add_handler(CommandHandler("help", help_command))
    application.add_handler(CommandHandler("new_case", start_new_case))
    application.add_handler(CommandHandler("case_info", case_info_command))

    # –ù–û–í–´–ô –û–ë–†–ê–ë–û–¢–ß–ò–ö –î–õ–Ø –í–°–ï–• –ö–ù–û–ü–û–ö
    application.add_handler(CallbackQueryHandler(detective_button_callback, pattern=r'^detective:'))

    logger.info("–û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ Telegram –¥–æ–±–∞–≤–ª–µ–Ω—ã.")

    # –ó–∞–ø—É—Å–∫ —Å–µ—Ä–≤–µ—Ä–∞ –∏ –±–æ—Ç–∞
    port = int(os.environ.get("PORT", 8080))
    hypercorn_config = hypercorn.config.Config()
    hypercorn_config.bind = [f"0.0.0.0:{port}"]
    
    shutdown_event = asyncio.Event()
    bot_task = asyncio.create_task(run_bot_async(application))
    server_task = asyncio.create_task(hypercorn_async_serve(app, hypercorn_config, shutdown_trigger=shutdown_event.wait))

    try:
        await asyncio.gather(bot_task, server_task)
    except asyncio.CancelledError:
        logger.info("–ó–∞–¥–∞—á–∏ –±—ã–ª–∏ –æ—Ç–º–µ–Ω–µ–Ω—ã, –∑–∞–≤–µ—Ä—à–µ–Ω–∏–µ —Ä–∞–±–æ—Ç—ã...")
    finally:
        if application.updater and application.updater.is_running: await application.updater.stop()
        if application.running: await application.stop()
        shutdown_event.set()

if __name__ == "__main__":
    logger.info("–ó–∞–ø—É—Å–∫ —Å–∫—Ä–∏–ø—Ç–∞ bot.py...")
    try:
        asyncio.run(main())
    except (KeyboardInterrupt, SystemExit):
        logger.info("–°–∫—Ä–∏–ø—Ç –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω –≤—Ä—É—á–Ω—É—é.")
    except Exception as e:
        logger.critical(f"–ö–†–ò–¢–ò–ß–ï–°–ö–ê–Ø –û–®–ò–ë–ö–ê –í main: {e}", exc_info=True)
